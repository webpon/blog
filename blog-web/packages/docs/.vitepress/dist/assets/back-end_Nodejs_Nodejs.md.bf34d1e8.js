import{_ as s,c as n,o as a,a as p}from"./app.c083b91f.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":3,"title":"Api","slug":"api","link":"#api","children":[]},{"level":3,"title":"开发框架","slug":"开发框架","link":"#开发框架","children":[]},{"level":3,"title":"工具库","slug":"工具库","link":"#工具库","children":[]},{"level":3,"title":"包管理","slug":"包管理","link":"#包管理","children":[]}],"relativePath":"back-end/Nodejs/Nodejs.md"}'),e={name:"back-end/Nodejs/Nodejs.md"},o=p(`<h3 id="api" tabindex="-1">Api <a class="header-anchor" href="#api" aria-hidden="true">#</a></h3><h3 id="开发框架" tabindex="-1">开发框架 <a class="header-anchor" href="#开发框架" aria-hidden="true">#</a></h3><ul><li>Express</li><li>Koa</li><li>Egg</li></ul><h3 id="工具库" tabindex="-1">工具库 <a class="header-anchor" href="#工具库" aria-hidden="true">#</a></h3><h3 id="包管理" tabindex="-1">包管理 <a class="header-anchor" href="#包管理" aria-hidden="true">#</a></h3><blockquote><p>用于安装 Node.js 的扩展、工具等。</p></blockquote><h4 id="npm" tabindex="-1">npm <a class="header-anchor" href="#npm" aria-hidden="true">#</a></h4><h5 id="npm简介" tabindex="-1">npm简介 <a class="header-anchor" href="#npm简介" aria-hidden="true">#</a></h5><blockquote><p>Npm(Node Package Manager) 是node的包管理工具，是用JavaScript写出来的工具 ，被内置进了node中</p></blockquote><h5 id="npm的组成" tabindex="-1">npm的组成 <a class="header-anchor" href="#npm的组成" aria-hidden="true">#</a></h5><table><thead><tr><th>组成</th><th>简介</th></tr></thead><tbody><tr><td>网站</td><td>网站 是开发者查找包（package）、设置参数以及管理 npm 使用体验的主要途径</td></tr><tr><td>注册表（registry）</td><td>注册表 是一个巨大的数据库，保存了每个包（package）的信息</td></tr><tr><td>命令行工具 (CLI)</td><td>CLI 通过命令行或终端运行。开发者通过 CLI 与 npm 打交道</td></tr><tr><td>npm服务器</td><td>用于存储所有的npm包</td></tr></tbody></table><h5 id="npm有什么用" tabindex="-1">npm有什么用 <a class="header-anchor" href="#npm有什么用" aria-hidden="true">#</a></h5><ul><li>允许用户从NPM服务器下载别人编写的第三方包到本地使用</li><li>允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用</li><li>允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用</li></ul><h5 id="node-js-安装配置链接-node-js中内置有npm" tabindex="-1">Node.js 安装配置链接（Node.js中内置有npm） <a class="header-anchor" href="#node-js-安装配置链接-node-js中内置有npm" aria-hidden="true">#</a></h5><p><a href="https://jingyan.baidu.com/article/c85b7a64b6498c003aac956a.html" target="_blank" rel="noreferrer">https://jingyan.baidu.com/article/c85b7a64b6498c003aac956a.html</a></p><h5 id="npm中文文档" tabindex="-1">npm中文文档 <a class="header-anchor" href="#npm中文文档" aria-hidden="true">#</a></h5><p><a href="https://www.npmjs.com/" target="_blank" rel="noreferrer">https://www.npmjs.com/</a> 官网 <a href="https://www.npmjs.com.cn/" target="_blank" rel="noreferrer">https://www.npmjs.com.cn/</a> 中文文档</p><h5 id="检测是否成功安装npm" tabindex="-1">检测是否成功安装npm <a class="header-anchor" href="#检测是否成功安装npm" aria-hidden="true">#</a></h5><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm -v		</span></span>
<span class="line"><span style="color:#A6ACCD;">6.4.1		//安装成功会返回这个版本号</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h5 id="npm基本使用" tabindex="-1">npm基本使用 <a class="header-anchor" href="#npm基本使用" aria-hidden="true">#</a></h5><p><strong>npm安装模块</strong></p><p>【<strong>npm install</strong> xxx】利用 npm 安装xxx模块到当前命令行所在目录； 【<strong>npm install</strong> -g xxx】利用npm安装全局模块xxx；</p><p><strong>本地安装时将模块写入package.json中：</strong></p><p>【<strong>npm install</strong> xxx】安装但不写入package.json； 【<strong>npm install</strong> xxx --save】 安装并写入package.json的&quot;dependencies&quot;中； 【<strong>npm install</strong> xxx --save-dev】安装并写入package.json的&quot;devDependencies&quot;中。</p><p><strong>npm 删除模块</strong></p><p>【<strong>npm uninstall</strong> xxx】删除xxx模块； <strong>【npm uninstall -g xxx】删除全局模块xxx；</strong></p><p><strong>全局安装与本地安装</strong></p><p>npm 的包安装分为本地安装（local），全局安装（global）两种，从敲的命令行来看，差别只是有没有-g而已，比如</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">	npm install &lt;Module Name&gt;         # 本地安装</span></span>
<span class="line"><span style="color:#A6ACCD;">     npm install &lt;Module Name&gt; -g      # 全局安装</span></span>
<span class="line"><span style="color:#A6ACCD;">     // install可以缩写为i</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><code>npm install</code> 可以把发布在 npmjs 平台上的模块包下载到本地，<code>npm install -g</code> 可以把包下下来的同时，还帮我们配置好全局变量，让我们可以直接使用命令 而不是通过 node 来执行或者配置 <code>package.json</code> 的 script 脚本来 run。</p><p>不全局安装的话需要在该依赖包下面执行npm link才能在命令行使用</p><p><strong>npm link</strong></p><p>npm link可以配置一些我们的终端命令</p><p>第一步，我们需要init一个package.json</p><p>然后在package.json中加入bin:index.js</p><p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210227220351.png" alt="20210227220351"></p><p>然后在项目根目录上创建index.js</p><p>输入代码：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">//这行是必须的，且必须放于首行</span></span>
<span class="line"><span style="color:#A6ACCD;">#!/usr/bin/env node</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(&#39;测试&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>执行npm link</p><p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210227220355.png" alt="image-20210221131628465"></p><p>这样我们就创建好我们的命令了</p><p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210227220359.png" alt="image-20210221131655226"></p><p>如果想卸载的话可以使用npm unlink</p><p><strong>查看全局安装的依赖包</strong> npm list -g --depth 0</p><p>查看全局安装目录 npm config get prefix</p><h5 id="切换npm下载地址" tabindex="-1">切换npm下载地址 <a class="header-anchor" href="#切换npm下载地址" aria-hidden="true">#</a></h5><p>由于国内直接使用 npm 的官方镜像是非常慢的，这里推荐使用淘宝 NPM 镜像。</p><p>一、npm切换下载地址</p><ul><li>使用 npm install nrm -g 下载它</li><li>查询可用下载地址 nrm ls</li><li>切换 npm 下载地址 nrm use 下载地址名称</li><li>nrm test测试各接口网速情况</li><li>增加定制源：nrm add test <a href="http://192.168.1.100:6666" target="_blank" rel="noreferrer">http://192.168.1.100:6666</a></li><li>删除源：nrm del test</li></ul><p>二、cnpm安装</p><ul><li>可以使用淘宝定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm: <code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code> 这样就可以使用 cnpm 命令来安装模块了： <code>cnpm install [name]</code></li></ul><p>但是有可能会出现以下问题：</p><p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img2029744-20200909204105073-1282103276.png" alt="img"></p><p>解决方法：</p><p>1、在系统中搜索框 输入 Windos PowerShell</p><p>2、点击“管理员身份运行”</p><p>3、输入“ set-ExecutionPolicy RemoteSigned”回车</p><p>4、根据提示，输入A，回车</p><p>5、再次回到cnpm -v执行成功。</p><h5 id="package-json" tabindex="-1">package.json <a class="header-anchor" href="#package-json" aria-hidden="true">#</a></h5><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;name&quot;: &quot;studyangular&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;version&quot;: &quot;0.0.0&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;dependencies&quot;: {},</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;repository&quot;: {},</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;devDependencies&quot;: {</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;grunt&quot;: &quot;^0.4.5&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;grunt-autoprefixer&quot;: &quot;^2.0.0&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;grunt-concurrent&quot;: &quot;^1.0.0&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;grunt-contrib-clean&quot;: &quot;^0.6.0&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;grunt-contrib-compass&quot;: &quot;^1.0.0&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;grunt-contrib-concat&quot;: &quot;^0.5.0&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;grunt-contrib-connect&quot;: &quot;^0.9.0&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;grunt-contrib-copy&quot;: &quot;^0.7.0&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;grunt-contrib-cssmin&quot;: &quot;^0.12.0&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;grunt-contrib-htmlmin&quot;: &quot;^0.4.0&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;grunt-contrib-imagemin&quot;: &quot;^0.9.2&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;grunt-contrib-jshint&quot;: &quot;^0.11.0&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;grunt-contrib-uglify&quot;: &quot;^0.7.0&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;grunt-contrib-watch&quot;: &quot;^0.6.1&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;grunt-filerev&quot;: &quot;^2.1.2&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;grunt-google-cdn&quot;: &quot;^0.4.3&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;grunt-newer&quot;: &quot;^1.1.0&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;grunt-ng-annotate&quot;: &quot;^0.9.2&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;grunt-svgmin&quot;: &quot;^2.0.0&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;grunt-usemin&quot;: &quot;^3.0.0&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;grunt-wiredep&quot;: &quot;^2.0.0&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;jshint-stylish&quot;: &quot;^1.0.0&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;load-grunt-tasks&quot;: &quot;^3.1.0&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;time-grunt&quot;: &quot;^1.0.0&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  },</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;engines&quot;: {</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;node&quot;: &quot;&gt;=0.10.0&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  },</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;scripts&quot;: {</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;test&quot;: &quot;grunt test&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h6 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-hidden="true">#</a></h6><p>本文档有所有package.json中必要的配置。它必须是真正的json，而不是js对象。</p><p>本文档中描述的很多行为都受<code>npm-config(7)</code>的影响。</p><p>npm的package.json中文文档 : <a href="https://github.com/ericdum/mujiang.info/issues/6/" target="_blank" rel="noreferrer">https://github.com/ericdum/mujiang.info/issues/6/</a></p><h6 id="默认值" tabindex="-1">默认值 <a class="header-anchor" href="#默认值" aria-hidden="true">#</a></h6><p>npm会根据包内容设置一些默认值。</p><ul><li><p><code>&quot;scripts&quot;: {&quot;start&quot;: &quot;node server.js&quot;}</code></p><p>如果包的根目录有<code>server.js</code>文件，npm会默认将<code>start</code>命令设置为<code>node server.js</code>。</p></li><li><p><code>&quot;scripts&quot;:{&quot;preinstall&quot;: &quot;node-waf clean || true; node-waf configure build&quot;}</code></p><p>如果包的根目录有<code>wscript</code>文件，npm会默认将<code>preinstall</code>命令用node-waf进行编译。</p></li><li><p><code>&quot;scripts&quot;:{&quot;preinstall&quot;: &quot;node-gyp rebuild&quot;}</code></p><p>如果包的根目录有<code>binding.gyp</code>文件，npm会默认将<code>preinstall</code>命令用node-gyp进行编译。</p></li><li><p><code>&quot;contributors&quot;: [...]</code></p><p>如果包的根目录有<code>AUTHORS</code>文件，npm会默认逐行按<code>Name &lt;email&gt; (url)</code>格式处理，邮箱和url是可选的。#号和空格开头的行会被忽略。</p></li></ul><h6 id="name" tabindex="-1">name <a class="header-anchor" href="#name" aria-hidden="true">#</a></h6><p>在package.json中_最_重要的就是name和version字段。他们都是必须的，如果没有就无法install。name和version一起组成的标识在假设中是唯一的。改变包应该同时改变version。</p><p>name是这个东西的名字。注意：</p><ul><li>不要把node或者js放在名字中。因为你写了package.json它就被假定成为了js，不过你可以用&quot;engine&quot;字段指定一个引擎（见后文）。</li><li>这个名字会作为在URL的一部分、命令行的参数或者文件夹的名字。任何non-url-safe的字符都是不能用的。</li><li>这个名字可能会作为参数被传入require()，所以它应该比较短，但也要意义清晰。</li><li>在你爱上你的名字之前，你可能要去npm registry查看一下这个名字是否已经被使用了。<a href="http://registry.npmjs.org/" target="_blank" rel="noreferrer">http://registry.npmjs.org/</a></li></ul><h6 id="version" tabindex="-1">version <a class="header-anchor" href="#version" aria-hidden="true">#</a></h6><p>在package.json中_最_重要的就是name和version字段。他们都是必须的，如果没有就无法install。name和version一起组成的标识在假设中是唯一的。改变包应该同时改变version。</p><p>version必须能被<a href="https://github.com/isaacs/node-semver" target="_blank" rel="noreferrer">node-semver</a>解析，它被包在npm的依赖中。（要自己用可以执行<code>npm install semver</code>）</p><p>可用的“数字”或者“范围”见<a href="https://npmjs.org/doc/misc/semver.html" target="_blank" rel="noreferrer">semver(7)</a>.</p><h6 id="description" tabindex="-1">description <a class="header-anchor" href="#description" aria-hidden="true">#</a></h6><p>放简介，字符串。方便屌丝们在<code>npm search</code>中搜索。</p><h6 id="keywords" tabindex="-1">keywords <a class="header-anchor" href="#keywords" aria-hidden="true">#</a></h6><p>关键字，数组、字符串。还是方便屌丝们在<code>npm search</code>中搜索。</p><h6 id="homepage" tabindex="-1">homepage <a class="header-anchor" href="#homepage" aria-hidden="true">#</a></h6><p>项目官网的url。</p><p><strong>注意</strong>：这和“url”_不_一样。如果你放一个“url”字段，registry会以为是一个跳转到你发布在其他地方的地址，然后喊你滚粗。</p><p>嗯，滚粗，没开玩笑。</p><h6 id="bugs" tabindex="-1">bugs <a class="header-anchor" href="#bugs" aria-hidden="true">#</a></h6><p>你项目的提交问题的url和（或）邮件地址。这对遇到问题的屌丝很有帮助。</p><p>差不多长这样：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{ &quot;url&quot; : &quot;http://github.com/owner/project/issues&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">, &quot;email&quot; : &quot;project@hostname.com&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>你可以指定一个或者指定两个。如果你只想提供一个url，那就不用对象了，字符串就行。</p><p>如果提供了url，它会被<code>npm bugs</code>命令使用。</p><h6 id="license" tabindex="-1">license <a class="header-anchor" href="#license" aria-hidden="true">#</a></h6><p>你应该要指定一个许可证，让人知道使用的权利和限制的。</p><p>最简单的方法是，假如你用一个像BSD或者MIT这样通用的许可证，就只需要指定一个许可证的名字，像这样：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{ &quot;license&quot; : &quot;BSD&quot; }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>如果你又更复杂的许可条件，或者想要提供给更多地细节，可以这样:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&quot;licenses&quot; : [</span></span>
<span class="line"><span style="color:#A6ACCD;">  { &quot;type&quot; : &quot;MyLicense&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  , &quot;url&quot; : &quot;http://github.com/owner/project/path/to/license&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>在根目录中提供一个许可证文件也蛮好的。</p><h6 id="people-fields-author-contributors" tabindex="-1">people fields: author, contributors <a class="header-anchor" href="#people-fields-author-contributors" aria-hidden="true">#</a></h6><p>author是一个人。contributors是一堆人的数组。person是一个有name字段，可选的有url、email字段的对象，像这样：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{ &quot;name&quot; : &quot;Barney Rubble&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">, &quot;email&quot; : &quot;b@rubble.com&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">, &quot;url&quot; : &quot;http://barnyrubble.tumblr.com/&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>或者可以把所有的东西都放到一个字符串里，npm会给你解析：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&quot;Barney Rubble &lt;b@rubble.com&gt; (http://barnyrubble.tumblr.com/)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>email和url在两种形式中都是可选的。</p><p>也可以在你的npm用户信息中设置一个顶级的maintainers字段。</p><h6 id="files" tabindex="-1">files <a class="header-anchor" href="#files" aria-hidden="true">#</a></h6><p>files是一个包含项目中的文件的数组。如果命名了一个文件夹，那也会包含文件夹中的文件。（除非被其他条件忽略了）</p><p>你也可以提供一个.npmignore文件，让即使被包含在files字段中得文件被留下。其实就像.gitignore一样。</p><h6 id="main" tabindex="-1">main <a class="header-anchor" href="#main" aria-hidden="true">#</a></h6><p>main字段配置一个文件名指向模块的入口程序。如果你包的名字叫<code>foo</code>，然后用户<code>require(&quot;foo&quot;)</code>，main配置的模块的exports对象会被返回。</p><p>这应该是一个相对于根目录的文件路径。</p><p>对于大多数模块，它是非常有意义的，其他的都没啥。</p><h6 id="bin" tabindex="-1">bin <a class="header-anchor" href="#bin" aria-hidden="true">#</a></h6><p>很多包都有一个或多个可执行的文件希望被放到PATH中。npm让妈妈再也不用担心了（实际上，就是这个功能让npm可执行的）。</p><p>要用这个功能，给package.json中的<code>bin</code>字段一个命令名到文件位置的map。初始化的时候npm会将他链接到<code>prefix/bin</code>（全局初始化）或者<code>./node_modules/.bin/</code>（本地初始化）。</p><p>比如，npm有：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{ &quot;bin&quot; : { &quot;npm&quot; : &quot;./cli.js&quot; } }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>所以，当你初始化npm，它会创建一个符号链接到<code>cli.js</code>脚本到<code>/usr/local/bin/npm</code>。</p><p>如果你只有一个可执行文件，并且名字和包名一样。那么你可以只用一个字符串，比如：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{ &quot;name&quot;: &quot;my-program&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">, &quot;version&quot;: &quot;1.2.5&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">, &quot;bin&quot;: &quot;./path/to/program&quot; }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>结果和这个一样：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{ &quot;name&quot;: &quot;my-program&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">, &quot;version&quot;: &quot;1.2.5&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">, &quot;bin&quot; : { &quot;my-program&quot; : &quot;./path/to/program&quot; } }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>上传下载后npm会把package.json中的bin命令生成可执行命令放在.bin中，</p><p>我们可以通过./node_modules/.bin/脚本名，</p><p>或者通过node ./node_modules/包名/bin/脚本 执行，</p><p>还有就是通过我们设定的命令脚本script执行，</p><p>这个script会去.node_modules/.bin或者到全局安装目录去找找到该可执行脚本执行，但是都<code>比较麻烦</code>，</p><p>我们可以使用npx testbin来执行，它相当于npm run test</p><p>如果全局安装，那么可执行命令也会放到npm全局安装目录，这时候如果我们使用命令testbin，那么就会去npm全局安装目录去寻找该可执行命令</p><h6 id="man" tabindex="-1">man <a class="header-anchor" href="#man" aria-hidden="true">#</a></h6><p>指定一个单一的文件或者一个文件数组供<code>man</code>程序使用。</p><p>如果只提供一个单一的文件，那么它初始化后就是<code>man &lt;pkgname&gt;</code>的结果，而不管实际的文件名是神马，比如：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{ &quot;name&quot; : &quot;foo&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">, &quot;version&quot; : &quot;1.2.3&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">, &quot;description&quot; : &quot;A packaged foo fooer for fooing foos&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">, &quot;main&quot; : &quot;foo.js&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">, &quot;man&quot; : &quot;./man/doc.1&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>这样<code>man foo</code>就可以用到<code>./man/doc.1</code>文件了。</p><p>如果文件名不是以包名开头，那么它会被冠以前缀，下面的：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{ &quot;name&quot; : &quot;foo&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">, &quot;version&quot; : &quot;1.2.3&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">, &quot;description&quot; : &quot;A packaged foo fooer for fooing foos&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">, &quot;main&quot; : &quot;foo.js&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">, &quot;man&quot; : [ &quot;./man/foo.1&quot;, &quot;./man/bar.1&quot; ]</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>会为<code>man foo</code>和<code>man foo-bar</code>创建文件。</p><p>man文件需要以数字结束，然后可选地压缩后以<code>.gz</code>为后缀。The number dictates which man section the file is installed into.</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{ &quot;name&quot; : &quot;foo&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">, &quot;version&quot; : &quot;1.2.3&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">, &quot;description&quot; : &quot;A packaged foo fooer for fooing foos&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">, &quot;main&quot; : &quot;foo.js&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">, &quot;man&quot; : [ &quot;./man/foo.1&quot;, &quot;./man/foo.2&quot; ]</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>会为<code>man foo</code>和<code>man 2 foo</code>创建。</p><h6 id="directories" tabindex="-1">directories <a class="header-anchor" href="#directories" aria-hidden="true">#</a></h6><p>CommonJS <a href="http://wiki.commonjs.org/wiki/Packages/1.0" target="_blank" rel="noreferrer">Packages</a>规范说明了几种方式让你可以用<code>directories</code>hash标示出包得结构。如果看一下<a href="http://registry.npmjs.org/npm/latest" target="_blank" rel="noreferrer">npm&#39;s package.json</a>，你会看到有directories标示出doc, lib, and man。</p><p>在未来，这个信息可能会被用到。</p><p><strong>directories.lib</strong></p><p>告诉屌丝们你的库文件夹在哪里。目前没有什么特别的东西需要用到lib文件夹，但确实是重要的元信息。</p><p><strong>directories.bin</strong></p><p>如果你指定一个“bin”目录，然后在那个文件夹中得所有文件都会被当做&quot;bin&quot;字段使用。</p><p>如果你已经指定了“bin”字段，那这个就无效。</p><p><strong>directories.man</strong></p><p>一个放满man页面的文件夹。贴心地创建一个“man”字段。 A folder that is full of man pages. Sugar to generate a &quot;man&quot; array by walking the folder.</p><p><strong>directories.doc</strong></p><p>将markdown文件放在这里。最后，这些会被很好地展示出来，也许，某一天。 Put markdown files in here. Eventually, these will be displayed nicely, maybe, someday.</p><p><strong>directories.example</strong></p><p>将事例脚本放在这里。某一天，它可能会以聪明的方式展示出来。</p><h6 id="repository" tabindex="-1">repository <a class="header-anchor" href="#repository" aria-hidden="true">#</a></h6><p>指定你的代码存放的地方。这个对希望贡献的人有帮助。如果git仓库在github上，那么<code>npm docs</code>命令能找到你。</p><p>这样做：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&quot;repository&quot; :</span></span>
<span class="line"><span style="color:#A6ACCD;">  { &quot;type&quot; : &quot;git&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  , &quot;url&quot; : &quot;http://github.com/isaacs/npm.git&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">&quot;repository&quot; :</span></span>
<span class="line"><span style="color:#A6ACCD;">  { &quot;type&quot; : &quot;svn&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  , &quot;url&quot; : &quot;http://v8.googlecode.com/svn/trunk/&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>URL应该是公开的（即便是只读的）能直接被未经过修改的版本控制程序处理的url。不应该是一个html的项目页面。因为它是给计算机看的。</p><p>scripts</p><p>“scripts”是一个由脚本命令组成的hash对象，他们在包不同的生命周期中被执行。key是生命周期事件，value是要运行的命令。</p><p>参见 <a href="https://npmjs.org/doc/misc/npm-scripts.html" target="_blank" rel="noreferrer">npm-scripts(7)</a></p><p>config</p><p>&quot;config&quot; hash可以用来配置用于包脚本中的跨版本参数。在实例中，如果一个包有下面的配置：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{ &quot;name&quot; : &quot;foo&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">, &quot;config&quot; : { &quot;port&quot; : &quot;8080&quot; } }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>然后有一个“start”命令引用了<code>npm_package_config_port</code>环境变量，用户可以通过<code>npm config set foo:port 8001</code>来重写他。</p><p>参见 <a href="https://npmjs.org/doc/misc/npm-config.html" target="_blank" rel="noreferrer">npm-config(7)</a> 和 <a href="https://npmjs.org/doc/misc/npm-scripts.html" target="_blank" rel="noreferrer">npm-scripts(7)</a>。</p><h6 id="dependencies" tabindex="-1">dependencies <a class="header-anchor" href="#dependencies" aria-hidden="true">#</a></h6><p>依赖是给一组包名指定版本范围的一个hash。这个版本范围是一个由一个或多个空格分隔的字符串。依赖还可以用tarball或者git URL。</p><p>**请不要将测试或过渡性的依赖放在<code>dependencies</code>hash中。**见下文的<code>devDependencies</code>。</p><p>详见<a href="https://npmjs.org/doc/misc/semver.html" target="_blank" rel="noreferrer">semver(7)</a>.</p><ul><li><code>version</code> 必须完全和<code>version</code>一致</li><li><code>&gt;version</code> 必须比<code>version</code>大</li><li><code>&gt;=version</code> 同上</li><li><code>&lt;version</code> 同上</li><li><code>&lt;=version</code> 同上</li><li><code>~version</code> 大约一样，见<a href="https://npmjs.org/doc/misc/semver.html" target="_blank" rel="noreferrer">semver(7)</a></li><li><code>1.2.x</code> 1.2.0, 1.2.1, 等，但不包括1.3.0</li><li><code>http://...</code> 见下文&#39;依赖URL&#39;</li><li><code>*</code> 所有</li><li><code>&quot;&quot;</code> 空，同<code>*</code></li><li><code>version1 - version2</code> 同 <code>&gt;=version1 &lt;=version2</code>.</li><li><code>range1 || range2</code> 二选一。</li><li><code>git...</code> 见下文&#39;依赖Git URL&#39;</li><li><code>user/repo</code> 见下文&#39;GitHub URLs&#39;</li></ul><p>比如下面都是合法的：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{ &quot;dependencies&quot; :</span></span>
<span class="line"><span style="color:#A6ACCD;">  { &quot;foo&quot; : &quot;1.0.0 - 2.9999.9999&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  , &quot;bar&quot; : &quot;&gt;=1.0.2 &lt;2.1.2&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  , &quot;baz&quot; : &quot;&gt;1.0.2 &lt;=2.3.4&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  , &quot;boo&quot; : &quot;2.0.1&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  , &quot;qux&quot; : &quot;&lt;1.0.0 || &gt;=2.3.1 &lt;2.4.5 || &gt;=2.5.2 &lt;3.0.0&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  , &quot;asd&quot; : &quot;http://asdf.com/asdf.tar.gz&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  , &quot;til&quot; : &quot;~1.2&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  , &quot;elf&quot; : &quot;~1.2.3&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  , &quot;two&quot; : &quot;2.x&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  , &quot;thr&quot; : &quot;3.3.x&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h6 id="依赖url" tabindex="-1">依赖URL <a class="header-anchor" href="#依赖url" aria-hidden="true">#</a></h6><p>可以指定一个tarball URL，这个tarball将在包被初始化的时候下载并初始化。</p><p><strong>依赖Git URL</strong></p><p>Git urls 可以是下面几种形式：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git://github.com/user/project.git#commit-ish</span></span>
<span class="line"><span style="color:#A6ACCD;">git+ssh://user@hostname:project.git#commit-ish</span></span>
<span class="line"><span style="color:#A6ACCD;">git+ssh://user@hostname/project.git#commit-ish</span></span>
<span class="line"><span style="color:#A6ACCD;">git+http://user@hostname/project/blah.git#commit-ish</span></span>
<span class="line"><span style="color:#A6ACCD;">git+https://user@hostname/project/blah.git#commit-ish</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><code>commit-ish</code>是可以被<code>git checkout</code>的任何tag、sha或者branch。默认为<code>master</code>。</p><p><strong>GitHub URLs</strong></p><p>1.1.65版后，你可以仅仅用“user/foo-project”引用GitHub urls，比如：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;name&quot;: &quot;foo&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;version&quot;: &quot;0.0.0&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;dependencies&quot;: {</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;express&quot;: &quot;visionmedia/express&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h6 id="devdependencies" tabindex="-1">devDependencies <a class="header-anchor" href="#devdependencies" aria-hidden="true">#</a></h6><p>如果有人要使用你的模块，那么他们可能不需要你开发使用的外部测试或者文档框架。</p><p>在这种情况下，最好将这些附属的项目列在<code>devDependencies</code>中。</p><p>这些东西会在执行<code>npm link</code>或者<code>npm install</code>的时候初始化，并可以像其他npm配置参数一样管理。详见<a href="https://npmjs.org/doc/misc/npm-config.html" target="_blank" rel="noreferrer">npm-config(7)</a>。</p><p>对于非特定平台的构建步骤，比如需要编译CoffeeScript，可以用<code>prepublish</code>脚本去实现，并把它依赖的包放在devDependency中。（译者注：prepublish定义了在执行<code>npm publish</code>的时候先行执行的脚本）</p><p>比如：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{ &quot;name&quot;: &quot;ethopia-waza&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;description&quot;: &quot;a delightfully fruity coffee varietal&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;version&quot;: &quot;1.2.3&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;devDependencies&quot;: {</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;coffee-script&quot;: &quot;~1.6.3&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  },</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;scripts&quot;: {</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;prepublish&quot;: &quot;coffee -o lib/ -c src/waza.coffee&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  },</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;main&quot;: &quot;lib/waza.js&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><code>prepublish</code>脚本会在publishing前运行，这样用户就不用自己去require来编译就能使用。并且在开发模式中（比如本地运行<code>npm install</code>）会运行这个脚本以便更好地测试。</p><h6 id="peerdependencies" tabindex="-1">peerDependencies <a class="header-anchor" href="#peerdependencies" aria-hidden="true">#</a></h6><p>在一些场景中，如在一个host中不必须进行<code>require</code>时候，你想表现你的package与一个host工具或者库的兼容关键。这一般用来引用_插件_。尤其是你的模块可能要暴露一个特定的接口，并由host文档来预期和指定。</p><p>比如：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;name&quot;: &quot;tea-latte&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;version&quot;: &quot;1.3.5&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &quot;peerDependencies&quot;: {</span></span>
<span class="line"><span style="color:#A6ACCD;">    &quot;tea&quot;: &quot;2.x&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>这能保证你的package可以只和tea的2.x版本一起初始化。<code>npm install tea-latte</code>可能会产生下面的依赖关系</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">â”œâ”€â”€ tea-latte@1.3.5</span></span>
<span class="line"><span style="color:#A6ACCD;">â””â”€â”€ tea@2.2.0</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>试图初始化另一个有会冲突的依赖的插件将导致一个错误。因此，确保你的插件的需求约束越弱越好，而不要去把它锁定到一个特定的版本。</p><p>假设这个host遵守semver规范，只改变这个package的主版本会打破你的插件。因此，如果你在package中用过每个1.x版本，就用&quot;^1.0&quot;或者&quot;1.x&quot;来表示。如果你依赖于功能介绍1.5.2，用&quot;&gt;= 1.5.2 &lt; 2&quot;。</p><h6 id="bundleddependencies" tabindex="-1">bundledDependencies <a class="header-anchor" href="#bundleddependencies" aria-hidden="true">#</a></h6><p>一组包名，他们会在发布的时候被打包进去。</p><p>拼成<code>&quot;bundleDependencies&quot;</code>（缺d）也可以。</p><h6 id="optionaldependencies" tabindex="-1">optionalDependencies <a class="header-anchor" href="#optionaldependencies" aria-hidden="true">#</a></h6><p>如果一个依赖可用，但你希望在它安装错误的时候npm也能继续初始化，那么你可以把它放在<code>optionalDependencies</code> hash中。这是一个包名到版本或者url的map，就像<code>dependencies</code> hash一样。只是它运行错误。</p><p>处理缺乏依赖也是你的程序的责任。比如像这样：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">try {</span></span>
<span class="line"><span style="color:#A6ACCD;">  var foo = require(&#39;foo&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">  var fooVersion = require(&#39;foo/package.json&#39;).version</span></span>
<span class="line"><span style="color:#A6ACCD;">} catch (er) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  foo = null</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">if ( notGoodFooVersion(fooVersion) ) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  foo = null</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// .. then later in your program ..</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">if (foo) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  foo.doFooThings()</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><code>optionalDependencies</code>会覆盖<code>dependencies</code>中同名的项，所以通常比只放在一个地方好。</p><h6 id="engines" tabindex="-1">engines <a class="header-anchor" href="#engines" aria-hidden="true">#</a></h6><p>你可以指定工作的node的版本：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{ &quot;engines&quot; : { &quot;node&quot; : &quot;&gt;=0.10.3 &lt;0.12&quot; } }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>并且，像dependensies一样，如果你不指定版本或者指定“*”作为版本，那么所有版本的node都可以。</p><p>如果指定一个“engines”字段，那么npm会需要node在里面，如果“engines”被省略，npm会假定它在node上工作。</p><p>你也可以用“engines”字段来指定哪一个npm版本能更好地初始化你的程序，如：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">{ &quot;engines&quot; : { &quot;npm&quot; : &quot;~1.0.20&quot; } }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>记住，除非用户设置<code>engine-strict</code>标记，这个字段只是建议值。</p><h6 id="enginestrict" tabindex="-1">engineStrict <a class="header-anchor" href="#enginestrict" aria-hidden="true">#</a></h6><p>如果你确定你的模块_一定不_会运行在你指定版本之外的node或者npm上，你可以在package.json文件中设置<code>&quot;engineStrict&quot;:true</code>。它会重写用户的<code>engine-strict</code>设置。</p><p>除非你非常非常确定，否则不要这样做。如果你的engines hash过度地限制，很可能轻易让自己陷入窘境。慎重地考虑这个选择。如果大家滥用它，它会再以后的npm版本中被删除。</p><h6 id="os" tabindex="-1">os <a class="header-anchor" href="#os" aria-hidden="true">#</a></h6><p>你可以指定你的模块要运行在哪些操作系统中：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&quot;os&quot; : [ &quot;darwin&quot;, &quot;linux&quot; ]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>你也可以用黑名单代替白名单，在名字前面加上“!”就可以了：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&quot;os&quot; : [ &quot;!win32&quot; ]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>操作系统用<code>process.platform</code>来探测。</p><p>虽然没有很好地理由，但它是同时支持黑名单和白名单的。</p><h6 id="cpu" tabindex="-1">cpu <a class="header-anchor" href="#cpu" aria-hidden="true">#</a></h6><p>如果你的代码只能运行在特定的cpu架构下，你可以指定一个：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&quot;cpu&quot; : [ &quot;x64&quot;, &quot;ia32&quot; ]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>就像<code>os</code>选项，你也可以黑一个架构：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&quot;cpu&quot; : [ &quot;!arm&quot;, &quot;!mips&quot; ]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>cpu架构用<code>process.arch</code>探测。</p><h6 id="preferglobal" tabindex="-1">preferGlobal <a class="header-anchor" href="#preferglobal" aria-hidden="true">#</a></h6><p>如果包主要是需要全局安装的命令行程序，就设置它为<code>true</code>来提供一个warning给只在局部安装的人。</p><p>它不会真正的防止用户在局部安装，但如果它没有按预期工作它会帮助防止产生误会。</p><h6 id="private" tabindex="-1">private <a class="header-anchor" href="#private" aria-hidden="true">#</a></h6><p>如果你设置<code>&quot;private&quot;: true</code>，npm就不会发布它。</p><p>这是一个防止意外发布私有库的方式。如果你要确定给定的包是只发布在特定registry（如内部registry）的，用<code>publishConfig</code>hash的描述来重写<code>registry</code>的publish-time配置参数。</p><h6 id="publishconfig" tabindex="-1">publishConfig <a class="header-anchor" href="#publishconfig" aria-hidden="true">#</a></h6><p>这是一个在publish-time使用的配置集合。当你想设置tag或者registry的时候它非常有用，所以你可以确定一个给定的包没有打上“lastest”的tag或者被默认发布到全局的公开registry。</p><p>任何配置都可以被重写，但当然可能只有“tag”和“registry”与发布的意图有关。</p><p>参见<a href="https://npmjs.org/doc/misc/npm-config.html" target="_blank" rel="noreferrer">npm-config(7)</a>有可以被重写的列表。</p><h5 id="上传自己的npm包" tabindex="-1">上传自己的npm包 <a class="header-anchor" href="#上传自己的npm包" aria-hidden="true">#</a></h5><p><strong>方法一</strong>（最简单）：</p><p><strong>npm初始化</strong></p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm init</span></span>
<span class="line"></span></code></pre></div><p><strong>目录结构：</strong></p><p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210227220405.png" alt="image-20210109102616579"></p><p>index.js</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">     module.exports=function(){</span></span>
<span class="line"><span style="color:#A6ACCD;">          console.log(&#39;你好，这是我发布的npm包&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">     }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>package.json</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">     {</span></span>
<span class="line"><span style="color:#A6ACCD;">       &quot;name&quot;: &quot;webpontest224909&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">       &quot;version&quot;: &quot;2.0.0&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">       &quot;description&quot;: &quot;&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">       &quot;main&quot;: &quot;index.js&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">       &quot;scripts&quot;: {</span></span>
<span class="line"><span style="color:#A6ACCD;">         &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">       },</span></span>
<span class="line"><span style="color:#A6ACCD;">       &quot;author&quot;: &quot;&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">       &quot;license&quot;: &quot;ISC&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">     }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>.npmignore(要忽略的文件和文件夹)</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">     # 忽略目录</span></span>
<span class="line"><span style="color:#A6ACCD;">     examples/</span></span>
<span class="line"><span style="color:#A6ACCD;">     package/</span></span>
<span class="line"><span style="color:#A6ACCD;">     public/</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">     # 忽略指定文件</span></span>
<span class="line"><span style="color:#A6ACCD;">     vue.config.js</span></span>
<span class="line"><span style="color:#A6ACCD;">     *.map</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Terminal打印</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">This utility will walk you through creating a package</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">json file.</span></span>
<span class="line"><span style="color:#A6ACCD;">It only covers the most common items</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> tries to guess sensible defaults.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">See \`npm help json\` </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> definitive documentation on these fields</span></span>
<span class="line"><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> exactly what they </span><span style="color:#89DDFF;font-style:italic;">do</span><span style="color:#A6ACCD;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">Use \`npm install </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">pkg</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">\` afterwards to install a package </span><span style="color:#89DDFF;">and</span></span>
<span class="line"><span style="color:#A6ACCD;">save it as a dependency in the package</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">json file</span></span>
<span class="line"><span style="color:#A6ACCD;">Press </span><span style="color:#89DDFF;">^</span><span style="color:#A6ACCD;">C at any time to quit.</span></span>
<span class="line"><span style="color:#A6ACCD;">package name: </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ng</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">antd</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">cli</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">version: </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">1.0.0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">git repository: </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">https</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;font-style:italic;">//github.com/*****/ng-antd-cli.git)</span></span>
<span class="line"><span style="color:#A6ACCD;">author</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*****</span></span>
<span class="line"><span style="color:#A6ACCD;">license</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ISC</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> MIT</span></span>
<span class="line"><span style="color:#A6ACCD;">About to write to D</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">\\ng</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">antd</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">cli\\package</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">json</span><span style="color:#89DDFF;">:</span></span>
<span class="line"></span></code></pre></div><p><strong>npm登陆</strong></p><p>若是没有账号，请先注册 <a href="https://www.npmjs.com/%EF%BC%8C" target="_blank" rel="noreferrer">https://www.npmjs.com/，</a></p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm login</span></span>
<span class="line"></span></code></pre></div><p>Terminal打印</p><p>如果曾经设置过淘宝的镜像代理，这里打印的内容为：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Username: </span><span style="color:#89DDFF;">*****</span></span>
<span class="line"><span style="color:#A6ACCD;">Password:</span></span>
<span class="line"><span style="color:#A6ACCD;">Email: </span><span style="color:#89DDFF;">(this</span><span style="color:#A6ACCD;"> IS public</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*****</span></span>
<span class="line"><span style="color:#A6ACCD;">Logged in as </span><span style="color:#89DDFF;">*****</span><span style="color:#A6ACCD;"> on https:</span><span style="color:#676E95;font-style:italic;">//registry.npm.taobao.org/.</span></span>
<span class="line"></span></code></pre></div><p>如果么有设置过淘宝的镜像代理，这里打印的内容为：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Username: </span><span style="color:#89DDFF;">*****</span></span>
<span class="line"><span style="color:#A6ACCD;">Password:</span></span>
<span class="line"><span style="color:#A6ACCD;">Email: </span><span style="color:#89DDFF;">(this</span><span style="color:#A6ACCD;"> IS public</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*****</span></span>
<span class="line"><span style="color:#A6ACCD;">Logged in as </span><span style="color:#89DDFF;">*****</span><span style="color:#A6ACCD;"> on http:</span><span style="color:#676E95;font-style:italic;">//registry.npmjs.org/.</span></span>
<span class="line"></span></code></pre></div><p><strong>npm发布</strong></p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm publish</span></span>
<span class="line"></span></code></pre></div><p>Terminal打印</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm notice</span></span>
<span class="line"><span style="color:#A6ACCD;">npm notice package: ng</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">antd</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">cli@1.0.0</span></span>
<span class="line"><span style="color:#A6ACCD;">npm notice </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> Tarball Contents </span><span style="color:#89DDFF;">===</span></span>
<span class="line"><span style="color:#A6ACCD;">npm notice </span><span style="color:#F78C6C;">246B</span><span style="color:#A6ACCD;">  .editorconfig</span></span>
<span class="line"><span style="color:#A6ACCD;">npm notice </span><span style="color:#F78C6C;">2.3kB</span><span style="color:#A6ACCD;"> index</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span></span>
<span class="line"><span style="color:#A6ACCD;">npm notice </span><span style="color:#F78C6C;">810B</span><span style="color:#A6ACCD;">  package</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">json</span></span>
<span class="line"><span style="color:#A6ACCD;">npm notice </span><span style="color:#F78C6C;">214B</span><span style="color:#A6ACCD;">  README</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">md</span></span>
<span class="line"><span style="color:#A6ACCD;">npm notice </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> Tarball Details </span><span style="color:#89DDFF;">===</span></span>
<span class="line"><span style="color:#A6ACCD;">npm notice name:          ng</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">antd</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">cli</span></span>
<span class="line"><span style="color:#A6ACCD;">npm notice version:       1.0.0</span></span>
<span class="line"><span style="color:#A6ACCD;">npm notice package size:  </span><span style="color:#F78C6C;">1.6</span><span style="color:#A6ACCD;"> kB</span></span>
<span class="line"><span style="color:#A6ACCD;">npm notice unpacked size: </span><span style="color:#F78C6C;">3.5</span><span style="color:#A6ACCD;"> kB</span></span>
<span class="line"><span style="color:#A6ACCD;">npm notice shasum:        </span><span style="color:#F78C6C;">17453c1827a98e3aba1128ab92275b9ca1bb57e4</span></span>
<span class="line"><span style="color:#A6ACCD;">npm notice integrity:     sha512</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">e9gJf</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">qOqzABo</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">...</span><span style="color:#89DDFF;">]</span><span style="color:#F78C6C;">8imC9iepBwrmA</span><span style="color:#89DDFF;">==</span></span>
<span class="line"><span style="color:#A6ACCD;">npm notice total files:   </span><span style="color:#F78C6C;">4</span></span>
<span class="line"><span style="color:#A6ACCD;">npm notice</span></span>
<span class="line"><span style="color:#A6ACCD;">npm ERR</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;"> code E403</span></span>
<span class="line"><span style="color:#A6ACCD;">npm ERR</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">403</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">403</span><span style="color:#A6ACCD;"> Forbidden </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> PUT https:</span><span style="color:#676E95;font-style:italic;">//registry.npm.taobao.org/ng-antd-cli - [no_perms] Private mode enable, only admin can publish</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">module</span></span>
<span class="line"><span style="color:#A6ACCD;">npm ERR</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">403</span><span style="color:#A6ACCD;"> In most cases</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> you </span><span style="color:#89DDFF;">or</span><span style="color:#A6ACCD;"> one of your dependencies are requesting</span></span>
<span class="line"><span style="color:#A6ACCD;">npm ERR</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">403</span><span style="color:#A6ACCD;"> a package version that is forbidden by your security policy.</span></span>
<span class="line"></span></code></pre></div><p><code>报错，这里报错是说没有权限，这里就与之前是否设置过淘宝镜像有关系，如果登陆的是淘宝镜像，这里就会报错</code><code>（因为国内网络问题，很多人把npm的镜像代理到淘宝或者别的地方了，这里要设置回原始的镜像）</code></p><blockquote><p>设置npm的镜像地址</p></blockquote><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">原始地址</span></span>
<span class="line"><span style="color:#A6ACCD;">npm config set registry=http://registry.npmjs.org</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>再次发布</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm publish</span></span>
<span class="line"></span></code></pre></div><p>发布成功：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm notice</span></span>
<span class="line"><span style="color:#A6ACCD;">npm notice </span><span style="color:#F78C6C;">810B</span><span style="color:#A6ACCD;">  package</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">json</span></span>
<span class="line"><span style="color:#A6ACCD;">npm notice </span><span style="color:#F78C6C;">214B</span><span style="color:#A6ACCD;">  README</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">md</span></span>
<span class="line"><span style="color:#A6ACCD;">npm notice </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> Tarball Details </span><span style="color:#89DDFF;">===</span></span>
<span class="line"><span style="color:#A6ACCD;">npm notice name:          ng</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">antd</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">cli</span></span>
<span class="line"><span style="color:#A6ACCD;">npm notice version:       1.0.0</span></span>
<span class="line"><span style="color:#A6ACCD;">npm notice package size:  </span><span style="color:#F78C6C;">1.6</span><span style="color:#A6ACCD;"> kB</span></span>
<span class="line"><span style="color:#A6ACCD;">npm notice unpacked size: </span><span style="color:#F78C6C;">3.5</span><span style="color:#A6ACCD;"> kB</span></span>
<span class="line"><span style="color:#A6ACCD;">npm notice shasum:        </span><span style="color:#F78C6C;">17453c1827a98e3aba1128ab92275b9ca1bb57e4</span></span>
<span class="line"><span style="color:#A6ACCD;">npm notice integrity:     sha512</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">e9gJf</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">qOqzABo</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">...</span><span style="color:#89DDFF;">]</span><span style="color:#F78C6C;">8imC9iepBwrmA</span><span style="color:#89DDFF;">==</span></span>
<span class="line"><span style="color:#A6ACCD;">npm notice total files:   </span><span style="color:#F78C6C;">4</span></span>
<span class="line"><span style="color:#A6ACCD;">npm notice</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> ng</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">antd</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">cli@1.0.0</span></span>
<span class="line"></span></code></pre></div><p>可以到npm网页查看发布的包</p><p><strong>删除发布的包</strong></p><p>删除24小时内发布的包</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm unpublish </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">force </span></span>
<span class="line"></span></code></pre></div><p>删除指定名称的包</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm unpublish easy</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">deisgn@1.0.1 </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">force</span></span>
<span class="line"></span></code></pre></div><p>Terminal打印</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">🔥 Unpublishing antd</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">ng</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">li...</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">antd</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">ng</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">li</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">npm ERR</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;"> owner mutate Error getting user data </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> $</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">npm</span></span>
<span class="line"><span style="color:#A6ACCD;">npm ERR</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;"> code E404</span></span>
<span class="line"><span style="color:#A6ACCD;">npm ERR</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">404</span><span style="color:#A6ACCD;"> Not Found </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> GET http</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;font-style:italic;">//registry.npmjs.org/-/user/org.couchdb.user:%24(npm</span></span>
<span class="line"><span style="color:#A6ACCD;">🎉 Done.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">D</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">\\HC\\webstorm\\ng</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">antd</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">cli</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>到网页查看仍可以看到该包名，但是点击后产看可以看到已删除信息 <img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20191122163032514.png" alt="在这里插入图片描述"> 发布成功后，为了之后使用方便可以继续设置npm代理镜像</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm config set registry</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">https:</span><span style="color:#676E95;font-style:italic;">//registry.npm.taobao.org</span></span>
<span class="line"></span></code></pre></div><p>npm<strong>更新</strong></p><p>所谓的更新，其实就是再次发布</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm publish</span></span>
<span class="line"></span></code></pre></div><p>Terminal打印</p><p>报错信息</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm ERR</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;"> code E403</span></span>
<span class="line"><span style="color:#A6ACCD;">npm ERR</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">403</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">403</span><span style="color:#A6ACCD;"> Forbidden </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> PUT http:</span><span style="color:#676E95;font-style:italic;">//registry.npmjs.org/xxx-xxx - </span></span>
<span class="line"><span style="color:#A6ACCD;">You cannot publish over the previously published versions: 2.0.0.</span></span>
<span class="line"><span style="color:#A6ACCD;">npm ERR</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">403</span><span style="color:#A6ACCD;"> In most cases</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> you </span><span style="color:#89DDFF;">or</span><span style="color:#A6ACCD;"> one of your dependencies are requesting</span></span>
<span class="line"><span style="color:#A6ACCD;">npm ERR</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">403</span><span style="color:#A6ACCD;"> a package version that is forbidden by your security policy</span></span>
<span class="line"></span></code></pre></div><p>每次更新的时候需要改变package.json中的版本号 重新发布，OK了</p><p><code>上传npm,npm会把包进行处理，我们下载后会变得不一样</code></p><p>上传之前：</p><p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210301014716.png" alt="image-20210301014716717"></p><p>package.json:</p><p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210301014734.png" alt="image-20210301014734016"></p><p>上传下载后</p><p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210301034240.png" alt="image-20210301034240539"></p><p>package.json:</p><p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210301034310.png" alt="image-20210301034310175"></p><p>两者区别：上传下载后npm会把package.json中的bin命令生成可执行命令放在.bin中，</p><p>我们可以通过./node_modules/.bin/脚本名，</p><p>或者通过node ./node_modules/包名/bin/脚本 执行，</p><p>还有就是通过我们设定的命令脚本script执行，</p><p>这个script会去.node_modules/.bin或者到全局安装目录去找找到该可执行脚本执行，但是都<code>比较麻烦</code>，</p><p>我们可以使用npx testbin来执行，它相当于npm run test</p><p>如果全局安装，那么可执行命令也会放到npm全局安装目录，这时候如果我们使用命令testbin，那么就会去npm全局安装目录去寻找该可执行命令</p><h5 id="nodejs模块加载机制" tabindex="-1">Nodejs模块加载机制 <a class="header-anchor" href="#nodejs模块加载机制" aria-hidden="true">#</a></h5><p><strong>1) 模块的类型</strong><code>（最优先）</code></p><p>NodeJS模块分为两类，一类是核心模块，一类是文件模块。</p><p>1，核心模块就是NodeJS标准中提供的模块，如fs、http、net、vm等，官方提供的模块，编译成了二进制代码，直接可以通过require获取核心模块，核心模块具有最高的加载优先级，如果有模块和其命名冲突，nodeJS总会加载核心模块</p><p>2，文件模块则是存储为单独的文件或者文件夹的模块，可能是JS代码、JSON或编译好的C/C++代码。在不显示指定文件模块扩展名的时候，NodeJS会分别试图加上.js、.json和.node扩展名</p><p><strong>2)文件模块加载方式</strong></p><p>文件模块的加载有两种方式，一种是按路径加载，一种是查找node——modules文件夹</p><p><strong>A:按路径加载模块</strong></p><p>1，如果require参数以“/&quot;开头，那么就以绝对路径的方式查找模块名称，例如require（‘/home/byvoid/module’)将会按照优先级依次尝试加载/home/byvoid/module.js、/home/byvoid/module.json、/home/byvoid/module.node(所有无后缀的模块加载方式都是按照js/json/node的顺序）</p><p>2，如果require参数以‘./’或者&#39;../&#39;开头，则以相对路径来查找模块</p><p>3、文件夹包含，通过npm安装的第三方模块都是这种方式，指定到模块所在的文件夹，该文件夹就是模块名，以express为例：</p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img031742515993561.png" alt="img" style="zoom:80%;"><p>加载代码：var ex = require(&#39;./node_modules/express&#39;)</p><p>加载机制：</p><p>​ 首先搜索当前目录下的 package.json 文件，查找里面的mian属性，如果存在，则加载该属性所指定的的文件。</p><p>如果不存在 package.json 或者该文件里面没有main字段，nodejs将试图加载 index.js</p><p>都不存在那么就只有说一声Cannot find module了。</p><p><strong>B：通过查找node_modules目录加载模块</strong></p><p>如果require参数不以”/&quot;,&quot;./“,&quot;../”开头，而该模块又不是核心模块，那么就要通过node_module加载模块</p><p>在node_moduler目录的外面一层，我们可以直接使用require（‘express’)来代替require（&#39;./node_modules/express&#39;),这是node.js模块加载的一个重要特性，通过查找node_modules了目录来加载模块</p><p><code>当require遇到一个既不是核心模块，又不是以路径形式表示的模块名称时，会试图在当前目录下的node_module目录中查找是不是有这样一个模块，如果没有找到，则会在当前目录的上一层的node_module目录中继续查找，返回执行这一过程，直到i遇到根目录位置。</code></p><p>注意： 在node环境，<code>ES6中的模块化import，export目前尚未被支持，因此实际使用都是转换成</code>require，所以也会遵循nodejs模块机制</p><p>​ 在.js中，完全按照nodejs的机制来查找，但是如果在.vue文件中使用import，那么会优先查找.vue文件，而不是.js、.json和.node这样的顺序</p><h5 id="全局安装和局部安装的区别" tabindex="-1">全局安装和局部安装的区别 <a class="header-anchor" href="#全局安装和局部安装的区别" aria-hidden="true">#</a></h5><p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/imgwebp-165556988153688.webp" alt="img"></p><h6 id="本地安装" tabindex="-1">本地安装 <a class="header-anchor" href="#本地安装" aria-hidden="true">#</a></h6><ul><li><p>将安装包放在项目的 本目录中的node_modules 下（运行 npm 命令时所在的目录）如果没有 node_modules 目录，会在当前执行npm 命令的目录下生成node_modules 目录</p></li><li><p>可以通过 require() 来引入本地安装的包</p><p><code>注意：nodejs时用require引入包，ES6是用import</code></p><p><code>最重要的是如果引入的包本地没有会到全局安装的里面找</code></p><p><code>那为什么有些包在全局和局部都要安装呀？</code></p><p><code>答：如果只在局部安装，那么想要在命令行运行一些命令的话就要输入 node ./node_modules/包名/bin/脚本，非常麻烦，</code></p><p>​ <code>全局安装会在在环境变量注册，只需需要脚本名字即可执行。所以需要在命令行执行的包一般都要安装到全局。</code></p><p>​ <code>如果只在全局安装，在命令行和require，import都可以正常执行，因为require和import如果在node_modules没找到就会取全局中找，</code></p><p>​ <code>但是会有一个问题，不同项目都使用同一个包，这有些时候会有兼容问题，比如项目1需要的是10版本，项目2需要的版本是5，但是只有全局</code></p><p>​ <code>一个版本，那么就有可能有兼容问题，这时候就需要在本地安装适合自己的版本</code></p></li></ul><h6 id="全局安装" tabindex="-1">全局安装 <a class="header-anchor" href="#全局安装" aria-hidden="true">#</a></h6><ul><li>默认将安装包放在C:\\Users\\web\\AppData\\Roaming\\npm 下的 node_modules 的安装目录</li><li>可以直接在命令行里使用</li></ul>`,336),l=[o];function t(c,r,i,d,u,C){return a(),n("div",null,l)}const h=s(e,[["render",t]]);export{y as __pageData,h as default};
