import{_ as t,c as d,o as e,a as o}from"./app.e2a6dfd5.js";const u=JSON.parse('{"title":"Dialog","description":"","frontmatter":{"title":"Dialog","lang":"en-US"},"headers":[{"level":2,"title":"基础用法","slug":"基础用法","link":"#基础用法","children":[]},{"level":2,"title":"自定义头部","slug":"自定义头部","link":"#自定义头部","children":[]},{"level":2,"title":"嵌套的对话框","slug":"嵌套的对话框","link":"#嵌套的对话框","children":[]},{"level":2,"title":"可拖拽对话框","slug":"可拖拽对话框","link":"#可拖拽对话框","children":[]},{"level":2,"title":"属性","slug":"属性","link":"#属性","children":[]},{"level":2,"title":"插槽","slug":"插槽","link":"#插槽","children":[]},{"level":2,"title":"事件","slug":"事件","link":"#事件","children":[]}],"relativePath":"component/dialog.md"}'),a={name:"component/dialog.md"},l=o('<h1 id="dialog-对话框" tabindex="-1">Dialog 对话框 <a class="header-anchor" href="#dialog-对话框" aria-hidden="true">#</a></h1><p>在保留当前页面状态的情况下，告知用户并承载相关操作。</p><h2 id="基础用法" tabindex="-1">基础用法 <a class="header-anchor" href="#基础用法" aria-hidden="true">#</a></h2><p>Dialog 弹出一个对话框，适合需要定制性更大的场景。</p><p>:::demo 需要设置 model-value / v-model 属性，它接收 Boolean，当为 true 时显示 Dialog。 Dialog 分为两个部分：body 和 footer，footer 需要具名为 footer 的 slot。 title 属性用于定义标题，它是可选的，默认值为空。 最后，本例还展示了 before-close 的用法。</p><p>dialog/basic</p><p>:::</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>before-close 只会在用户点击关闭按钮或者对话框的遮罩区域时被调用。 如果你在 footer 具名插槽里添加了用于关闭 Dialog 的按钮，那么可以在按钮的点击回调函数里加入 before-close 的相关逻辑。</p></div><h2 id="自定义头部" tabindex="-1">自定义头部 <a class="header-anchor" href="#自定义头部" aria-hidden="true">#</a></h2><p>:::demo header 可用于自定义显示标题的区域。 为了保持可用性，除了使用此插槽外，使用 title 属性，或使用 titleId 插槽属性来指定哪些元素应该读取为对话框标题。</p><p>dialog/custom-header</p><p>:::</p><h2 id="嵌套的对话框" tabindex="-1">嵌套的对话框 <a class="header-anchor" href="#嵌套的对话框" aria-hidden="true">#</a></h2><p>如果需要在一个 Dialog 内部嵌套另一个 Dialog，需要使用 append-to-body 属性。</p><p>:::demo 通常我们不建议使用嵌套对话框。 如果你需要在页面上呈现多个对话框，你可以简单地打平它们，以便它们彼此之间是平级关系。 将内层 Dialog 的该属性设置为 true，它就会插入至 body 元素上，从而保证内外层 Dialog 和遮罩层级关系的正确。</p><p>dialog/nested-dialog</p><p>:::</p><h2 id="可拖拽对话框" tabindex="-1">可拖拽对话框 <a class="header-anchor" href="#可拖拽对话框" aria-hidden="true">#</a></h2><p>试着拖动一下header部分吧</p><p>:::demo 设置draggable属性为true以做到拖拽</p><p>dialog/draggable-dialog</p><p>:::</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>当设置 modal 属性为 false 时，请将 append-to-body 属性设置为 true，因为 Dialog 是通过 position: relative 来确定位置的。一旦移除了 modal 属性，Dialog 会基于当前的 DOM 元素来进行定位， 而不是基于 document.body，这会导致样式问题。</p></div><h2 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-hidden="true">#</a></h2><table><thead><tr><th>Attribute</th><th>Description</th><th>Type</th><th>Accepted Values</th><th>Default</th></tr></thead><tbody><tr><td>model-value / v-model</td><td>visibility of Dialog</td><td>boolean</td><td>—</td><td>—</td></tr><tr><td>title</td><td>title of Dialog. Can also be passed with a named slot (see the following table)</td><td>string</td><td>—</td><td>—</td></tr><tr><td>width</td><td>width of Dialog</td><td>string / number</td><td>—</td><td>50%</td></tr><tr><td>fullscreen</td><td>whether the Dialog takes up full screen</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>top</td><td>value for <code>margin-top</code> of Dialog CSS</td><td>string</td><td>—</td><td>15vh</td></tr><tr><td>modal</td><td>whether a mask is displayed</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>append-to-body</td><td>whether to append Dialog itself to body. A nested Dialog should have this attribute set to <code>true</code></td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>lock-scroll</td><td>whether scroll of body is disabled while Dialog is displayed</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>custom-class</td><td>custom class names for Dialog</td><td>string</td><td>—</td><td>—</td></tr><tr><td>open-delay</td><td>Time(milliseconds) before open</td><td>number</td><td>—</td><td>0</td></tr><tr><td>close-delay</td><td>Time(milliseconds) before close</td><td>number</td><td>—</td><td>0</td></tr><tr><td>close-on-click-modal</td><td>whether the Dialog can be closed by clicking the mask</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>close-on-press-escape</td><td>whether the Dialog can be closed by pressing ESC</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>show-close</td><td>whether to show a close button</td><td>boolean</td><td>—</td><td>true</td></tr><tr><td>before-close</td><td>callback before Dialog closes, and it will prevent Dialog from closing</td><td>function(done)，done is used to close the Dialog</td><td>—</td><td>—</td></tr><tr><td>draggable</td><td>enable dragging feature for Dialog</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>center</td><td>whether to align the header and footer in center</td><td>boolean</td><td>—</td><td>false</td></tr><tr><td>destroy-on-close</td><td>Destroy elements in Dialog when closed</td><td>boolean</td><td>—</td><td>false</td></tr></tbody></table><h2 id="插槽" tabindex="-1">插槽 <a class="header-anchor" href="#插槽" aria-hidden="true">#</a></h2><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>—</td><td>content of Dialog</td></tr><tr><td>header</td><td>content of the Dialog header</td></tr><tr><td>footer</td><td>content of the Dialog footer</td></tr></tbody></table><h2 id="事件" tabindex="-1">事件 <a class="header-anchor" href="#事件" aria-hidden="true">#</a></h2><table><thead><tr><th>Event Name</th><th>Description</th><th>Parameters</th></tr></thead><tbody><tr><td>open</td><td>triggers when the Dialog opens</td><td>—</td></tr><tr><td>opened</td><td>triggers when the Dialog opening animation ends</td><td>—</td></tr><tr><td>close</td><td>triggers when the Dialog closes</td><td>—</td></tr><tr><td>closed</td><td>triggers when the Dialog closing animation ends</td><td>—</td></tr><tr><td>open-auto-focus</td><td>triggers after Dialog opens and content focused</td><td>—</td></tr><tr><td>close-auto-focus</td><td>triggers after Dialog closed and content focused</td><td>—</td></tr></tbody></table>',29),r=[l];function i(s,n,h,c,g,p){return e(),d("div",null,r)}const f=t(a,[["render",i]]);export{u as __pageData,f as default};
