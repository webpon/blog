import{_ as s,c as a,o as n,a as l}from"./app.40dc24c8.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"computer/regular.md"}'),p={name:"computer/regular.md"},e=l(`<h5 id="正则表达式" tabindex="-1">正则表达式 <a class="header-anchor" href="#正则表达式" aria-hidden="true">#</a></h5><blockquote><p>正则表达式学习资源：<a href="https://r2coding.com/#/README?id=%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F" target="_blank" rel="noreferrer">https://r2coding.com/#/README?id=正则表达式</a></p></blockquote><blockquote><p>正则表达式用于定义一些字符串的规则</p><p>​ 计算机可以根据正则表达式来检查一个字符串是否符合规则</p><p>​ 将字符串中符合规则的内容提取出来</p></blockquote><p>正则表达式都能帮我们做什么？</p><p>​ 1、数据隐藏（188****3456）</p><p>​ 2、数据采集</p><p>​ 3、数据过滤</p><p>​ 4、数据验证（手机号，邮箱地址）</p><h6 id="创建正则表达式" tabindex="-1">创建正则表达式 <a class="header-anchor" href="#创建正则表达式" aria-hidden="true">#</a></h6><p><strong>使用构造函数来创建正则表达式</strong></p><p>语法：</p><p>​ var 变量 = new RegExp(&quot;正则表达式&quot;,匹配模式&quot;);</p><p>​ 使用typeof检查正则对象，会返回Object</p><p>​ 在构造函数中可以传递一个<code>匹配模式</code>作为第二个参数</p><p>​ 可以是：</p><p>​ i 忽略大小写</p><p>​ g 全局匹配模式， 会进行多次匹配</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">	//这个正则表达式可以来检查一个字符串中是否含有&quot;a&quot;,并且忽略大小写</span></span>
<span class="line"><span style="color:#A6ACCD;">	var reg = new RegExp(&quot;a&quot;,&#39;i&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">	//这个正则表达式可以来检查一个字符串中是否含有&quot;ab&quot;,并且忽略大小写</span></span>
<span class="line"><span style="color:#A6ACCD;">	var reg = new RegExp(&quot;ab&quot;,&#39;i&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><strong>使用字面量来创建正则表达式</strong></p><p>​ 语法：var 变量 = /正则表达式/匹配模式</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">	var reg = new RegExp(&#39;a&#39;,&#39;i&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">	var reg2 = /a/i; //等同于上面的创建方式</span></span>
<span class="line"><span style="color:#A6ACCD;">	console.log(reg2.test(&#39;a666&#39;))  //true</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><code>注：</code></p><p>​ 使用字面量的方式创建更加简单</p><p>​ 使用构造函数创建更加灵活</p><h6 id="正则语法" tabindex="-1">正则语法 <a class="header-anchor" href="#正则语法" aria-hidden="true">#</a></h6><p>​ 1、<strong>检查一个字符串是否含有“a&quot;</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">		//二者等价</span></span>
<span class="line"><span style="color:#A6ACCD;">		var reg = new RegExp(&#39;a&#39;) </span></span>
<span class="line"><span style="color:#A6ACCD;">		var reg2 = /a/</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>​ 2、<strong>检查一个字符串中是否含有a或b</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">		var reg = /a|b/    //使用 | 表示或者的意思</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>​ 3、<strong>检查一个字符串中是否含有字母</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">		var reg = /[ab]/   //[ ]里的内容也是或的关系，[ab] == a|b</span></span>
<span class="line"><span style="color:#A6ACCD;">		var reg2 = /[a-z]/  //[a-z] 任意小写字母</span></span>
<span class="line"><span style="color:#A6ACCD;">		var reg3 = /[A-Z]   //[A-Z] 任意大写字母</span></span>
<span class="line"><span style="color:#A6ACCD;">		var reg4 = /[A-z]/  //[A-z] 任意字母</span></span>
<span class="line"><span style="color:#A6ACCD;">		var reg5 = /[0-9]/  //[0-9] 任意数字</span></span>
<span class="line"><span style="color:#A6ACCD;">		console.log(reg.test(&quot;ae&quot;))  //true</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>​ 4、<strong>检查一个字符串中是否含有abc或adc或aec</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">		var reg = /abc|adc|aec/</span></span>
<span class="line"><span style="color:#A6ACCD;">		var reg2 = /a[bde]c/   //二者等价</span></span>
<span class="line"><span style="color:#A6ACCD;">		console.log(reg2.test(&quot;aec&quot;))  //true</span></span>
<span class="line"><span style="color:#A6ACCD;">		console.log(reg2.test(&quot;aeec&quot;))  //false</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>​ 5、<strong>[^]除了</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">		var reg = /[^ab]/  //字符串除了&quot;ab&quot;都行</span></span>
<span class="line"><span style="color:#A6ACCD;">		var reg2 = /[^0-9]/  //字符串除了纯数字字符串</span></span>
<span class="line"><span style="color:#A6ACCD;">		console.log(reg.test(&quot;ab&quot;))  //false</span></span>
<span class="line"><span style="color:#A6ACCD;">		console.log(reg.test(&quot;abc&quot;))  //true</span></span>
<span class="line"><span style="color:#A6ACCD;">		console.log(reg2.test(&quot;abc&quot;))  //true</span></span>
<span class="line"><span style="color:#A6ACCD;">		console.log(reg2.test(&quot;abc1&quot;))  //false</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>​ 6、<strong>^检查一个字符串中是否以a开头</strong></p><p>​ ^表示开头</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">		let reg = /^a/</span></span>
<span class="line"><span style="color:#A6ACCD;">		console.log(reg.test(&#39;fdsdfsfda&#39;)) //false</span></span>
<span class="line"><span style="color:#A6ACCD;">		console.log(reg.test(&#39;a45454sdhsadh&#39;))  //true</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>​ 7、<strong>$ 检查一个字符串中是否以a结尾</strong></p><p>​ $表示结尾</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">		let reg = /a$/</span></span>
<span class="line"><span style="color:#A6ACCD;">		console.log(reg.test(&#39;fdsdfsfda&#39;)) //true</span></span>
<span class="line"><span style="color:#A6ACCD;">		console.log(reg.test(&#39;a45454sdhsadh&#39;))  //false</span></span>
<span class="line"><span style="color:#A6ACCD;">		let reg2 = /^a$/</span></span>
<span class="line"><span style="color:#A6ACCD;">    		console.log(reg2.test(&#39;a&#39;)); //true</span></span>
<span class="line"><span style="color:#A6ACCD;">    		console.log(reg2.test(&#39;a4a&#39;)); //false</span></span>
<span class="line"><span style="color:#A6ACCD;">    		let reg = /^a|a$/   //a开头或者a结尾</span></span>
<span class="line"><span style="color:#A6ACCD;">    		console.log(reg.test(&#39;a322323&#39;));  //true</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>​ 8、<strong>/^$/ 完全匹配正则表达式，而不是含有就行了</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">		 let reg = /^a$/</span></span>
<span class="line"><span style="color:#A6ACCD;">           console.log(reg.test(&quot;a&quot;)) //true</span></span>
<span class="line"><span style="color:#A6ACCD;">           console.log(reg.test(&quot;aa&quot;)) //false</span></span>
<span class="line"><span style="color:#A6ACCD;">           let reg2 = /^aa$/</span></span>
<span class="line"><span style="color:#A6ACCD;">           console.log(reg2.test(&quot;a&quot;)) //false</span></span>
<span class="line"><span style="color:#A6ACCD;">           console.log(reg2.test(&quot;aa&quot;)) //true</span></span>
<span class="line"><span style="color:#A6ACCD;">           let reg3 = /^a123a$/</span></span>
<span class="line"><span style="color:#A6ACCD;">           console.log(reg3.test(&quot;a123a&quot;)); //true</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>​ 9、<strong>创建一个正则表达式，用来检查一个字符串是否是一个合法手机号</strong></p><p>​ 手机号的规则（11位）：</p><p>​ 1、以1开头</p><p>​ 2、第二位3-9任意数字</p><p>​ 3、第三位以后任意数字9个</p><p>​ ^1 [3-9] [0-9]{9}$</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">		var phoneStr = &quot;17806707109&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">         let reg = /^1[3-9][0-9]{9}$/  //如果以^开头$结尾，那么必须字段必须按规则严格匹配，不是含有就行了，{9}的意思是限定前面的[0-9]的数量</span></span>
<span class="line"><span style="color:#A6ACCD;">         console.log(reg.test(phoneStr)); //true</span></span>
<span class="line"><span style="color:#A6ACCD;">         console.log(reg.test(110));  //false</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>10、<strong>检查一个字符串中是否含有 .</strong></p><p>​ . 表示任意字符</p><p>​ 在正则表达式中使用\\作为转义字符</p><p>​ \\.表示.</p><p>​ \\\\表示\\</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">		var reg = /\\./</span></span>
<span class="line"><span style="color:#A6ACCD;">		reg = /\\\\/</span></span>
<span class="line"><span style="color:#A6ACCD;">		console.log(reg.test(&quot;b.\\\\&quot;))   //true</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>​ 注意：使用构造函数时，由于它的参数是一个字符串，而\\是字符串中的转义字符</p><p>​ 如果要使用\\则需要使用\\\\来替代</p><p>11、<strong>创建一个正则表达式检查一个字符串中是否含有单词child</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">	    let reg = /\\bchild\\b/</span></span>
<span class="line"><span style="color:#A6ACCD;">	    console.log(reg.test(&quot;hello child ren&quot;)) //true</span></span>
<span class="line"><span style="color:#A6ACCD;">	    console.log(reg.test(&quot;hello children&quot;)) //false</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>12、<strong>去除掉字符串中前后的空格</strong></p><p>​ <code>去掉空格就是使用&quot;&quot;来替换空格</code></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">	    let str = prompt(&quot;请输入：&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">         str = str.replace(/^\\s*|\\s*$/g,&quot;&quot;)  </span></span>
<span class="line"><span style="color:#A6ACCD;">         console.log(str);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>13、<strong>检查邮件地址格式的正则表达式</strong></p><p>​ <a href="mailto:2249096563@qq.com" target="_blank" rel="noreferrer">2249096563@qq.com</a></p><p>​ 任意字母数字下划线 @ 任意字母数字 .任意字母（2-5位） 任意字母（2-5位）</p><p>​ \\w{3,} @ [A-z0-9]+ (\\.）[A-z]{2,5}){1,2}</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">	   let str = prompt(&quot;请输入：&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">    	   var emailReg = /^\\w{3,}@[A-z0-9]+(\\.[A-z]{2,5}){1,2}$/</span></span>
<span class="line"><span style="color:#A6ACCD;">    	   console.log(emailReg.test(str));</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>14、<strong>排除含有lottery的行</strong></p><p>​ //不含有he</p><p>​ let reg = /^((?!he).)*$/</p><p>​ 正则：/^(http)(.(?!lottery))*(html)$/</p><p>​ 效果：</p><p>​ <img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img/20210505215706.png" alt="image-20201229153839358" style="zoom:80%;"></p><p>贪婪模式会尽可能匹配长</p><p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img/20210505215710.png" alt="image-20201229111303212"></p><p>非贪婪模式不会，在*或者+后面加一个？就会变成非贪婪模式了</p><p><strong>15、查询重复的字符</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">let reg = /(\\w)\\1*/g</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><strong>正则表达式中的小括号&quot;()&quot;。是代表分组的意思。 如果再其后面出现\\1则是代表与第一个小括号中要匹配的内容相同。</strong></p><p><strong>注意：\\1必须与小括号配合使用</strong></p><p><strong>16、不包含某些字符串</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">^((?!hede).)*$</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>表达式<code>(?!hede).</code>会往前查找，看看前面是不是没有<code>hede</code>字串，如果没有(是其它字符)，那么<code>.</code>(点号)就会匹配这些其它字符。这种正则表达式的“查找”也叫做 “zero-width-assertions”(零宽度断言)，因为它不会捕获任何的字符，只是判断。</p><p>在上面的例子里，每个空字符都会检查其前面的字符串是否不是‘hede’，如果不是，这<code>.</code>(点号)就是匹配捕捉这个字符。表达式<code>(?!hede).</code>只执行一次，所以，我们将这个表达式用括号包裹成组<code>(group)</code>，然后用<code>*</code>(星号)修饰——匹配0次或多次：</p><p><strong>量词</strong></p><p>​ -通过量词可以设置一个内容连续出现的次数</p><p>​ -量词只对它前面的一个内容起作用</p><p>​ -{n} 正好出现n次</p><p>​ -{m,n}出现m——n次</p><p>​ -{m,} 出现m次及以上</p><p>​ - + 至少一个，相当于{1，}</p><p>​ - * 0个或多个，相当于{0，}</p><p>​ - ？0个或1个，相当于{0，1}</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">          var reg = /a{3}/</span></span>
<span class="line"><span style="color:#A6ACCD;">          //ababab</span></span>
<span class="line"><span style="color:#A6ACCD;">          reg2 = /(ab){3}/</span></span>
<span class="line"><span style="color:#A6ACCD;">          reg3 = /ab{1,3}c/</span></span>
<span class="line"><span style="color:#A6ACCD;">          reg4 = /ab+c/</span></span>
<span class="line"><span style="color:#A6ACCD;">          reg5 = /ab*c/</span></span>
<span class="line"><span style="color:#A6ACCD;">          console.log(reg.test(&quot;aaabb&quot;))  //true</span></span>
<span class="line"><span style="color:#A6ACCD;">          console.log(reg2.test(&quot;ababab&quot;))  //true</span></span>
<span class="line"><span style="color:#A6ACCD;">          console.log(reg3.test(&quot;abc&quot;))  //true</span></span>
<span class="line"><span style="color:#A6ACCD;">          console.log(reg3.test(&quot;abbbbc&quot;))  //false</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img/20210505215720.png" alt="image-20201228215248352"></p><h6 id="正则表达式的组匹配" tabindex="-1">正则表达式的组匹配 <a class="header-anchor" href="#正则表达式的组匹配" aria-hidden="true">#</a></h6><p><strong>什么是分组</strong></p><p>通俗来说，我理解的分组就是在正则表达式中用（）包起来的内容代表了一个分组，像这样的：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">     var reg = /(\\d{2})/</span></span>
<span class="line"><span style="color:#A6ACCD;">     reg.test(&#39;12&#39;);  //true</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>这里reg中的(/d{2})就表示一个分组，匹配两位数字</p><p><strong>分组内容的的形式</strong></p><p>一个分组中可以像上面这样有一个具体的表达式，这样可以优雅地表达一个重复的字符串</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">     /hahaha/</span></span>
<span class="line"><span style="color:#A6ACCD;">     /(ha){3}/</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>这两个表达式是等效的，但有了分组之后可以更加简洁。</p><p>分组中还可以有多个候选表达式，例如</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">     var reg = /I come from (hunan|hubei|zhejiang)/;</span></span>
<span class="line"><span style="color:#A6ACCD;">     reg.test(&#39;I come from hunan&#39;);   //true</span></span>
<span class="line"><span style="color:#A6ACCD;">     reg.test(&#39;I come from hubei&#39;);   //true</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>也就是说在这个分组中，通过|隔开的几个候选表达式是并列的关系，所以可以把这个|理解为或的意思</p><p><strong>分组的分类</strong></p><p>分组有四种类型</p><ul><li>捕获型 ()</li><li>非捕获型 (?😃</li><li>正向前瞻型 (?=)</li><li>反向前瞻型 (?!) 我们使用的比较多的都是捕获型分组，只有这种分组才会暂存匹配到的串</li></ul><p><strong>分组的应用</strong></p><p>分组在正则中还算使用的比较广泛的，我们常用的是捕获型分组</p><ul><li><p>捕获与引用</p><ul><li>被正则表达式捕获(匹配)到的字符串会被暂存起来，其中，由分组捕获到的字符串会从1开始编号，于是我们可以引用这些字符串：</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">    var reg = /(\\d{4})-(\\d{2})-(\\d{2})/;</span></span>
<span class="line"><span style="color:#A6ACCD;">    var dateStr = &#39;2018-04-18&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">    reg.test(dateStr);  //true</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(RegExp.$1);  //2018</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(RegExp.$2);   //04</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(RegExp.$3);   //18</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>如果碰到类似/((kid) is (a (doubi)))/的嵌套分组，捕获的顺序是什么？来试试：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">  var reg = /((kid) is (a (doubi)))/  </span></span>
<span class="line"><span style="color:#A6ACCD;">  var str = &quot;kid is a doubi&quot;    </span></span>
<span class="line"><span style="color:#A6ACCD;">  reg.test( str ) // true    </span></span>
<span class="line"><span style="color:#A6ACCD;">  RegExp.$1 // kid is a doubi  </span></span>
<span class="line"><span style="color:#A6ACCD;">  RegExp.$2 // kid  </span></span>
<span class="line"><span style="color:#A6ACCD;">  RegExp.$3 // a doubi  </span></span>
<span class="line"><span style="color:#A6ACCD;">  RegExp.$4 // doubi    </span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>规则是以左括号出现的顺序进行捕获。</p></li><li><p>结合<code>replace方法</code>做字符串自定义替换</p><ul><li>String.prototype.replace方法的传参中可以直接引用被捕获的串，比如我们想开发中常见的日期格式替换,例如后台给你返回了一个2018/04/18,让你用正则替换为2018-04-18，就可以利用分组</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">var dateStr = &#39;2018/04/18&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">var reg = /(\\d{4})\\/(\\d{2})\\/(\\d{2})/;</span></span>
<span class="line"><span style="color:#A6ACCD;">dateStr = dateStr.replace(reg, &#39;$1-$2-$3&#39;) //&quot;2018-04-18&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>不过这里需要注意的是/是需要用\\转义的</p><p>如果第二差数是以回调函数的形式的话，回调函数的第一个参数是<code>每次</code>匹配到的全部字符串</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">    function toCamelCase(str) {</span></span>
<span class="line"><span style="color:#A6ACCD;">            return str.replace(/-(.)/g, function (match, $1) {</span></span>
<span class="line"><span style="color:#A6ACCD;">              console.log(match,$1);    //-d d</span></span>
<span class="line"><span style="color:#A6ACCD;">              return $1.toUpperCase()</span></span>
<span class="line"><span style="color:#A6ACCD;">            })</span></span>
<span class="line"><span style="color:#A6ACCD;">          } </span></span>
<span class="line"><span style="color:#A6ACCD;">        console.log(toCamelCase(&quot;abc-def-gh&quot;));   //abcDefGh</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div></li><li><p>反向引用</p><ul><li>正则表达式里也能进行引用，这称为反向引用：</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">     var reg = /(\\w{3}) is \\1/</span></span>
<span class="line"><span style="color:#A6ACCD;">     reg.test(&#39;kid is kid&#39;) // true</span></span>
<span class="line"><span style="color:#A6ACCD;">     reg.test(&#39;dik is dik&#39;) // true</span></span>
<span class="line"><span style="color:#A6ACCD;">     reg.test(&#39;kid is dik&#39;) // false</span></span>
<span class="line"><span style="color:#A6ACCD;">     reg.test(&#39;dik is kid&#39;) // false</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><ul><li>需要注意的是，如果引用了越界或者不存在的编号的话，就被被解析为普通的表达式</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">     var reg = /(\\w{3}) is \\6/;</span></span>
<span class="line"><span style="color:#A6ACCD;">     reg.test( &#39;kid is kid&#39; ); // false</span></span>
<span class="line"><span style="color:#A6ACCD;">     reg.test( &#39;kid is \\6&#39; );  // true</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div></li><li><p>非捕获型分组</p><ul><li>有的时候只是为了分组并不需要捕获的情况下就可以使用非捕获型分组，例如</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">     var reg = /(?:\\d{4})-(\\d{2})-(\\d{2})/</span></span>
<span class="line"><span style="color:#A6ACCD;">     var date = &#39;2012-12-21&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">     reg.test(date)</span></span>
<span class="line"><span style="color:#A6ACCD;">     RegExp.$1 // 12</span></span>
<span class="line"><span style="color:#A6ACCD;">     RegExp.$2 // 21</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div></li><li><p>正向与反向前瞻型分组</p><ul><li>正向前瞻型分组：你站在原地往前看，如果前方是指定的东西就返回true，否则为false</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">     var reg = /kid is a (?=doubi)/</span></span>
<span class="line"><span style="color:#A6ACCD;">     reg.test(&#39;kid is a doubi&#39;) // true</span></span>
<span class="line"><span style="color:#A6ACCD;">     reg.test(&#39;kid is a shabi&#39;) // false</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><ul><li>反向前瞻型分组：你站在原地往前看，如果前方不是指定的东西则返回true，如果是则返回false</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">     var reg = /kid is a (?!doubi)/</span></span>
<span class="line"><span style="color:#A6ACCD;">     reg.test(&#39;kid is a doubi&#39;) // false</span></span>
<span class="line"><span style="color:#A6ACCD;">     reg.test(&#39;kid is a shabi&#39;) // true</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div></li><li><p>既然前瞻型分组和非捕获型分组都不会捕获，那他们有什么区别呢？先看例子：</p></li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">     var reg, str = &quot;kid is a doubi&quot;;</span></span>
<span class="line"><span style="color:#A6ACCD;">     reg = /(kid is a (?:doubi))/</span></span>
<span class="line"><span style="color:#A6ACCD;">     reg.test(str)</span></span>
<span class="line"><span style="color:#A6ACCD;">     RegExp.$1 // kid is a doubi</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">     reg = /(kid is a (?=doubi))/</span></span>
<span class="line"><span style="color:#A6ACCD;">     reg.test(str)</span></span>
<span class="line"><span style="color:#A6ACCD;">     RegExp.$1 // kis is a</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>也就是说非捕获型分组匹配到的字符串任然会被外层分组匹配到，而前瞻型不会，所以如果你希望在外层分组中不匹配里面分组的值的话就可以使用前瞻型分组了。</p><h6 id="正则表达式对象的方法" tabindex="-1">正则表达式对象的方法 <a class="header-anchor" href="#正则表达式对象的方法" aria-hidden="true">#</a></h6><p>正则表达式的方法：</p><p>​ test()</p><p>​ -使用这个方法可以用来检查一个字符串是否符合正则表达式的规则，</p><p>​ 如果符合则返回true,否则返回false</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">		var reg = new RegExp(&quot;a&quot;,&#39;i&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">		console.log(reg.test(&quot;abcdjsk&quot;))  //true</span></span>
<span class="line"><span style="color:#A6ACCD;">		console.log(reg.test(&quot;bcdjsk&quot;))   //false	</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>​ exec()</p><p>​ -返回字符串中指定模式的字串，一次只能获取一个与之匹配的结果</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">		var reg = /[a-z]{3}/</span></span>
<span class="line"><span style="color:#A6ACCD;">		console.log(reg.exec(&quot;abcdjsk&quot;))  //abc</span></span>
<span class="line"><span style="color:#A6ACCD;">		console.log(reg.exec(&quot;ab&quot;))  //null</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h6 id="支持正则表达式的string对象的方法" tabindex="-1">支持正则表达式的String对象的方法 <a class="header-anchor" href="#支持正则表达式的string对象的方法" aria-hidden="true">#</a></h6><p><strong>search()</strong></p><p>​ <strong>-可以搜索字符串中是否含有指定内容</strong></p><p>​ <strong>-如果搜索到指定内容，则会返回第一次出现的索引，如果没有搜索到则返回 -1</strong></p><p>​ <strong>-它可以接受一个正则表达式作为参数，然后会根据正则表达式去检索字符串，并返回检索到的字符下标</strong></p><p>​ <strong>-search()只会查找第一个，即使设置全局匹配也没用</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">	var str &quot;hello abc hello aec&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">	//搜索字符串中是否含有abc或aec或afc</span></span>
<span class="line"><span style="color:#A6ACCD;">	var result = str.search(/a[bef]c/)</span></span>
<span class="line"><span style="color:#A6ACCD;">	console.log(result)  //6</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><strong>match()</strong></p><p>​ <strong>-可以根据正则表达式，从一个字符串中将符合条件的内容提取出来</strong></p><p>​ <strong>-默认情况下我们的match方法只会找到第一个符合要求的内容，找到之后就停止检索了</strong></p><p>​ <strong>我们可以设置正则表达式为全局匹配模式，这样就会匹配到所有的内容</strong></p><p>​ 返回值以数组的形式返回</p><p>​ 可以为一个正则表达式设置多个匹配模式，且顺序无所谓</p><p>​ -match()会将匹配到的内容封装到一个数组中返回，即时只查询到一个结果</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">	let str = &quot;1a2b3cA&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">	let result = str.match(/[a-z]/gi)  //全局匹配且忽略大小写</span></span>
<span class="line"><span style="color:#A6ACCD;">	console.log(result) //a,b,c,A</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><strong>replace()</strong></p><p>​ -可以将字符串中指定内容替换为新的内容</p><p>​ -参数：</p><p>​ 1、被替换的内容,可以接收一个正则表达式作为参数</p><p>​ 2、新的内容</p><p>返回值是改变后的数组</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">	let str = &quot;78a898a98&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">	let result = str.replace(&quot;a&quot;,&quot;@_@&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">	console.log(result)  //78@_@898a98</span></span>
<span class="line"><span style="color:#A6ACCD;">	let result2 = str.replace(/a/g,&quot;@_@&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">	console.log(result2)  //78@_@898@_@98</span></span>
<span class="line"><span style="color:#A6ACCD;">	let result3 = str.replace(/a/g,&quot;&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">	console.log(result3)  //7889898</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><strong>split()</strong></p><p>​ <strong>-可以将一个字符串拆分为一个数组</strong></p><p>​ <strong>-方法中可以传递字符串或者一个正则表达式作为参数，如果参数是正则表达式，那么方法就会根据正则表达式来拆分字符串</strong></p><p>​ <strong>-这个方法即使不指定全局匹配，也会全局拆分</strong></p><p>返回值是拆分后的数组</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">	var str = &quot;1a2b3c4&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">	//根据任意字母来将字符串进行拆分</span></span>
<span class="line"><span style="color:#A6ACCD;">	var result = str.split(/[A-z]/)</span></span>
<span class="line"><span style="color:#A6ACCD;">	console.log(result) //1,2,3,4</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h6 id="常用的正常表达式" tabindex="-1">常用的正常表达式 <a class="header-anchor" href="#常用的正常表达式" aria-hidden="true">#</a></h6><p>​ 一、校验数字的表达式</p><ol><li><p>数字：^[0-9]*$</p></li><li><p>n位的数字：^\\d{n}$</p></li><li><p>至少n位的数字：^\\d{n,}$</p></li><li><p>m-n位的数字：^\\d{m,n}$</p></li><li><p>零和非零开头的数字：^(0|[1-9][0-9]*)$</p></li><li><p>非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]{1,2})?$</p></li><li><p>带1-2位小数的正数或负数：^(-)?\\d+(.\\d{1,2})?$</p></li><li><p>正数、负数、和小数：^(-|+)?\\d+(.\\d+)?$</p></li><li><p>有两位小数的正实数：^[0-9]+(.[0-9]{2})?$</p></li><li><p>有1~3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$</p></li><li><p>非零的正整数：^[1-9]\\d*$ 或 ^([1-9][0-9]<em>){1,3}$ 或 ^+?[1-9][0-9]</em>$</p></li><li><p>非零的负整数：^-[1-9][]0-9&quot;<em>$ 或 ^-[1-9]\\d</em>$</p></li><li><p>非负整数：^\\d+$ 或 ^[1-9]\\d*|0$</p></li><li><p>非正整数：^-[1-9]\\d*|0$ 或 ^((-\\d+)|(0+))$</p></li><li><p>非负浮点数：^\\d+(.\\d+)?$ 或 ^[1-9]\\d*.\\d*|0.\\d*[1-9]\\d*|0?.0+|0$</p></li><li><p>非正浮点数：^((-\\d+(.\\d+)?)|(0+(.0+)?))$ 或 ^(-([1-9]\\d*.\\d*|0.\\d*[1-9]\\d*))|0?.0+|0$</p></li><li><p>正浮点数：^[1-9]\\d*.\\d*|0.\\d*[1-9]\\d*$ 或 ^(([0-9]+.[0-9]<em>[1-9][0-9]</em>)|([0-9]<em>[1-9][0-9]</em>.[0-9]+)|([0-9]<em>[1-9][0-9]</em>))$</p></li><li><p>负浮点数：^-([1-9]\\d*.\\d*|0.\\d*[1-9]\\d*)$ 或 ^(-(([0-9]+.[0-9]<em>[1-9][0-9]</em>)|([0-9]<em>[1-9][0-9]</em>.[0-9]+)|([0-9]<em>[1-9][0-9]</em>)))$</p></li><li><p>浮点数：^(-?\\d+)(.\\d+)?$ 或 ^-?([1-9]\\d*.\\d*|0.\\d*[1-9]\\d*|0?.0+|0)$</p></li></ol><p>二、校验字符的表达式</p><ol><li><p>汉字：^[\\u4e00-\\u9fa5]{0,}$</p></li><li><p>英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$</p></li><li><p>长度为3-20的所有字符：^.{3,20}$</p></li><li><p>由26个英文字母组成的字符串：^[A-Za-z]+$</p></li><li><p>由26个大写英文字母组成的字符串：^[A-Z]+$</p></li><li><p>由26个小写英文字母组成的字符串：^[a-z]+$</p></li><li><p>由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$</p></li><li><p>由数字、26个英文字母或者下划线组成的字符串：^\\w+$ 或 ^\\w{3,20}$</p></li><li><p>中文、英文、数字包括下划线：^[\\u4E00-\\u9FA5A-Za-z0-9_]+$</p></li><li><p>中文、英文、数字但不包括下划线等符号：^[\\u4E00-\\u9FA5A-Za-z0-9]+$ 或 ^[\\u4E00-\\u9FA5A-Za-z0-9]{2,20}$</p></li><li><p>可以输入含有^%&amp;&#39;,;=?$&quot;等字符：[^%&amp;&#39;,;=?$\\x22]+ 12 禁止输入含有~的字符：[^~\\x22]+</p></li></ol><p>三、特殊需求表达式</p><ol><li><p>Email地址：^\\w+([-+.]\\w+)<em>@\\w+([-.]\\w+)</em>.\\w+([-.]\\w+)*$</p></li><li><p>域名：[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?</p></li><li><p>InternetURL：[a-zA-z]+://[^\\s]* 或 ^http://([\\w-]+.)+[\\w-]+(/[\\w-./?%&amp;=]*)?$</p></li><li><p>手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\d{8}$</p></li><li><p>电话号码(&quot;XXX-XXXXXXX&quot;、&quot;XXXX-XXXXXXXX&quot;、&quot;XXX-XXXXXXX&quot;、&quot;XXX-XXXXXXXX&quot;、&quot;XXXXXXX&quot;和&quot;XXXXXXXX)：^((\\d{3,4}-)|\\d{3.4}-)?\\d{7,8}$</p></li><li><p>国内电话号码(0511-4405222、021-87888822)：\\d{3}-\\d{8}|\\d{4}-\\d{7}</p></li><li><p>身份证号(15位、18位数字)：^\\d{15}|\\d{18}$</p></li><li><p>短身份证号码(数字、字母x结尾)：^([0-9]){7,18}(x|X)?$ 或 ^\\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$</p></li><li><p>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$</p></li><li><p>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\\w{5,17}$</p></li><li><p>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.<em>\\d)(?=.</em>[a-z])(?=.*[A-Z]).{8,10}$</p></li><li><p>日期格式：^\\d{4}-\\d{1,2}-\\d{1,2}</p></li><li><p>一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$</p></li><li><p>一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$</p></li><li><p>钱的输入格式：</p></li><li><p>1.有四种钱的表示形式我们可以接受:&quot;10000.00&quot; 和 &quot;10,000.00&quot;, 和没有 &quot;分&quot; 的 &quot;10000&quot; 和 &quot;10,000&quot;：^[1-9][0-9]*$</p></li><li><p>2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符&quot;0&quot;不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$</p></li><li><p>3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$</p></li><li><p>4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$</p></li><li><p>5.必须说明的是,小数点后面至少应该有1位数,所以&quot;10.&quot;是不通过的,但是 &quot;10&quot; 和 &quot;10.2&quot; 是通过的：^[0-9]+(.[0-9]{2})?$</p></li><li><p>6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]{1,2})?$</p></li><li><p>7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$</p></li></ol><p>23 8.1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$</p><ol start="24"><li><p>备注：这就是最终结果了,别忘了&quot;+&quot;可以用&quot;*&quot;替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</p></li><li><p>xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$</p></li><li><p>中文字符的正则表达式：[\\u4e00-\\u9fa5]</p></li><li><p>双字节字符：[^\\x00-\\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</p></li><li><p>空白行的正则表达式：\\n\\s*\\r (可以用来删除空白行)</p></li><li><p>HTML标记的正则表达式：&lt;(\\S*?)[^&gt;]<em>&gt;.</em>?&lt;/\\1&gt;|&lt;.*? /&gt; (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</p></li><li><p>首尾空白字符的正则表达式：^\\s*|\\s*$或(^\\s*)|(\\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</p></li><li><p>腾讯QQ号：[1-9][0-9]{4,} (腾讯QQ号从10000开始)</p></li><li><p>中国邮政编码：[1-9]\\d{5}(?!\\d) (中国邮政编码为6位数字)</p></li><li><p>IP地址：\\d+.\\d+.\\d+.\\d+ (提取IP地址时有用)</p></li><li><p>IP地址：((?😦?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))</p></li></ol>`,162),t=[e];function o(c,i,r,C,g,A){return n(),a("div",null,t)}const y=s(p,[["render",o]]);export{u as __pageData,y as default};
