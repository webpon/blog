import{_ as e,c as t,o as s,a as o}from"./app.fc4ecf40.js";const u=JSON.parse('{"title":"Message","description":"","frontmatter":{"title":"Message","lang":"en-US"},"headers":[{"level":2,"title":"Basic usage","slug":"basic-usage","link":"#basic-usage","children":[]},{"level":2,"title":"Types","slug":"types","link":"#types","children":[]},{"level":2,"title":"Closable","slug":"closable","link":"#closable","children":[]},{"level":2,"title":"Use HTML string","slug":"use-html-string","link":"#use-html-string","children":[]},{"level":2,"title":"Global method","slug":"global-method","link":"#global-method","children":[]},{"level":2,"title":"Local import","slug":"local-import","link":"#local-import","children":[]},{"level":2,"title":"Message API","slug":"message-api","link":"#message-api","children":[{"level":3,"title":"Options","slug":"options","link":"#options","children":[]},{"level":3,"title":"Methods","slug":"methods","link":"#methods","children":[]}]}],"relativePath":"component/message.md"}'),a={name:"component/message.md"},d=o(`<h1 id="message" tabindex="-1">Message <a class="header-anchor" href="#message" aria-hidden="true">#</a></h1><p>Used to show feedback after an activity. The difference with Notification is that the latter is often used to show a system level passive notification.</p><h2 id="basic-usage" tabindex="-1">Basic usage <a class="header-anchor" href="#basic-usage" aria-hidden="true">#</a></h2><p>Displays at the top, and disappears after 3 seconds.</p><p>:::demo The setup of Message is very similar to notification, so parts of the options won&#39;t be explained in detail here. You can check the options table below combined with notification doc to understand it. Element Plus has registered a <code>$message</code> method for invoking. Message can take a string or a VNode as parameter, and it will be shown as the main body.</p><p>message/basic</p><p>:::</p><h2 id="types" tabindex="-1">Types <a class="header-anchor" href="#types" aria-hidden="true">#</a></h2><p>Used to show the feedback of Success, Warning, Message and Error activities.</p><p>:::demo When you need more customizations, Message component can also take an object as parameter. For example, setting value of <code>type</code> can define different types, and its default is <code>info</code>. In such cases the main body is passed in as the value of <code>message</code>. Also, we have registered methods for different types, so you can directly call it without passing a type like <code>open4</code>.</p><p>message/different-types</p><p>:::</p><h2 id="closable" tabindex="-1">Closable <a class="header-anchor" href="#closable" aria-hidden="true">#</a></h2><p>A close button can be added.</p><p>:::demo A default Message cannot be closed manually. If you need a closable message, you can set <code>showClose</code> field. Besides, same as notification, message has a controllable <code>duration</code>. Default duration is 3000 ms, and it won&#39;t disappear when set to <code>0</code>.</p><p>message/closable</p><p>:::</p><h2 id="use-html-string" tabindex="-1">Use HTML string <a class="header-anchor" href="#use-html-string" aria-hidden="true">#</a></h2><p><code>message</code> supports HTML string.</p><p>:::demo Set <code>dangerouslyUseHTMLString</code> to true and <code>message</code> will be treated as an HTML string.</p><p>message/raw-html</p><p>:::</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Although <code>message</code> property supports HTML strings, dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to <a href="https://en.wikipedia.org/wiki/Cross-site_scripting" target="_blank" rel="noreferrer">XSS attacks</a>. So when <code>dangerouslyUseHTMLString</code> is on, please make sure the content of <code>message</code> is trusted, and <strong>never</strong> assign <code>message</code> to user-provided content.</p></div><h2 id="global-method" tabindex="-1">Global method <a class="header-anchor" href="#global-method" aria-hidden="true">#</a></h2><p>Vangle has added a global method <code>$message</code> for <code>app.config.globalProperties</code>. So in a vue instance you can call <code>Message</code> like what we did in this page.</p><h2 id="local-import" tabindex="-1">Local import <a class="header-anchor" href="#local-import" aria-hidden="true">#</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">VanMessage</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vangle</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><p>In this case you should call <code>VanMessage(options)</code>. We have also registered methods for different types, e.g. <code>VanMessage.success(options)</code>. You can call <code>VanMessage.closeAll()</code> to manually close all the instances.</p><h2 id="message-api" tabindex="-1">Message API <a class="header-anchor" href="#message-api" aria-hidden="true">#</a></h2><h3 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-hidden="true">#</a></h3><table><thead><tr><th>Attribute</th><th>Description</th><th>Type</th><th>Default</th></tr></thead><tbody><tr><td><code>message</code></td><td>message text</td><td><code>string | VNode | (() =&gt; VNode)</code></td><td>—</td></tr><tr><td><code>type</code></td><td>message type</td><td><code>&#39;success&#39; | &#39;warning&#39; | &#39;info&#39; | &#39;error&#39;</code></td><td><code>&#39;info&#39;</code></td></tr><tr><td><code>icon</code></td><td>custom icon component, overrides <code>type</code></td><td><code>string | Component</code></td><td>—</td></tr><tr><td><code>dangerouslyUseHTMLString</code></td><td>whether <code>message</code> is treated as HTML string</td><td><code>boolean</code></td><td><code>false</code></td></tr><tr><td><code>custom-class</code></td><td>custom class name for Message</td><td><code>string</code></td><td>—</td></tr><tr><td><code>duration</code></td><td>display duration, millisecond. If set to 0, it will not turn off automatically</td><td><code>number</code></td><td><code>3000</code></td></tr><tr><td><code>show-close</code></td><td>whether to show a close button</td><td><code>boolean</code></td><td><code>false</code></td></tr><tr><td><code>center</code></td><td>whether to center the text</td><td><code>boolean</code></td><td><code>false</code></td></tr><tr><td><code>on-close</code></td><td>callback function when closed with the message instance as the parameter</td><td><code>function</code></td><td>—</td></tr><tr><td><code>offset</code></td><td>set the distance to the top of viewport</td><td><code>number</code></td><td><code>20</code></td></tr><tr><td><code>appendTo</code></td><td>set the root element for the message</td><td><code>string | HTMLElement</code></td><td><code>document.body</code></td></tr><tr><td><code>grouping</code></td><td>merge messages with the same content, type of VNode message is not supported</td><td><code>boolean</code></td><td><code>false</code></td></tr></tbody></table><h3 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-hidden="true">#</a></h3><p><code>Message</code> and <code>this.$message</code> returns the current Message instance. To manually close the instance, you can call <code>close</code> on it.</p><table><thead><tr><th>Method</th><th>Description</th></tr></thead><tbody><tr><td><code>close</code></td><td>close the Message</td></tr></tbody></table>`,34),c=[d];function n(i,l,r,h,p,g){return s(),t("div",null,c)}const f=e(a,[["render",n]]);export{u as __pageData,f as default};
