import{_ as a,c as l,o as e,a as n}from"./app.e2a6dfd5.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"Yarn","slug":"yarn","link":"#yarn","children":[{"level":3,"title":"yarn的简介：","slug":"yarn的简介","link":"#yarn的简介","children":[]},{"level":3,"title":"yarn的特点：","slug":"yarn的特点","link":"#yarn的特点","children":[]},{"level":3,"title":"yarn的安装:","slug":"yarn的安装","link":"#yarn的安装","children":[]},{"level":3,"title":"yarn的常用命令：","slug":"yarn的常用命令","link":"#yarn的常用命令","children":[]},{"level":3,"title":"npm 与 yarn命令比较:","slug":"npm-与-yarn命令比较","link":"#npm-与-yarn命令比较","children":[]},{"level":3,"title":"npm 与 yarn相关问题比较:","slug":"npm-与-yarn相关问题比较","link":"#npm-与-yarn相关问题比较","children":[]}]}],"relativePath":"back-end/Nodejs/yarn.md"}'),i={name:"back-end/Nodejs/yarn.md"},r=n(`<h2 id="yarn" tabindex="-1">Yarn <a class="header-anchor" href="#yarn" aria-hidden="true">#</a></h2><h3 id="yarn的简介" tabindex="-1">yarn的简介： <a class="header-anchor" href="#yarn的简介" aria-hidden="true">#</a></h3><p>Yarn是facebook发布的一款取代npm的包管理工具。</p><h3 id="yarn的特点" tabindex="-1">yarn的特点： <a class="header-anchor" href="#yarn的特点" aria-hidden="true">#</a></h3><ul><li>速度超快。 <ul><li>Yarn 缓存了每个下载过的包，所以再次使用时无需重复下载。 同时利用并行下载以最大化资源利用率，因此安装速度更快。</li></ul></li><li>超级安全。 <ul><li>在执行代码之前，Yarn 会通过算法校验每个安装包的完整性。</li></ul></li><li>超级可靠。 <ul><li>使用详细、简洁的锁文件格式和明确的安装算法，Yarn 能够保证在不同系统上无差异的工作。</li></ul></li></ul><h3 id="yarn的安装" tabindex="-1">yarn的安装: <a class="header-anchor" href="#yarn的安装" aria-hidden="true">#</a></h3><ol><li>下载node.js，使用npm安装 <code>npm install -g yarn</code> <code>查看版本：yarn --version</code></li><li>安装node.js,下载yarn的安装程序: <a href="https://yarnpkg.com/en/docs/install#windows-stable" target="_blank" rel="noreferrer">提供一个.msi文件，在运行时将引导您在Windows上安装Yarn</a></li><li>Yarn 淘宝源安装，分别复制粘贴以下代码行到黑窗口运行即可 yarn config set registry <code>https://registry.npm.taobao.org -g</code> yarn config set sass_binary_site <code>http://cdn.npm.taobao.org/dist/node-sass -g</code></li></ol><h3 id="yarn的常用命令" tabindex="-1">yarn的常用命令： <a class="header-anchor" href="#yarn的常用命令" aria-hidden="true">#</a></h3><ul><li><p>安装yarn</p><ul><li><code>npm install -g yarn</code></li></ul></li><li><p>安装成功后，查看版本号：</p><ul><li><code>yarn --version</code></li></ul></li><li><p>创建文件夹 yarn</p><ul><li><code>md yarn</code></li></ul></li><li><p>进入yarn文件夹</p><ul><li><code>cd yarn</code></li></ul></li><li><p>初始化项目</p><ul><li><code>yarn init // 同npm init，执行输入信息后，会生成package.json文件</code></li></ul></li><li><p>yarn的配置项：</p><ul><li><code>yarn config list // 显示所有配置项</code></li><li><code>yarn config get &lt;key&gt; //显示某配置项</code></li><li><code>yarn config delete &lt;key&gt; //删除某配置项</code></li><li><code>yarn config set &lt;key&gt; &lt;value&gt; [-g|--global] //设置配置项</code></li></ul></li><li><p>安装包：</p><ul><li><code>yarn install //安装package.json里所有包，并将包及它的所有依赖项保存进yarn.lock</code></li><li><code>yarn install --flat //安装一个包的单一版本</code></li><li><code>yarn install --force //强制重新下载所有包</code></li><li><code>yarn install --production //只安装dependencies里的包</code></li><li><code>yarn install --no-lockfile //不读取或生成yarn.lock</code></li><li><code>yarn install --pure-lockfile //不生成yarn.lock</code></li></ul></li><li><p>添加包（会更新package.json和yarn.lock）：</p><ul><li><code>yarn add [package] // 在当前的项目中添加一个依赖包，会自动更新到package.json和yarn.lock文件中</code></li><li><code>yarn add [package]@[version] // 安装指定版本，这里指的是主要版本，如果需要精确到小版本，使用-E参数</code></li><li><code>yarn add [package]@[tag] // 安装某个tag（比如beta,next或者latest）</code></li></ul><p>//不指定依赖类型默认安装到dependencies里，你也可以指定依赖类型：</p><ul><li><code>yarn add --dev/-D // 加到 devDependencies</code></li><li><code>yarn add --peer/-P // 加到 peerDependencies</code></li><li><code>yarn add --optional/-O // 加到 optionalDependencies</code></li></ul><p>//默认安装包的主要版本里的最新版本，下面两个命令可以指定版本：</p><ul><li><code>yarn add --exact/-E // 安装包的精确版本。例如yarn add foo@1.2.3会接受1.9.1版，但是yarn add foo@1.2.3 --exact只会接受1.2.3版</code></li><li><code>yarn add --tilde/-T // 安装包的次要版本里的最新版。例如yarn add foo@1.2.3 --tilde会接受1.2.9，但不接受1.3.0</code></li></ul></li><li><p>发布包</p><ul><li><code>yarn publish</code></li></ul></li><li><p>移除一个包</p><ul><li><code>yarn remove &lt;packageName&gt;：移除一个包，会自动更新package.json和yarn.lock</code></li></ul></li><li><p>更新一个依赖</p><ul><li><code>yarn upgrade 用于更新包到基于规范范围的最新版本</code></li></ul></li><li><p>运行脚本</p><ul><li><code>yarn run 用来执行在 package.json 中 scripts 属性下定义的脚本</code></li></ul></li><li><p>显示某个包的信息</p><ul><li><code>yarn info &lt;packageName&gt; 可以用来查看某个模块的最新版本信息</code></li></ul></li><li><p>缓存</p><ul><li><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">yarn cache</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><ul><li><code>yarn cache list # 列出已缓存的每个包yarn cache dir # 返回 全局缓存位置yarn cache clean # 清除缓存</code></li></ul></li></ul></li></ul><h3 id="npm-与-yarn命令比较" tabindex="-1">npm 与 yarn命令比较: <a class="header-anchor" href="#npm-与-yarn命令比较" aria-hidden="true">#</a></h3><p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img/70.png" alt="这里写图片描述"></p><h3 id="npm-与-yarn相关问题比较" tabindex="-1">npm 与 yarn相关问题比较: <a class="header-anchor" href="#npm-与-yarn相关问题比较" aria-hidden="true">#</a></h3><h4 id="npm模块的依赖" tabindex="-1">npm模块的依赖: <a class="header-anchor" href="#npm模块的依赖" aria-hidden="true">#</a></h4><ul><li>npm存在一些历史遗留问题，请看下图： <img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img/70-165556988153689.png" alt="这里写图片描述"></li></ul><blockquote><p>比如说你的项目模块依赖是图中描述的，@1.2.1代表这个模块的版本。在你安装A的时候需要安装依赖C和D，很多依赖不会指定版本号，默认会安装最新的版本，这样就会出现问题：比如今天安装模块的时候C和D是某一个版本，而当以后C、D更新的时候，再次安装模块就会安装C和D的最新版本，如果新的版本无法兼容你的项目，你的程序可能就会出BUG，甚至无法运行。这就是npm的弊端，而yarn为了解决这个问题推出了yarn.lock的机制，这是作者项目中的yarn.lock文件。</p></blockquote><h6 id="yarn-lock文件格式" tabindex="-1">yarn.lock文件格式: <a class="header-anchor" href="#yarn-lock文件格式" aria-hidden="true">#</a></h6><p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img/70-165556988153690.png" alt="这里写图片描述"></p><blockquote><p>大家会看到，这个文件已经把依赖模块的版本号全部锁定，当你执行yarn install的时候，yarn会读取这个文件获得依赖的版本号，然后依照这个版本号去安装对应的依赖模块，这样依赖就会被锁定，以后再也不用担心版本号的问题了。其他人或者其他环境下使用的时候，把这个yarn.lock拷贝到相应的环境项目下再安装即可。 注意：这个文件不要手动修改它，当你使用一些操作如yarn add时，yarn会自动更新yarn.lock。</p></blockquote><ul><li>⭐️ yarn</li><li>✅ npx</li></ul>`,19),c=[r];function o(d,t,s,p,y,u){return e(),l("div",null,c)}const m=a(i,[["render",o]]);export{g as __pageData,m as default};
