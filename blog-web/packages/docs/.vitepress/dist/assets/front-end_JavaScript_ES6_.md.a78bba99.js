import{_ as s,c as a,o as n,a as l}from"./app.3f566b2e.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"front-end/JavaScript/ES6+.md"}'),e={name:"front-end/JavaScript/ES6+.md"},o=l(`<h4 id="es6" tabindex="-1">ES6 <a class="header-anchor" href="#es6" aria-hidden="true">#</a></h4><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210815005507.png" alt="ES6小尺寸"><h5 id="新的声明方式" tabindex="-1">新的声明方式 <a class="header-anchor" href="#新的声明方式" aria-hidden="true">#</a></h5><p><strong>var与let、const的区别</strong></p><blockquote><ul><li>不属于顶层对象window</li><li>不允许重复声明</li><li>不存在变量提升</li><li>暂时性死区</li><li>块级作用域</li></ul></blockquote><p><strong>1、使用var声明的变量，其作用域为全局或者该语句所在的函数内，且存在变量提升现象。</strong></p><p>下面使用node.js演示，也可以插入到html文件中使用以下代码</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">var a = 10;</span></span>
<span class="line"><span style="color:#A6ACCD;">function test() {</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(&quot;function获取的全局变量a&quot; + a);</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">test();</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(&quot;外部获取的全局变量&quot; + a);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>输出结果：</p><p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img2029744-20200517000029984-741262760-165358786755591.png" alt="img"></p><p>上述代码证明了var定义的全局变量可以在任何地方使用。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">for(var  i=0;i&lt;10;i++){</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(i);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>输出结果：</p><p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img2029744-20200910171121109-628898075-165358786755593.png" alt="img"></p><p>在for,while,switch等语句的括号中定义变量，也属于全局变量</p><p>for(var a=1){}</p><p>相当于</p><p>for(var a=1){</p><p>var a=1;</p><p>}</p><p>在这些语句的括号中定义变量相当于隐性在代码块内定义了该该变量</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">function test() {</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(&quot;function获取的b&quot; + b);</span></span>
<span class="line"><span style="color:#A6ACCD;">    var b = 20;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">test();</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(&quot;外部获取的全局变量&quot; + a);</span></span>
<span class="line"><span style="color:#A6ACCD;">var a = 10;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>输出结果：</p><p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img2029744-20200517000520415-2126887234.png" alt="img"></p><p>上述代码证明了var定义的变量会进行变量提升，也就是提前声明变量再赋值</p><p>console.log(a);</p><p>var a=10;</p><p>相当于：</p><p>var a;</p><p>consloe.log(a);</p><p>a=10;</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">function test() {</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(&quot;function获取的b&quot; + b);</span></span>
<span class="line"><span style="color:#A6ACCD;">    var b = 20;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">test();</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(b);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>输出结果：</p><p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img2029744-20200517000847567-1009211237-165358786755696.png" alt="img"></p><p>报错，证明，在函数定义的var变量在函数外无效，只能在函数内访问，也就是函数作用域</p><p>但是要注意的一点是：</p><p>for,while,switch等等语句var关键字定义的任何变量都属于全局变量，在任何地方都有效，不属于函数作用域</p><p><strong>2、let 、const不属于顶层对象window</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">var a = 1;</span></span>
<span class="line"><span style="color:#A6ACCD;">b = 2;</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(window.a);   //1</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(window.b);   //2</span></span>
<span class="line"><span style="color:#A6ACCD;">let c = 1;</span></span>
<span class="line"><span style="color:#A6ACCD;">const d = 1;</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(window.a);   //undefined</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(window.b);   //undefined</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><strong>3、使用let声明的变量，其作用域为该语句所在的代码块内，不存在变量提升。</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">let a = 10</span></span>
<span class="line"><span style="color:#A6ACCD;">function test() {</span></span>
<span class="line"><span style="color:#A6ACCD;">  let b = 20;</span></span>
<span class="line"><span style="color:#A6ACCD;">  console.log(&quot;function获取的b&quot; + b);</span></span>
<span class="line"><span style="color:#A6ACCD;">  console.log(&quot;let定义的全局函数“+a);</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">test();</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(b);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>输出结果：</p><p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img2029744-20200910165954294-1278487661-165358786755698.png" alt="img"></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">for(let i=0;i&lt;10;i++){</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(i);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>输出结果：</p><p>报错：Uncaught ReferenceError: i is not defined</p><p>除了在函数和代码块定义的let变量都属于全局变量，在任何地方都可以访问，但是，在函数和代码块（包括for语句，while,swith,if等等语句的代码块中，也就是{}包裹的代码中），定义的let变量只在代码块内有效，这个代码块其他任何地方都无法获取到，和以上var不一样，var只有函数作用域，记住函数作用域不等同于代码块作用域，代码块包括for,if,while等语句。</p><p>同时let定义的变量不支持变量提升。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">console.log(a);</span></span>
<span class="line"><span style="color:#A6ACCD;">let a = 10</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img2029744-20200517002047452-850993838-1653587867556100.png" alt="img"></p><p>直接报错，而不是undefined</p><p><strong>4、使用let、const关键字声明的变量具有暂时性死区特性</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;"> let num=10;</span></span>
<span class="line"><span style="color:#A6ACCD;">    if(true){</span></span>
<span class="line"><span style="color:#A6ACCD;">        console.log(num);//报错</span></span>
<span class="line"><span style="color:#A6ACCD;">        let num=11;</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>暂时性死区的意思是，只要块内有定义该变量，那么该块内就会和块内定义的变量绑定，不会再读取外面定义相同变量的值，</p><p>但是在块内语句执行后声明，就算，外面有该变量也不会读取，而是报错</p><p><strong>5、使用const声明的是常量，在后面出现的代码中不能再修改该常量的值，而且是块级作用域，作用范围和let一样</strong></p><p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img2029744-20200517002204887-478739156.png" alt="img"></p><h5 id="解构赋值" tabindex="-1">解构赋值 <a class="header-anchor" href="#解构赋值" aria-hidden="true">#</a></h5><blockquote><p>解构赋值是对赋值运算符的扩展。</p><p>他是一种针对数组或者对象进行模式匹配，然后对其中的变量进行赋值。</p><p>在代码书写上简洁且易读，语义更加清晰明了；也方便了复杂对象中数据字段获取。</p><p>可分为以下几种类型：</p><ul><li>数组解构</li><li>对象解构</li><li>字符串解构</li></ul></blockquote><h6 id="数组解构" tabindex="-1">数组解构 <a class="header-anchor" href="#数组解构" aria-hidden="true">#</a></h6><p>基本用法</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     let [a, b, c] = [1, 2, 3];</span></span>
<span class="line"><span style="color:#A6ACCD;">     // a = 1</span></span>
<span class="line"><span style="color:#A6ACCD;">     // b = 2</span></span>
<span class="line"><span style="color:#A6ACCD;">     // c = 3</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>可嵌套</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     let [a, [[b], c]] = [1, [[2], 3]];</span></span>
<span class="line"><span style="color:#A6ACCD;">     // a = 1</span></span>
<span class="line"><span style="color:#A6ACCD;">     // b = 2</span></span>
<span class="line"><span style="color:#A6ACCD;">     // c = 3</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>可忽略</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     let [a, , b] = [1, 2, 3];</span></span>
<span class="line"><span style="color:#A6ACCD;">     // a = 1</span></span>
<span class="line"><span style="color:#A6ACCD;">     // b = 3</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>不完全解构（a=1属于解构默认值，如果没有匹配到对用的值就使用默认值）</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">	let [a = 1, b] = []; // a = 1, b = undefined</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h6 id="对象解构" tabindex="-1"><strong>对象解构</strong> <a class="header-anchor" href="#对象解构" aria-hidden="true">#</a></h6><p>基本用法</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     let { foo, bar } = { foo: &#39;aaa&#39;, bar: &#39;bbb&#39; }; // foo = &#39;aaa&#39; // bar = &#39;bbb&#39;  </span></span>
<span class="line"><span style="color:#A6ACCD;">     //起别名</span></span>
<span class="line"><span style="color:#A6ACCD;">     let { baz : foo } = { baz : &#39;ddd&#39; }; // foo = &#39;ddd&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">     //在对象解构中是根据key来匹配的，顺序不影响解构</span></span>
<span class="line"><span style="color:#A6ACCD;">     let {age, name} = {name: &#39;webpon&#39;, age&#39;20&#39;}</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(age, name) // 20, webpon</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>可嵌套可忽略</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     let obj = {p: [&#39;hello&#39;, {y: &#39;world&#39;}] };</span></span>
<span class="line"><span style="color:#A6ACCD;">     let {p: [x, { y }] } = obj;</span></span>
<span class="line"><span style="color:#A6ACCD;">     // x = &#39;hello&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">     // y = &#39;world&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">     let obj = {p: [&#39;hello&#39;, {y: &#39;world&#39;}] };</span></span>
<span class="line"><span style="color:#A6ACCD;">     let {p: [x, {  }] } = obj;</span></span>
<span class="line"><span style="color:#A6ACCD;">     // x = &#39;hello&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>不完全解构</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     let obj = {p: [{y: &#39;world&#39;}] };</span></span>
<span class="line"><span style="color:#A6ACCD;">     let {p: [{ y }, x ] } = obj;</span></span>
<span class="line"><span style="color:#A6ACCD;">     // x = undefined</span></span>
<span class="line"><span style="color:#A6ACCD;">     // y = &#39;world&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>剩余运算符</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     let {a, b, ...rest} = {a: 10, b: 20, c: 30, d: 40};</span></span>
<span class="line"><span style="color:#A6ACCD;">     // a = 10</span></span>
<span class="line"><span style="color:#A6ACCD;">     // b = 20</span></span>
<span class="line"><span style="color:#A6ACCD;">     // rest = {c: 30, d: 40}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>解构默认值</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     let {a = 10, b = 5} = {a: 3};</span></span>
<span class="line"><span style="color:#A6ACCD;">     // a = 3; b = 5;</span></span>
<span class="line"><span style="color:#A6ACCD;">     let {a: aa = 10, b: bb = 5} = {a: 3};</span></span>
<span class="line"><span style="color:#A6ACCD;">     // aa = 3; bb = 5;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h6 id="字符串解构" tabindex="-1">字符串解构 <a class="header-anchor" href="#字符串解构" aria-hidden="true">#</a></h6><p>在数组的解构中，<em>解构的目标若为可遍历对象，皆可进行解构赋值</em>。可遍历对象即实现 Iterator 接口的数据。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     let [a, b, c, d, e] = &#39;hello&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">     // a = &#39;h&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">     // b = &#39;e&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">     // c = &#39;l&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">     // d = &#39;l&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">     // e = &#39;o&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><strong>解构默认值</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">	let [a = 2] = [undefined]; // a = 2</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>当解构模式有匹配结果，且匹配结果是 undefined 时，会触发默认值作为返回结果。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     let [a = 3, b = a] = [];     // a = 3, b = 3</span></span>
<span class="line"><span style="color:#A6ACCD;">     let [a = 3, b = a] = [1];    // a = 1, b = 1</span></span>
<span class="line"><span style="color:#A6ACCD;">     let [a = 3, b = a] = [1, 2]; // a = 1, b = 2</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><ul><li>a 与 b 匹配结果为 undefined ，触发默认值：<strong>a = 3; b = a =3</strong></li><li>a 正常解构赋值，匹配结果：a = 1，b 匹配结果 undefined ，触发默认值：<strong>b = a =1</strong></li><li>a 与 b 正常解构赋值，匹配结果：<strong>a = 1，b = 2</strong></li></ul><p>只要是可遍历对象即可使用数组解构</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     let [a,b] = new Set([1,2])</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(a,b);   //1 2</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h5 id="数组遍历-es6" tabindex="-1">数组遍历（ES6) <a class="header-anchor" href="#数组遍历-es6" aria-hidden="true">#</a></h5><blockquote><ul><li>find()：返回数组中满足提供的测试函数的第一个元素的值。否则返回 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined" target="_blank" rel="noreferrer"><code>undefined</code></a>。</li><li>findIndex()：返回数组中满足提供的测试函数的第一个元素的<strong>索引</strong>。若没有找到对应元素则返回-1。</li><li>for of</li><li>values()：返回一个新的 <strong><code>Array Iterator</code></strong> 对象，该对象包含数组每个索引的值</li><li>keys()：返回一个包含数组中每个索引键的<code>**Array Iterator**</code>对象。</li><li>entries()：返回一个新的<strong>Array Iterator</strong>对象，该对象包含数组中每个索引的键/值对。</li></ul></blockquote><p>具体用法请访问：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array</a></p><h5 id="数组的扩展-es6" tabindex="-1">数组的扩展（ES6) <a class="header-anchor" href="#数组的扩展-es6" aria-hidden="true">#</a></h5><blockquote><ul><li>类数组 / 伪数组</li><li>Array.from()：从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。</li><li>Array.of()：创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型。</li><li>copyWithin()：浅复制数组的一部分到同一数组中的另一个位置，并返回它，不会改变原数组的长度。</li><li>fill()：用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。不包括终止索引。</li><li>includes(): 用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回</li></ul></blockquote><h5 id="剩余参数" tabindex="-1">剩余参数 <a class="header-anchor" href="#剩余参数" aria-hidden="true">#</a></h5><p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210505215753.png" alt="image-20201022182220697"></p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210505215756.png" alt="image-20201022182452793" style="zoom:80%;"><h5 id="拓展运算符-重要" tabindex="-1">拓展运算符（重要） <a class="header-anchor" href="#拓展运算符-重要" aria-hidden="true">#</a></h5><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210505215800.png" alt="image-20201022182748232" style="zoom:80%;"><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210505215803.png" alt="image-20201022183003525" style="zoom:80%;"><p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210505215808.png" alt="image-20201022183141205"></p><p>array.push方法可以一次性插入多个以逗号分割的参数</p><p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210505215845.png" alt="image-20201022183302460"></p><p>拓展运算符也可以合并对象</p><p>基本用法：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     let age = {age: 15};</span></span>
<span class="line"><span style="color:#A6ACCD;">     let name = {name: &quot;Amy&quot;};</span></span>
<span class="line"><span style="color:#A6ACCD;">     let person = {...age, ...name};</span></span>
<span class="line"><span style="color:#A6ACCD;">     person;  //{age: 15, name: &quot;Amy&quot;}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><strong>注意点</strong></p><p><code>自定义的属性和拓展运算符对象里面属性的相同的时候：自定义的属性在拓展运算符后面，则拓展运算符对象内部同名的属性将被覆盖掉。</code></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     let person = {name: &quot;Amy&quot;, age: 15};</span></span>
<span class="line"><span style="color:#A6ACCD;">     let someone = { ...person, name: &quot;Mike&quot;, age: 17};</span></span>
<span class="line"><span style="color:#A6ACCD;">     someone;  //{name: &quot;Mike&quot;, age: 17}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h5 id="模板字符串" tabindex="-1">模板字符串 <a class="header-anchor" href="#模板字符串" aria-hidden="true">#</a></h5><p>1、模板字符串中可以<code>解析变量</code>。</p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210505221453.png" alt="image-20201022162955617" style="zoom:80%;"><p>在\${}中可以使用变量，可以解析变量</p><p>2、模板字符串中可以<code>换行</code></p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210505221457.png" alt="image-20201022163123225" style="zoom:80%;"><p>3、在模板字符串中可以<code>调用函数</code></p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210505220011.png" alt="image-20201022163255951" style="zoom:80%;"><p>调用函数的位置的值是函数的返回值</p><h5 id="string的扩展方法" tabindex="-1">String的扩展方法 <a class="header-anchor" href="#string的扩展方法" aria-hidden="true">#</a></h5><h6 id="实例方法-startwith-和endswidth" tabindex="-1"><strong>实例方法：startWith()和endsWidth()</strong> <a class="header-anchor" href="#实例方法-startwith-和endswidth" aria-hidden="true">#</a></h6><ul><li><p>startsWidth():表示参数字符串是否在原字符串的头部，返回布尔值</p></li><li><p>endsWidth():表示参数字符串是否在原字符串的尾部，返回布尔值</p><p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210505220014.png" alt="image-20201022163956969"></p></li></ul><p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210505220019.png" alt="image-20201022164120613"></p><p>输出结果：</p><p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210505220022.png" alt="image-20201022164140769"></p><p><strong>实例方法：repeat()</strong></p><p>repeat方法表示将原字符串重复n次，返回一个新字符串</p><p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210505220027.png" alt="image-20201022164351724"></p><h6 id="string-prototype-trim" tabindex="-1">String.prototype.trim() <a class="header-anchor" href="#string-prototype-trim" aria-hidden="true">#</a></h6><blockquote><p><strong><code>trim()</code></strong> 方法会从一个字符串的两端删除空白字符。在这个上下文中的空白字符是所有的空白字符 (space, tab, no-break space 等) 以及所有行终止符字符（如 LF，CR等）。</p></blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#%E8%AF%AD%E6%B3%95" target="_blank" rel="noreferrer">语法</a></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">str.trim()</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#%E8%BF%94%E5%9B%9E%E5%80%BC" target="_blank" rel="noreferrer">返回值</a></p><p>一个代表调用字符串两端去掉空白的新字符串。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#%E6%8F%8F%E8%BF%B0" target="_blank" rel="noreferrer">描述</a></p><p><code>trim()</code> 方法返回一个从两头去掉空白字符的字符串，并不影响原字符串本身。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#%E4%BE%8B%E5%AD%90" target="_blank" rel="noreferrer">例子</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#%E4%BD%BF%E7%94%A8_trim" target="_blank" rel="noreferrer">使用 <code>trim()</code></a></p><p>下面的例子中将显示小写的字符串 &#39;foo&#39;:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">var orig = &#39;   foo  &#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(orig.trim()); // &#39;foo&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// 另一个 .trim() 例子，只从一边删除</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">var orig = &#39;foo    &#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(orig.trim()); // &#39;foo&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h5 id="symbol" tabindex="-1">Symbol <a class="header-anchor" href="#symbol" aria-hidden="true">#</a></h5><blockquote><p><strong>symbol</strong> 是一种基本数据类型 （<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Primitive" target="_blank" rel="noreferrer">primitive data type</a>）。<code>Symbol()</code>函数会返回<strong>symbol</strong>类型的值，该类型具有静态属性和静态方法。它的静态属性会暴露几个内建的成员对象；它的静态方法会暴露全局的symbol注册，且类似于内建对象类，但作为构造函数来说它并不完整，因为它不支持语法：&quot;<code>new Symbol()</code>&quot;。</p><p>每个从<code>Symbol()</code>返回的symbol值都是唯一的。一个symbol值能作为对象属性的标识符；这是该数据类型仅有的目的。</p></blockquote><p>使用场景一(唯一的键值):</p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210815165837.png" alt="image-20210815165836179" style="zoom:67%;"><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210815165851.png" alt="image-20210815165850056" style="zoom:80%;"><p>使用场景二(隐藏实例属性):</p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210815170208.png" alt="image-20210815170207232" style="zoom:67%;"><p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210815170320.png" alt="image-20210815170319942"></p><p>使用场景三(常用):</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">const shapeType = {</span></span>
<span class="line"><span style="color:#A6ACCD;">	a: Symbol(),</span></span>
<span class="line"><span style="color:#A6ACCD;">	b: Symbol()</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">function get(shape) {</span></span>
<span class="line"><span style="color:#A6ACCD;">	let area = 0</span></span>
<span class="line"><span style="color:#A6ACCD;">	switch(shape) {</span></span>
<span class="line"><span style="color:#A6ACCD;">		case shapeType.a:</span></span>
<span class="line"><span style="color:#A6ACCD;">			area = 1</span></span>
<span class="line"><span style="color:#A6ACCD;">			break;</span></span>
<span class="line"><span style="color:#A6ACCD;">		case shapeType.b:</span></span>
<span class="line"><span style="color:#A6ACCD;">			area = 2</span></span>
<span class="line"><span style="color:#A6ACCD;">			break;	</span></span>
<span class="line"><span style="color:#A6ACCD;">		default: </span></span>
<span class="line"><span style="color:#A6ACCD;">			area = 3</span></span>
<span class="line"><span style="color:#A6ACCD;">	}</span></span>
<span class="line"><span style="color:#A6ACCD;">	return area</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">get(shape.a)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>详情请访问:<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol</a></p><h5 id="set集合" tabindex="-1">Set集合 <a class="header-anchor" href="#set集合" aria-hidden="true">#</a></h5><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210505220031.png" alt="image-20201107225916736" style="zoom:67%;"><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210505220034.png" alt="image-20201107230324495" style="zoom:67%;"><p>Set本身是一个构造函数，用来生成Set数据结构，可以使用for...of进行遍历</p><p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210505220039.png" alt="image-20201022164650960"></p><p>Set函数可以接受一个数组作为参数，用来初始化。</p><p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210505220043.png" alt="image-20201022164718108"></p><p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210505220051.png" alt="image-20201022164800109"></p><p>输出结果：</p><p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210505220058.png" alt="image-20201022164822446"></p><p><strong>数组去重</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      var a = [1, 2, 3, 2, 1, 232, 11, 1]</span></span>
<span class="line"><span style="color:#A6ACCD;">      var s1 = new Set(a)</span></span>
<span class="line"><span style="color:#A6ACCD;">      console.log(s1)</span></span>
<span class="line"><span style="color:#A6ACCD;">      a = [...s1]</span></span>
<span class="line"><span style="color:#A6ACCD;">      console.log(a)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>输出结果：</p><p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210505220105.png" alt="image-20201022180626354"></p><p>...s1这个括号运算符可以把数组,set数据结构通过分隔符，分割，详情请浏览<code>ES6-&gt;Array的扩展方法</code></p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210505220110.png" alt="image-20201022181447419" style="zoom:80%;"><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210505220118.png" alt="image-20201022181854465" style="zoom:80%;"><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210505220123.png" alt="image-20201107231146591" style="zoom:67%;"><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210505220128.png" alt="image-20201107231429686" style="zoom:67%;"><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210505220130.png" alt="image-20201107231429686" style="zoom:67%;"><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210505220133.png" alt="image-20201107231528895" style="zoom:67%;"><h5 id="map字典" tabindex="-1">Map字典 <a class="header-anchor" href="#map字典" aria-hidden="true">#</a></h5><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210505220136.png" alt="image-20201107231752402" style="zoom:67%;"><p><strong>Map 和 Object 的区别</strong></p><ul><li><p>一个 Object 的键只能是字符串或者 Symbol，但一个 Map 的键可以是任意值。</p></li><li><p>Map 中的键值是有序的（FIFO 原则），而添加到对象中的键则不是。</p></li><li><p>Map 的键值对个数可以从 size 属性获取，而 Object 的键值对个数只能手动计算。</p></li><li><p>Object 都有自己的原型，原型链上的键名有可能和你自己在对象上的设置的键名产生冲突。</p><p>当Map 中的 key</p><p><strong>key 是字符串</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">var myMap = new Map();</span></span>
<span class="line"><span style="color:#A6ACCD;">var keyString = &quot;a string&quot;; </span></span>
<span class="line"><span style="color:#A6ACCD;">myMap.set(keyString, &quot;和键&#39;a string&#39;关联的值&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">myMap.get(keyString);    // &quot;和键&#39;a string&#39;关联的值&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">myMap.get(&quot;a string&quot;);   // &quot;和键&#39;a string&#39;关联的值&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">                         // 因为 keyString === &#39;a string&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><strong>当key 是对象</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">var myMap = new Map();</span></span>
<span class="line"><span style="color:#A6ACCD;">var keyObj = {}, </span></span>
<span class="line"><span style="color:#A6ACCD;">myMap.set(keyObj, &quot;和键 keyObj 关联的值&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">myMap.get(keyObj); // &quot;和键 keyObj 关联的值&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">myMap.get({}); // undefined, 因为 keyObj !== {}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>当<strong>key 是函数</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">var myMap = new Map();</span></span>
<span class="line"><span style="color:#A6ACCD;">var keyFunc = function () {}, // 函数</span></span>
<span class="line"><span style="color:#A6ACCD;">myMap.set(keyFunc, &quot;和键 keyFunc 关联的值&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">myMap.get(keyFunc); // &quot;和键 keyFunc 关联的值&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">myMap.get(function() {}) // undefined, 因为 keyFunc !== function () {}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>当<strong>key 是 NaN</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">var myMap = new Map();</span></span>
<span class="line"><span style="color:#A6ACCD;">myMap.set(NaN, &quot;not a number&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">myMap.get(NaN); // &quot;not a number&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">var otherNaN = Number(&quot;foo&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">myMap.get(otherNaN); // &quot;not a number&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>虽然 NaN 和任何值甚至和自己都不相等(NaN !== NaN 返回true)，NaN作为Map的键来说是没有区别的。</p></li></ul><h5 id="proxy-代理" tabindex="-1">Proxy(代理) <a class="header-anchor" href="#proxy-代理" aria-hidden="true">#</a></h5><blockquote><p><strong>Proxy</strong> 也就是代理，可以帮助我们完成很多事情，例如对数据的处理，对构造函数的处理，对数据的验证，说白了，就是在我们访问对象前添加了一层拦截，可以过滤很多操作，而这些过滤，由你来定义。</p></blockquote><p><strong>语法：</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">	  let p = new Proxy(target, handler);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><ol><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/get#%E5%8F%82%E6%95%B0" target="_blank" rel="noreferrer">参数</a></p><p>以下是传递给get方法的参数，<code>this上下文绑定在</code>handler对象上.</p><ul><li><p><code>target</code></p><p>目标对象。</p></li><li><p><code>property</code></p><p>被获取的属性名。</p></li><li><p><code>receiver</code></p><p>Proxy或者继承Proxy的对象</p></li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/get#%E8%BF%94%E5%9B%9E%E5%80%BC" target="_blank" rel="noreferrer">返回值</a></p><p>get方法可以返回任何值。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/get#%E6%8F%8F%E8%BF%B0" target="_blank" rel="noreferrer">描述</a></p><p><strong><code>handler.get</code></strong> 方法用于拦截对象的读取属性操作。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/get#%E6%8B%A6%E6%88%AA" target="_blank" rel="noreferrer">拦截</a></p><p>该方法会拦截目标对象的以下操作:</p><ul><li>访问属性: <code>proxy[foo]和</code> <code>proxy.bar</code></li><li>访问原型链上的属性: <code>Object.create(proxy)[foo]</code></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/get" target="_blank" rel="noreferrer"><code>Reflect.get()</code></a></li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/get#%E7%BA%A6%E6%9D%9F" target="_blank" rel="noreferrer">约束</a></p><p>如果违背了以下的约束，proxy会抛出 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError" target="_blank" rel="noreferrer"><code>TypeError</code></a>:</p><ul><li>如果要访问的目标属性是不可写以及不可配置的，则返回的值必须与该目标属性的值相同。</li><li>如果要访问的目标属性没有配置访问方法，即get方法是undefined的，则返回值必须为undefined。</li></ul></li></ol><h6 id="handler-get" tabindex="-1">handler.get() <a class="header-anchor" href="#handler-get" aria-hidden="true">#</a></h6><p>下面是使用示例，一个简单的代理</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">       const obj = {</span></span>
<span class="line"><span style="color:#A6ACCD;">          name: &#39;admin&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">        const proxy = new Proxy(obj,</span></span>
<span class="line"><span style="color:#A6ACCD;">          {</span></span>
<span class="line"><span style="color:#A6ACCD;">            get(target, key) {</span></span>
<span class="line"><span style="color:#A6ACCD;">              console.log(&#39;获取了getter属性&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;">              return target[key] + &#39; proxy处理了&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">            }</span></span>
<span class="line"><span style="color:#A6ACCD;">          }</span></span>
<span class="line"><span style="color:#A6ACCD;">        )</span></span>
<span class="line"><span style="color:#A6ACCD;">        proxy.age = 18</span></span>
<span class="line"><span style="color:#A6ACCD;">        obj.test = &#39;测试&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">        console.log(obj);</span></span>
<span class="line"><span style="color:#A6ACCD;">        console.log(obj.name);</span></span>
<span class="line"><span style="color:#A6ACCD;">        console.log(proxy);</span></span>
<span class="line"><span style="color:#A6ACCD;">        console.log(proxy.name);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>输出结果：</p><p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210815210814.png" alt="image-20210815210813394"></p><p>可以看出obj被Proxy代理后，两个实例的内容是一致的，修改任意一个都会影响另一个，由此可知，两个实例的值引用的是一个地址, 但是修改target参数并不会改变实例的值，代理后并不会改变原有实例的值和方法</p><p>并且，我们在访问Proxy代理实例会触发get钩子，target是obj实例，key是访问的字段，get钩子返回值是就是访问的值</p><p>再来看一个基本用法：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">  let test = {</span></span>
<span class="line"><span style="color:#A6ACCD;">    name: &quot;小红&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  };</span></span>
<span class="line"><span style="color:#A6ACCD;">  test = new Proxy(test, {</span></span>
<span class="line"><span style="color:#A6ACCD;">    get(target, key) {</span></span>
<span class="line"><span style="color:#A6ACCD;">      console.log(&#39;获取了getter属性&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;">      return target[key];</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">  });</span></span>
<span class="line"><span style="color:#A6ACCD;">  console.log(test.name);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/imgwebp-165358786750724.webp" alt="img"></p><h6 id="handler-set" tabindex="-1">handler.set() <a class="header-anchor" href="#handler-set" aria-hidden="true">#</a></h6><blockquote><p><code>handler.set()</code> 方法是设置属性值操作的捕获器。</p></blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/set#%E8%AF%AD%E6%B3%95" target="_blank" rel="noreferrer">语法</a></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">const p = new Proxy(target, {</span></span>
<span class="line"><span style="color:#A6ACCD;">  set: function(target, property, value, receiver) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">});</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/set#%E5%8F%82%E6%95%B0" target="_blank" rel="noreferrer">参数</a></p><p>以下是传递给 <code>set()</code> 方法的参数。<code>this</code> 绑定在 handler 对象上。</p><ul><li><p><code>target</code></p><p>目标对象。</p></li><li><p><code>property</code></p><p>将被设置的属性名或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol" target="_blank" rel="noreferrer"><code>Symbol</code></a>。</p></li><li><p><code>value</code></p><p>新属性值。</p></li><li><p><code>receiver</code></p><p>最初被调用的对象。通常是 proxy 本身，但 handler 的 set 方法也有可能在原型链上，或以其他方式被间接地调用（因此不一定是 proxy 本身）。**比如：**假设有一段代码执行 <code>obj.name = &quot;jen&quot;</code>， <code>obj</code> 不是一个 proxy，且自身不含 <code>name</code> 属性，但是它的原型链上有一个 proxy，那么，那个 proxy 的 <code>set()</code> 处理器会被调用，而此时，<code>obj</code> 会作为 receiver 参数传进来。</p></li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/set#%E8%BF%94%E5%9B%9E%E5%80%BC" target="_blank" rel="noreferrer">返回值</a></p><p><code>set()</code> 方法应当返回一个布尔值。</p><ul><li>返回 <code>true</code> 代表属性设置成功。</li><li>在严格模式下，如果 <code>set()</code> 方法返回 <code>false</code>，那么会抛出一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError" target="_blank" rel="noreferrer"><code>TypeError</code></a> 异常。</li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/set#%E6%8F%8F%E8%BF%B0" target="_blank" rel="noreferrer">描述</a></p><p><code>handler.set()</code> 方法用于拦截设置属性值的操作。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/set#%E6%8B%A6%E6%88%AA" target="_blank" rel="noreferrer">拦截</a></p><p>该方法会拦截目标对象的以下操作:</p><ul><li>指定属性值：<code>proxy[foo] = bar</code> 和 <code>proxy.foo = bar</code></li><li>指定继承者的属性值：<code>Object.create(proxy)[foo] = bar</code></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/set" target="_blank" rel="noreferrer"><code>Reflect.set()</code></a></li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/set#%E7%BA%A6%E6%9D%9F" target="_blank" rel="noreferrer">约束</a></p><p>如果违背以下的约束条件，proxy 会抛出一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError" target="_blank" rel="noreferrer"><code>TypeError</code></a> 异常：</p><ul><li>若目标属性是一个不可写及不可配置的数据属性，则不能改变它的值。</li><li>如果目标属性没有配置存储方法，即 <code>[[Set]]</code> 属性的是 <code>undefined</code>，则不能设置它的值。</li><li>在严格模式下，如果 <code>set()</code> 方法返回 <code>false</code>，那么也会抛出一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError" target="_blank" rel="noreferrer"><code>TypeError</code></a> 异常。</li></ul><p>上方的案例，我们首先创建了一个<strong>test</strong>对象，里面有<strong>name</strong>属性，然后我们使用<code>Proxy</code>将其包装起来，再返回给<strong>test</strong>，此时的<strong>test</strong>已经成为了一个<code>Proxy</code>实例，我们对其的操作，都会被<code>Proxy</code>拦截。 <code>Proxy</code>有两个参数，第一个是<code>target</code>,也就是我们传入的**test对象,另一个则是<code>handler</code>，也就是我们传入的第二个参数，一个匿名对象。在<code>handler</code>中定义了一个名叫<code>get</code>的函数，当我们获取 **test的属性时，则会触发此函数。 咱们再来试试使用<code>set</code>来拦截一些操作，并将<code>get</code>返回值</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">  let xiaohong = {</span></span>
<span class="line"><span style="color:#A6ACCD;">    name: &quot;小红&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    age: 15</span></span>
<span class="line"><span style="color:#A6ACCD;">  };</span></span>
<span class="line"><span style="color:#A6ACCD;">  xiaohong = new Proxy(xiaohong, {</span></span>
<span class="line"><span style="color:#A6ACCD;">    get(target, key) {</span></span>
<span class="line"><span style="color:#A6ACCD;">      let result = target[key];</span></span>
<span class="line"><span style="color:#A6ACCD;">      //如果是获取 年龄 属性，则添加 岁字</span></span>
<span class="line"><span style="color:#A6ACCD;">      if (key === &quot;age&quot;) result += &quot;岁&quot;;</span></span>
<span class="line"><span style="color:#A6ACCD;">      return result;</span></span>
<span class="line"><span style="color:#A6ACCD;">    },</span></span>
<span class="line"><span style="color:#A6ACCD;">    set(target, key, value) {</span></span>
<span class="line"><span style="color:#A6ACCD;">      if (key === &quot;age&quot; &amp;&amp; typeof value !== &quot;number&quot;) {</span></span>
<span class="line"><span style="color:#A6ACCD;">        throw Error(&quot;age字段必须为Number类型&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">      }</span></span>
<span class="line"><span style="color:#A6ACCD;">      return Reflect.set(target, key, value);</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">  });</span></span>
<span class="line"><span style="color:#A6ACCD;">  console.log(\`我叫\${xiaohong.name}  我今年\${xiaohong.age}了\`);</span></span>
<span class="line"><span style="color:#A6ACCD;">  xiaohong.age = &quot;aa&quot;;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><img src="https:////upload-images.jianshu.io/upload_images/18597164-175a2ba2468ae476.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/770/format/webp" alt="img"></p><p>上方案例中定义了 <strong>xiaohong</strong> 对象，其中有 <strong>age</strong> 和 <strong>name</strong> 两个字段,我们在<code>Proxy</code>中的 <strong>get</strong> 拦截函数中添加了一个判断，如果是取 <strong>age</strong> 属性的值，则在后面添加 <strong>岁</strong>。在 <strong>set</strong> 拦截函数中判断了如果是更改 <strong>age</strong> 属性时，类型不是 <code>Number</code>则抛出错误。最后,正确的输出了我们想要的结果! 关于<code>return Reflect.set(target, key, value);</code> 这句代码，可以用其他方式替换，例如 :</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> xiaohong </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">小红</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">15</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">  xiaohong </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Proxy</span><span style="color:#A6ACCD;">(xiaohong</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">get</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">target</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">key</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">target</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">//如果是获取 年龄 属性，则添加 岁字</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">age</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">) </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">岁</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">set</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">target</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">age</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">number</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">throw</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Error</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">age字段必须为Number类型</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">target</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// return Reflect.set(target, key, value);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">我叫</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">xiaohong</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">  我今年</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">xiaohong</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">age</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">了</span><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  xiaohong</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">age </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">12</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p><img src="https:////upload-images.jianshu.io/upload_images/18597164-8513dac84c1f9191.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/631/format/webp" alt="img"></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">let arr = []</span></span>
<span class="line"><span style="color:#A6ACCD;">arr = new Proxy(arr, {</span></span>
<span class="line"><span style="color:#A6ACCD;">	set(target, prop, val) {</span></span>
<span class="line"><span style="color:#A6ACCD;">		if(typeof val === val) {</span></span>
<span class="line"><span style="color:#A6ACCD;">			target[prop] = val</span></span>
<span class="line"><span style="color:#A6ACCD;">			return true</span></span>
<span class="line"><span style="color:#A6ACCD;">		} else {</span></span>
<span class="line"><span style="color:#A6ACCD;">			return false</span></span>
<span class="line"><span style="color:#A6ACCD;">		}</span></span>
<span class="line"><span style="color:#A6ACCD;">	}</span></span>
<span class="line"><span style="color:#A6ACCD;">})</span></span>
<span class="line"><span style="color:#A6ACCD;">arr.push(5)</span></span>
<span class="line"><span style="color:#A6ACCD;">arr.push(6)</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(arr[0, arr[1]], arr.length)   //5 6 2</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>此时会抛出一个错误，因为<code>set</code>函数必须返回一个<code>boolean</code>值，只有返回值为<code>true</code>时才表示修改成功，我们没有手动<code>return</code>，函数会自动返回<code>undefined</code>,<code>undefined != true</code>,所以报错是正常的，只需要手动在最后添加一句 <code>return true</code>即可！ 但是，既然JS为我们提供了 <code>Reflect</code> ，那我们肯定是使用它啦，毕竟它和<code>Proxy</code>本来就是一起玩的,<code>Proxy</code>有的函数它都有！具体的参考 <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FReflect" target="_blank" rel="noreferrer">官方链接</a> 这只是最基础的应用，其他的大家可以自行摸索，都是一样的用法！</p><h6 id="handler-has" tabindex="-1">handler.has() <a class="header-anchor" href="#handler-has" aria-hidden="true">#</a></h6><blockquote><p><strong><code>handler.has()</code></strong> 方法是针对 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/in" target="_blank" rel="noreferrer"><code>in</code></a> 操作符的代理方法。</p></blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/ownKeys#%E8%AF%AD%E6%B3%95" target="_blank" rel="noreferrer">语法</a></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">var p = new Proxy(target, {</span></span>
<span class="line"><span style="color:#A6ACCD;">  ownKeys: function(target) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">});</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Copy to Clipboard</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/ownKeys#%E5%8F%82%E6%95%B0" target="_blank" rel="noreferrer">参数</a></p><p>下面的参数被传递给<code>ownKeys。this</code>被绑定在<code>handler上。</code></p><ul><li><p><code>target</code></p><p>目标对象.</p></li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/ownKeys#%E8%BF%94%E5%9B%9E%E5%80%BC" target="_blank" rel="noreferrer">返回值</a></p><p><code>ownKeys</code> 方法必须返回一个可枚举对象.</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/ownKeys#%E6%8F%8F%E8%BF%B0" target="_blank" rel="noreferrer">描述</a></p><p><code>**handler.ownKeys()**</code> 方法用于拦截 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys" target="_blank" rel="noreferrer"><code>Reflect.ownKeys()</code></a>.</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/ownKeys#%E6%8B%A6%E6%88%AA" target="_blank" rel="noreferrer">拦截</a></p><p>该拦截器可以拦截以下操作::</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames" target="_blank" rel="noreferrer"><code>Object.getOwnPropertyNames()</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols" target="_blank" rel="noreferrer"><code>Object.getOwnPropertySymbols()</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys" target="_blank" rel="noreferrer"><code>Object.keys()</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys" target="_blank" rel="noreferrer"><code>Reflect.ownKeys()</code></a></li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/ownKeys#%E7%BA%A6%E6%9D%9F" target="_blank" rel="noreferrer">约束</a></p><p>如果违反了下面的约束，proxy将抛出错误 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError" target="_blank" rel="noreferrer"><code>TypeError</code></a>:</p><ul><li><code>ownKeys</code> 的结果必须是一个数组.</li><li>数组的元素类型要么是一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String" target="_blank" rel="noreferrer"><code>String</code></a> ，要么是一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol" target="_blank" rel="noreferrer"><code>Symbol</code></a>.</li><li>结果列表必须包含目标对象的所有不可配置（non-configurable ）、自有（own）属性的key.</li><li>如果目标对象不可扩展，那么结果列表必须包含目标对象的所有自有（own）属性的key，不能有其它值.</li></ul><p><strong>基础使用：</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">const monster1 = {</span></span>
<span class="line"><span style="color:#A6ACCD;">  _age: 111,</span></span>
<span class="line"><span style="color:#A6ACCD;">  [Symbol(&#39;secret&#39;)]: &#39;I am scared!&#39;,</span></span>
<span class="line"><span style="color:#A6ACCD;">  eyeCount: 4</span></span>
<span class="line"><span style="color:#A6ACCD;">};</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">const handler1 = {</span></span>
<span class="line"><span style="color:#A6ACCD;">  ownKeys(target) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    return Reflect.ownKeys(target);</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">};</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">const proxy1 = new Proxy(monster1, handler1);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">for (const key of Object.keys(proxy1)) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  console.log(key);</span></span>
<span class="line"><span style="color:#A6ACCD;">  // expected output: &quot;_age&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  // expected output: &quot;eyeCount&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h6 id="handler-ownkeys" tabindex="-1">handler.OwnKeys <a class="header-anchor" href="#handler-ownkeys" aria-hidden="true">#</a></h6><blockquote><p><strong><code>handler.ownKeys()</code></strong> 方法用于拦截 Reflect.ownKeys()，Object.keys(),Object.getOwnPropertyNames(),Object.getOwnPropertySymbols()</p></blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/ownKeys#%E8%AF%AD%E6%B3%95" target="_blank" rel="noreferrer">语法</a></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">var p = new Proxy(target, {</span></span>
<span class="line"><span style="color:#A6ACCD;">  ownKeys: function(target) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">});</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/ownKeys#%E5%8F%82%E6%95%B0" target="_blank" rel="noreferrer">参数</a></p><p>下面的参数被传递给<code>ownKeys。this</code>被绑定在<code>handler上。</code></p><ul><li><p><code>target</code></p><p>目标对象.</p></li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/ownKeys#%E8%BF%94%E5%9B%9E%E5%80%BC" target="_blank" rel="noreferrer">返回值</a></p><p><code>ownKeys</code> 方法必须返回一个可枚举对象.</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/ownKeys#%E6%8F%8F%E8%BF%B0" target="_blank" rel="noreferrer">描述</a></p><p><code>**handler.ownKeys()**</code> 方法用于拦截 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys" target="_blank" rel="noreferrer"><code>Reflect.ownKeys()</code></a>.</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/ownKeys#%E6%8B%A6%E6%88%AA" target="_blank" rel="noreferrer">拦截</a></p><p>该拦截器可以拦截以下操作::</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames" target="_blank" rel="noreferrer"><code>Object.getOwnPropertyNames()</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols" target="_blank" rel="noreferrer"><code>Object.getOwnPropertySymbols()</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys" target="_blank" rel="noreferrer"><code>Object.keys()</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys" target="_blank" rel="noreferrer"><code>Reflect.ownKeys()</code></a></li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/ownKeys#%E7%BA%A6%E6%9D%9F" target="_blank" rel="noreferrer">约束</a></p><p>如果违反了下面的约束，proxy将抛出错误 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError" target="_blank" rel="noreferrer"><code>TypeError</code></a>:</p><ul><li><code>ownKeys</code> 的结果必须是一个数组.</li><li>数组的元素类型要么是一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String" target="_blank" rel="noreferrer"><code>String</code></a> ，要么是一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol" target="_blank" rel="noreferrer"><code>Symbol</code></a>.</li><li>结果列表必须包含目标对象的所有不可配置（non-configurable ）、自有（own）属性的key.</li><li>如果目标对象不可扩展，那么结果列表必须包含目标对象的所有自有（own）属性的key，不能有其它值.</li></ul><h6 id="handler-deleteproperty" tabindex="-1">handler.deleteProperty <a class="header-anchor" href="#handler-deleteproperty" aria-hidden="true">#</a></h6><blockquote><p><strong><code>handler.deleteProperty()</code></strong> 方法用于拦截对对象属性的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/delete" target="_blank" rel="noreferrer"><code>delete</code></a> 操作。</p></blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/deleteProperty#%E8%AF%AD%E6%B3%95" target="_blank" rel="noreferrer">语法</a></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">var p = new Proxy(target, {</span></span>
<span class="line"><span style="color:#A6ACCD;">  deleteProperty: function(target, property) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">});</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Copy to Clipboard</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/deleteProperty#%E5%8F%82%E6%95%B0" target="_blank" rel="noreferrer">参数</a></p><p><code>deleteProperty</code> 方法将会接受以下参数。 <code>this</code> 被绑定在 handler上。</p><ul><li><p><code>target</code></p><p>目标对象。</p></li><li><p><code>property</code></p><p>待删除的属性名。</p></li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/deleteProperty#%E8%BF%94%E5%9B%9E%E5%80%BC" target="_blank" rel="noreferrer">返回值</a></p><p><code>deleteProperty</code> 必须返回一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean" target="_blank" rel="noreferrer"><code>Boolean</code></a> 类型的值，表示了该属性是否被成功删除。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/deleteProperty#%E6%8F%8F%E8%BF%B0" target="_blank" rel="noreferrer">描述</a></p><p><code>**handler.deleteProperty()**</code> 方法可以拦截 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/delete" target="_blank" rel="noreferrer"><code>delete</code></a> 操作。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/deleteProperty#%E6%8B%A6%E6%88%AA" target="_blank" rel="noreferrer">拦截</a></p><p>该方法会拦截以下操作:</p><ul><li>删除属性: <code>delete proxy[foo]</code> 和 <code>delete proxy.foo</code></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/deleteProperty" target="_blank" rel="noreferrer"><code>Reflect.deleteProperty()</code></a></li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/deleteProperty#%E4%B8%8D%E5%8F%98%E9%87%8F" target="_blank" rel="noreferrer">不变量</a></p><p>如果违背了以下不变量，proxy 将会抛出一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError" target="_blank" rel="noreferrer"><code>TypeError</code></a>:</p><ul><li>如果目标对象的属性是不可配置的，那么该属性不能被删除。</li></ul><p>基本用法：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;"> const monster1 = {</span></span>
<span class="line"><span style="color:#A6ACCD;">      _age: 111,</span></span>
<span class="line"><span style="color:#A6ACCD;">      eyeCount: 4</span></span>
<span class="line"><span style="color:#A6ACCD;">    };</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">    const handler1 = {</span></span>
<span class="line"><span style="color:#A6ACCD;">      //获取键值拦截钩子</span></span>
<span class="line"><span style="color:#A6ACCD;">      ownKeys(target) {</span></span>
<span class="line"><span style="color:#A6ACCD;">        for (let i in target) {</span></span>
<span class="line"><span style="color:#A6ACCD;">          //隐藏私有属性</span></span>
<span class="line"><span style="color:#A6ACCD;">          if (i[0] === &#39;_&#39;) {</span></span>
<span class="line"><span style="color:#A6ACCD;">            delete target[i]</span></span>
<span class="line"><span style="color:#A6ACCD;">          }</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">        return Object.keys(target)</span></span>
<span class="line"><span style="color:#A6ACCD;">      },</span></span>
<span class="line"><span style="color:#A6ACCD;">      //删除拦截钩子</span></span>
<span class="line"><span style="color:#A6ACCD;">      deleteProperty(target, prop) {</span></span>
<span class="line"><span style="color:#A6ACCD;">        if (prop.startsWith(&#39;_&#39;)) {</span></span>
<span class="line"><span style="color:#A6ACCD;">          throw new Error(&#39;不可删除&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">        } else {</span></span>
<span class="line"><span style="color:#A6ACCD;">          delete target[prop]</span></span>
<span class="line"><span style="color:#A6ACCD;">          return true</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">      }</span></span>
<span class="line"><span style="color:#A6ACCD;">    };</span></span>
<span class="line"><span style="color:#A6ACCD;">    const proxy1 = new Proxy(monster1, handler1);</span></span>
<span class="line"><span style="color:#A6ACCD;">    console.log(Object.keys(proxy1));   //[&quot;eyeCount&quot;]</span></span>
<span class="line"><span style="color:#A6ACCD;">    delete proxy1._age   //不可以删除</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h5 id="reflect-反射" tabindex="-1">Reflect(反射) <a class="header-anchor" href="#reflect-反射" aria-hidden="true">#</a></h5><blockquote><p><strong>Reflect</strong> 是一个内置的对象，它提供拦截 JavaScript 操作的方法。这些方法与<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy" target="_blank" rel="noreferrer">proxy handlers (en-US)</a>的方法相同。<code>Reflect</code>不是一个函数对象，因此它是不可构造的。</p><p>它的作用主要有以下几点：</p><ul><li><p>将Object属于语言内部的方法放到Reflect上</p></li><li><p>修改某些Object方法的返回结果，让其变得更合理</p></li><li><p>让Object操作变成函数行为</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">console.log(&#39;assign&#39; in Object)  //true</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(Reflect.has(Object,&#39;assign&#39;))  //true</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div></li><li><p>Reflect象的方法与Proxy对象的方法一一对应（也就是说，能够相对应地返回Proxy handler想要的返回值）</p></li></ul></blockquote><h5 id="iterator-迭代器" tabindex="-1">Iterator(迭代器) <a class="header-anchor" href="#iterator-迭代器" aria-hidden="true">#</a></h5><blockquote><p>遍历<code>Array</code>可以采用下标循环，遍历<code>Map</code>和<code>Set</code>就无法使用下标。为了统一集合类型，ES6标准引入了新的<code>iterable</code>类型</p><ul><li>是一种接口机制，为各种不同的数据解构提供统一访问的机制</li><li>主要供for... of使用</li><li>一句话：让不支持遍历的数据解构“可遍历”</li></ul></blockquote><p><strong>1、可迭代对象有</strong></p><ul><li>1.<code>Array</code></li><li>2.<code>String</code></li><li>3.<code>Map</code></li><li>4.<code>Set</code></li><li>5.<code>arguments</code></li><li>6.<code>NodeList</code></li></ul><p>2、判断一个数据是否具有可迭代能力,只有当数据具有<code>Symbol.iterator</code>属性的时候才可以使用<code>for...of</code>进行迭代</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     console.log(Array.prototype.hasOwnProperty(Symbol.iterator)); //true</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(Set.prototype.hasOwnProperty(Symbol.iterator));   /	/true</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>​ 或者直接输出</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">	console.log([]);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210817012314.png" alt="image-20210817012314030"></p><p>​ 对象原型上有iterator，可迭代</p><p>3、在浏览器控制台打印信息(举例一个数组的)</p><p>4、从上图看出<code>Array.prototype[Symbol.iterator]</code>是一个函数,使用<code>typeof</code>判断数据类型(如果不可迭代的返回是<code>undefined</code>)</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     console.log(typeof [][Symbol.iterator]);		 //function</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(typeof {}[Symbol.iterator]);           //undefined</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(typeof new Set()[Symbol.iterator]);    //function</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(typeof &#39;&#39;[Symbol.iterator]);		 //function</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><strong>手动模拟一个迭代器</strong> 1、迭代器的方法</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     const createIterator = items =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">       const keys = Object.keys(items);</span></span>
<span class="line"><span style="color:#A6ACCD;">       const len = keys.length;</span></span>
<span class="line"><span style="color:#A6ACCD;">       let pointer = 0; // 当前的指针位置</span></span>
<span class="line"><span style="color:#A6ACCD;">       return {</span></span>
<span class="line"><span style="color:#A6ACCD;">         next() {</span></span>
<span class="line"><span style="color:#A6ACCD;">           const done = pointer &gt;= len;</span></span>
<span class="line"><span style="color:#A6ACCD;">           const value = !done ? items[keys[pointer++]] : undefined; // 如果当前指针位置小于总长度</span></span>
<span class="line"><span style="color:#A6ACCD;">           return {</span></span>
<span class="line"><span style="color:#A6ACCD;">             value,</span></span>
<span class="line"><span style="color:#A6ACCD;">             done</span></span>
<span class="line"><span style="color:#A6ACCD;">           }</span></span>
<span class="line"><span style="color:#A6ACCD;">         }</span></span>
<span class="line"><span style="color:#A6ACCD;">       }</span></span>
<span class="line"><span style="color:#A6ACCD;">     }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>2、测试数组</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     const iterator1 = createIterator([1,2,3,4]);</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(iterator1.next());</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(iterator1.next());</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(iterator1.next());</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(iterator1.next());</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(iterator1.next());</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>3、测试对象</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     const iterator2 = createIterator({a: &#39;a&#39;, b: &#39;b&#39;, c: &#39;c&#39;})</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(iterator2.next());</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(iterator2.next());</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(iterator2.next());</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(iterator2.next());</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(iterator2.next());</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><strong>既然数组等具有可迭代的能力,但是我们直接使用数组.next()会报错的(用python中的说法,可迭代不代表是一个迭代器,只有迭代器才具有next()方法)</strong> 1、错误信息</p><p>​ 2、通过上面方式判断已经具有可迭代能力的数据,如果要使用next函数,必须先将可迭代对象转成换迭代器。</p><p>​ 3、可迭代对象不一定是迭代器,但是迭代器一定是可迭代对象</p><p><strong>将不可迭代的数据转换可迭代数据</strong> 1、尝试在对象使用for..of</p><p>​ 2、直接修改对象原型属性</p><p>​ 注意一般我们开发中不会直接串改原型,我们直接挂载对象的方法上也行的</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     Object.prototype[Symbol.iterator] = function() {</span></span>
<span class="line"><span style="color:#A6ACCD;">       const self = this;</span></span>
<span class="line"><span style="color:#A6ACCD;">       const keys = Object.keys(self);</span></span>
<span class="line"><span style="color:#A6ACCD;">       const len = keys.length;</span></span>
<span class="line"><span style="color:#A6ACCD;">       let pointer = 0;</span></span>
<span class="line"><span style="color:#A6ACCD;">       return {</span></span>
<span class="line"><span style="color:#A6ACCD;">         next() {</span></span>
<span class="line"><span style="color:#A6ACCD;">           const done = pointer &gt;= len;</span></span>
<span class="line"><span style="color:#A6ACCD;">           const value = !done ? self[keys[pointer++]]: undefined;</span></span>
<span class="line"><span style="color:#A6ACCD;">           return {</span></span>
<span class="line"><span style="color:#A6ACCD;">             done,</span></span>
<span class="line"><span style="color:#A6ACCD;">             value</span></span>
<span class="line"><span style="color:#A6ACCD;">           }</span></span>
<span class="line"><span style="color:#A6ACCD;">         }</span></span>
<span class="line"><span style="color:#A6ACCD;">       }</span></span>
<span class="line"><span style="color:#A6ACCD;">     }</span></span>
<span class="line"><span style="color:#A6ACCD;">     let obj = {name: &#39;哈哈&#39;, gender: &#39;男&#39;};</span></span>
<span class="line"><span style="color:#A6ACCD;">     let objItem = obj[Symbol.iterator]();</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(&#39;===&#39;, objItem.next());</span></span>
<span class="line"><span style="color:#A6ACCD;">     for (const item of obj) {</span></span>
<span class="line"><span style="color:#A6ACCD;">       console.log(item)</span></span>
<span class="line"><span style="color:#A6ACCD;">     }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>你可能会有疑问，<code>for ... of</code>循环和<code>for ... in</code>循环有何区别？</p><p><code>for ... in</code>循环由于历史遗留问题，它遍历的实际上是对象的属性名称。一个<code>Array</code>数组实际上也是一个对象，它的每个元素的索引被视为一个属性。</p><p>当我们手动给<code>Array</code>对象添加了额外的属性后，<code>for ... in</code>循环将带来意想不到的意外效果：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     var a = [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;];</span></span>
<span class="line"><span style="color:#A6ACCD;">     a.name = &#39;Hello&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">     for (var x in a) {</span></span>
<span class="line"><span style="color:#A6ACCD;">         console.log(x); // &#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;name&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">     }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><code>for ... in</code>循环将把<code>name</code>包括在内，但<code>Array</code>的<code>length</code>属性却不包括在内。</p><p><code>for ... of</code>循环则完全修复了这些问题，它只循环集合本身的元素：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     var a = [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;];</span></span>
<span class="line"><span style="color:#A6ACCD;">     a.name = &#39;Hello&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">     for (var x of a) {</span></span>
<span class="line"><span style="color:#A6ACCD;">         console.log(x); // &#39;A&#39;, &#39;B&#39;, &#39;C&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">     }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>这就是为什么要引入新的<code>for ... of</code>循环。</p><p>然而，更好的方式是直接使用<code>iterable</code>内置的<code>forEach</code>方法，它接收一个函数，每次迭代就自动回调该函数。以<code>Array</code>为例：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">	var a = [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;];</span></span>
<span class="line"><span style="color:#A6ACCD;">	a.forEach(function (element, index, array) { </span></span>
<span class="line"><span style="color:#A6ACCD;">          // element: 指向当前元素的值 // index: 指向当前索引 // array: 指向Array对象本身 </span></span>
<span class="line"><span style="color:#A6ACCD;">          console.log(element + &#39;, index = &#39; + index); </span></span>
<span class="line"><span style="color:#A6ACCD;">	});</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><em>注意</em>，<code>forEach()</code>方法是ES5.1标准引入的，你需要测试浏览器是否支持。</p><p><code>Set</code>与<code>Array</code>类似，但<code>Set</code>没有索引，因此回调函数的前两个参数都是元素本身：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     var s = new Set([&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]);</span></span>
<span class="line"><span style="color:#A6ACCD;">     s.forEach(function (element, sameElement, set) {</span></span>
<span class="line"><span style="color:#A6ACCD;">         console.log(element);</span></span>
<span class="line"><span style="color:#A6ACCD;">     });</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Map的回调函数参数依次为<code>value</code>、<code>key</code>和<code>map</code>本身：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     var m = new Map([[1, &#39;x&#39;], [2, &#39;y&#39;], [3, &#39;z&#39;]]);</span></span>
<span class="line"><span style="color:#A6ACCD;">     m.forEach(function (value, key, map) {</span></span>
<span class="line"><span style="color:#A6ACCD;">         console.log(value);</span></span>
<span class="line"><span style="color:#A6ACCD;">     });</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>如果对某些参数不感兴趣，由于JavaScript的函数调用不要求参数必须一致，因此可以忽略它们。例如，只需要获得<code>Array</code>的<code>element</code>：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     var a = [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;];</span></span>
<span class="line"><span style="color:#A6ACCD;">     a.forEach(function (element) {</span></span>
<span class="line"><span style="color:#A6ACCD;">         console.log(element);</span></span>
<span class="line"><span style="color:#A6ACCD;">     });</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h5 id="fetch-api" tabindex="-1">Fetch API <a class="header-anchor" href="#fetch-api" aria-hidden="true">#</a></h5><h6 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-hidden="true">#</a></h6><blockquote><p>在es6之前我们使用XMLHttpRequest实现异步请求，而在es6又新增了一种HTTP请求方式---fetch与XMLHttpRequest一样同样能实现异步请求，相比较fetch更胜一筹，下面我们来看一下他们的区别。</p></blockquote><p><strong>Fetch与XMLHttpRequest的区别</strong></p><p>1.传统XMLHttpRequest</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">    xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onreadystatechange</span><span style="color:#89DDFF;">=</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">readyState</span><span style="color:#89DDFF;">==</span><span style="color:#F78C6C;">4</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">status</span><span style="color:#89DDFF;">==</span><span style="color:#F78C6C;">200</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">请求成功</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">responseText</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">//{&quot;name&quot;:&quot;test&quot;,&quot;sex&quot;:&quot;nan&quot;}</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">请求失败</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">open</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">get</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">test.json</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>2.fetch请求</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#82AAFF;">fetch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">test.json</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">response</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">json</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//{name: &quot;test&quot;, sex: &quot;nan&quot;}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>可以看到使用fetch简单几行代码就实现一个请求并且fetch会自动解析数据</p><p><code>fetch()</code>是 XMLHttpRequest 的升级版，用于在 JavaScript 脚本里面发出 HTTP 请求。</p><p>浏览器原生提供这个对象。本文详细介绍它的用法。</p><p><img src="https://www.wangbase.com/blogimg/asset/202012/bg2020122613.jpg" alt="img"></p><h6 id="一、基本用法" tabindex="-1">一、基本用法 <a class="header-anchor" href="#一、基本用法" aria-hidden="true">#</a></h6><p><code>fetch()</code>的功能与 XMLHttpRequest 基本相同，但有三个主要的差异。</p><p>（1）<code>fetch()</code>使用 Promise，不使用回调函数，因此大大简化了写法，写起来更简洁。</p><p>（2）<code>fetch()</code>采用模块化设计，API 分散在多个对象上（Response 对象、Request 对象、Headers 对象），更合理一些；相比之下，XMLHttpRequest 的 API 设计并不是很好，输入、输出、状态都在同一个接口管理，容易写出非常混乱的代码。</p><p>（3）<code>fetch()</code>通过数据流（Stream 对象）处理数据，可以分块读取，有利于提高网站性能表现，减少内存占用，对于请求大文件或者网速慢的场景相当有用。XMLHTTPRequest 对象不支持数据流，所有的数据必须放在缓存里，不支持分块读取，必须等待全部拿到后，再一次性吐出来。</p><p>在用法上，<code>fetch()</code>接受一个 URL 字符串作为参数，默认向该网址发出 GET 请求，返回一个 Promise 对象。它的基本用法如下。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#82AAFF;">fetch</span><span style="color:#A6ACCD;">(url)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">catch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>下面是一个例子，从服务器获取 JSON 数据。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#82AAFF;">fetch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">https://api.github.com/users/ruanyf</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">response</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">json</span><span style="color:#A6ACCD;">())</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">json</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(json))</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">catch</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">err</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Request Failed</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span></code></pre></div><p>上面示例中，<code>fetch()</code>接收到的<code>response</code>是一个 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API" target="_blank" rel="noreferrer">Stream 对象</a>，<code>response.json()</code>是一个异步操作，取出所有内容，并将其转为 JSON 对象。</p><p>Promise 可以使用 await 语法改写，使得语义更清晰。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getJSON</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">url</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">https://api.github.com/users/ruanyf</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">response</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fetch</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">url</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">json</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">error</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Request Failed</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">error</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>上面示例中，<code>await</code>语句必须放在<code>try...catch</code>里面，这样才能捕捉异步操作中可能发生的错误。</p><p>后文都采用<code>await</code>的写法，不使用<code>.then()</code>的写法。</p><h6 id="二、response-对象-处理-http-回应" tabindex="-1">二、Response 对象：处理 HTTP 回应 <a class="header-anchor" href="#二、response-对象-处理-http-回应" aria-hidden="true">#</a></h6><ul><li><strong>2.1 Response 对象的同步属性</strong></li></ul><p><code>fetch()</code>请求成功以后，得到的是一个 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Response" target="_blank" rel="noreferrer">Response 对象</a>。它对应服务器的 HTTP 回应。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> response </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fetch</span><span style="color:#A6ACCD;">(url)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>前面说过，Response 包含的数据通过 Stream 接口异步读取，但是它还包含一些同步属性，对应 HTTP 回应的标头信息（Headers），可以立即读取。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fetchText</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">response</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fetch</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/readme.txt</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">status</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">statusText</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>上面示例中，<code>response.status</code>和<code>response.statusText</code>就是 Response 的同步属性，可以立即读取。</p><p>标头信息属性有下面这些。</p><p><strong>Response.ok</strong></p><p><code>Response.ok</code>属性返回一个布尔值，表示请求是否成功，<code>true</code>对应 HTTP 请求的状态码 200 到 299，<code>false</code>对应其他的状态码。</p><p><strong>Response.status</strong></p><p><code>Response.status</code>属性返回一个数字，表示 HTTP 回应的状态码（例如200，表示成功请求）。</p><p><strong>Response.statusText</strong></p><p><code>Response.statusText</code>属性返回一个字符串，表示 HTTP 回应的状态信息（例如请求成功以后，服务器返回&quot;OK&quot;）。</p><p><strong>Response.url</strong></p><p><code>Response.url</code>属性返回请求的 URL。如果 URL 存在跳转，该属性返回的是最终 URL。</p><p><strong>Response.type</strong></p><p><code>Response.type</code>属性返回请求的类型。可能的值如下：</p><ul><li><code>basic</code>：普通请求，即同源请求。</li><li><code>cors</code>：跨域请求。</li><li><code>error</code>：网络错误，主要用于 Service Worker。</li><li><code>opaque</code>：如果<code>fetch()</code>请求的<code>type</code>属性设为<code>no-cors</code>，就会返回这个值，详见请求部分。表示发出的是简单的跨域请求，类似<code>&lt;form&gt;</code>表单的那种跨域请求。</li><li><code>opaqueredirect</code>：如果<code>fetch()</code>请求的<code>redirect</code>属性设为<code>manual</code>，就会返回这个值，详见请求部分。</li></ul><p><strong>Response.redirected</strong></p><p><code>Response.redirected</code>属性返回一个布尔值，表示请求是否发生过跳转。</p><ul><li><strong>2.2 判断请求是否成功</strong></li></ul><p><code>fetch()</code>发出请求以后，有一个很重要的注意点：只有网络错误，或者无法连接时，<code>fetch()</code>才会报错，其他情况都不会报错，而是认为请求成功。</p><p>这就是说，即使服务器返回的状态码是 4xx 或 5xx，<code>fetch()</code>也不会报错（即 Promise 不会变为 <code>rejected</code>状态）。</p><p>只有通过<code>Response.status</code>属性，得到 HTTP 回应的真实状态码，才能判断请求是否成功。请看下面的例子。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fetchText</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">response</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fetch</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/readme.txt</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">status</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">200</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">status</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">300</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">text</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">throw</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Error</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">statusText</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>上面示例中，<code>response.status</code>属性只有等于 2xx （200~299），才能认定请求成功。这里不用考虑网址跳转（状态码为 3xx），因为<code>fetch()</code>会将跳转的状态码自动转为 200。</p><p>另一种方法是判断<code>response.ok</code>是否为<code>true</code>。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (response</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ok) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 请求成功</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 请求失败</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>2.3 Response.headers 属性</strong></li></ul><p>Response 对象还有一个<code>Response.headers</code>属性，指向一个 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Headers" target="_blank" rel="noreferrer">Headers 对象</a>，对应 HTTP 回应的所有标头。</p><p>Headers 对象可以使用<code>for...of</code>循环进行遍历。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> response </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fetch</span><span style="color:#A6ACCD;">(url)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> value</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> response</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">headers) </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`\${</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> : </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 或者</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> value</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> response</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">headers</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">entries</span><span style="color:#A6ACCD;">()) </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`\${</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> : </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>Headers 对象提供了以下方法，用来操作标头。</p><ul><li><code>Headers.get()</code>：根据指定的键名，返回键值。</li><li><code>Headers.has()</code>： 返回一个布尔值，表示是否包含某个标头。</li><li><code>Headers.set()</code>：将指定的键名设置为新的键值，如果该键名不存在则会添加。</li><li><code>Headers.append()</code>：添加标头。</li><li><code>Headers.delete()</code>：删除标头。</li><li><code>Headers.keys()</code>：返回一个遍历器，可以依次遍历所有键名。</li><li><code>Headers.values()</code>：返回一个遍历器，可以依次遍历所有键值。</li><li><code>Headers.entries()</code>：返回一个遍历器，可以依次遍历所有键值对（<code>[key, value]</code>）。</li><li><code>Headers.forEach()</code>：依次遍历标头，每个标头都会执行一次参数函数。</li></ul><p>上面的有些方法可以修改标头，那是因为继承自 Headers 接口。对于 HTTP 回应来说，修改标头意义不大，况且很多标头是只读的，浏览器不允许修改。</p><p>这些方法中，最常用的是<code>response.headers.get()</code>，用于读取某个标头的值。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> response </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">fetch</span><span style="color:#A6ACCD;">(url)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">headers</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Content-Type</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// application/json; charset=utf-8</span></span>
<span class="line"></span></code></pre></div><p><code>Headers.keys()</code>和<code>Headers.values()</code>方法用来分别遍历标头的键名和键值。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 键名</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> key </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> myHeaders</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">keys</span><span style="color:#A6ACCD;">()) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 键值</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> value </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> myHeaders</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">values</span><span style="color:#A6ACCD;">()) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><code>Headers.forEach()</code>方法也可以遍历所有的键值和键名。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> response </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fetch</span><span style="color:#A6ACCD;">(url)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">headers</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">key</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> value)</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><ul><li><strong>2.4 读取内容的方法</strong></li></ul><p><code>Response</code>对象根据服务器返回的不同类型的数据，提供了不同的读取方法。</p><ul><li><code>response.text()</code>：得到文本字符串。</li><li><code>response.json()</code>：得到 JSON 对象。</li><li><code>response.blob()</code>：得到二进制 Blob 对象。</li><li><code>response.formData()</code>：得到 FormData 表单对象。</li><li><code>response.arrayBuffer()</code>：得到二进制 ArrayBuffer 对象。</li></ul><p>上面5个读取方法都是异步的，返回的都是 Promise 对象。必须等到异步操作结束，才能得到服务器返回的完整数据。</p><p><strong>response.text()</strong></p><p><code>response.text()</code>可以用于获取文本数据，比如 HTML 文件。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> response </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fetch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/users.html</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> body </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">text</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">innerHTML </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> body</span></span>
<span class="line"></span></code></pre></div><p><strong>response.json()</strong></p><p><code>response.json()</code>主要用于获取服务器返回的 JSON 数据，前面已经举过例子了。</p><p><strong>response.formData()</strong></p><p><code>response.formData()</code>主要用在 Service Worker 里面，拦截用户提交的表单，修改某些数据以后，再提交给服务器。</p><p><strong>response.blob()</strong></p><p><code>response.blob()</code>用于获取二进制文件。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> response </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fetch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">flower.jpg</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> myBlob </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">blob</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> objectURL </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> URL</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createObjectURL</span><span style="color:#A6ACCD;">(myBlob)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> myImage </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">img</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">myImage</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">src </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> objectURL</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>上面示例读取图片文件<code>flower.jpg</code>，显示在网页上。</p><p><strong>response.arrayBuffer()</strong></p><p><code>response.arrayBuffer()</code>主要用于获取流媒体文件。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> audioCtx </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AudioContext</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> source </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> audioCtx</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createBufferSource</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> response </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fetch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">song.ogg</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> buffer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">arrayBuffer</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> decodeData </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> audioCtx</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">decodeAudioData</span><span style="color:#A6ACCD;">(buffer)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">buffer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> buffer</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">connect</span><span style="color:#A6ACCD;">(audioCtx</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">destination)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">loop </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>上面示例是<code>response.arrayBuffer()</code>获取音频文件<code>song.ogg</code>，然后在线播放的例子。</p><ul><li><strong>2.5 Response.clone()</strong></li></ul><p>Stream 对象只能读取一次，读取完就没了。这意味着，前一节的五个读取方法，只能使用一个，否则会报错。</p><blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> text </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">text</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> json </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">json</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 报错</span></span>
<span class="line"></span></code></pre></div></blockquote><p>上面示例先使用了<code>response.text()</code>，就把 Stream 读完了。后面再调用<code>response.json()</code>，就没有内容可读了，所以报错。</p><p>Response 对象提供<code>Response.clone()</code>方法，创建<code>Response</code>对象的副本，实现多次读取。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> response1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fetch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">flowers.jpg</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> response2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> response1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clone</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> myBlob1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> response1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">blob</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> myBlob2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> response2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">blob</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">image1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">src </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> URL</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createObjectURL</span><span style="color:#A6ACCD;">(myBlob1)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">image2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">src </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> URL</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createObjectURL</span><span style="color:#A6ACCD;">(myBlob2)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>上面示例中，<code>response.clone()</code>复制了一份 Response 对象，然后将同一张图片读取了两次。</p><p>Response 对象还有一个<code>Response.redirect()</code>方法，用于将 Response 结果重定向到指定的 URL。该方法一般只用在 Service Worker 里面，这里就不介绍了。</p><ul><li><strong>2.6 Response.body 属性</strong></li></ul><p><code>Response.body</code>属性是 Response 对象暴露出的底层接口，返回一个 ReadableStream 对象，供用户操作。</p><p>它可以用来分块读取内容，应用之一就是显示下载的进度。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> response </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fetch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">flower.jpg</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> reader </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> response</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getReader</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;">(</span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">done</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">reader</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">read</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">done</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">Received </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> bytes</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>上面示例中，<code>response.body.getReader()</code>方法返回一个遍历器。这个遍历器的<code>read()</code>方法每次返回一个对象，表示本次读取的内容块。</p><p>这个对象的<code>done</code>属性是一个布尔值，用来判断有没有读完；<code>value</code>属性是一个 arrayBuffer 数组，表示内容块的内容，而<code>value.length</code>属性是当前块的大小。</p><h6 id="三、fetch-的第二个参数-定制-http-请求" tabindex="-1">三、<code>fetch()</code>的第二个参数：定制 HTTP 请求 <a class="header-anchor" href="#三、fetch-的第二个参数-定制-http-请求" aria-hidden="true">#</a></h6><p><code>fetch()</code>的第一个参数是 URL，还可以接受第二个参数，作为配置对象，定制发出的 HTTP 请求。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#82AAFF;">fetch</span><span style="color:#A6ACCD;">(url</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> optionObj)</span></span>
<span class="line"></span></code></pre></div><p>上面命令的<code>optionObj</code>就是第二个参数。</p><p>HTTP 请求的方法、标头、数据体都在这个对象里面设置。下面是一些示例。</p><p><strong>（1）POST 请求</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> response </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fetch</span><span style="color:#A6ACCD;">(url</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">method</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">POST</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">headers</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">Content-type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">application/x-www-form-urlencoded; charset=UTF-8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo=bar&amp;lorem=ipsum</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> json </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">json</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>上面示例中，配置对象用到了三个属性。</p><ul><li><code>method</code>：HTTP 请求的方法，<code>POST</code>、<code>DELETE</code>、<code>PUT</code>都在这个属性设置。</li><li><code>headers</code>：一个对象，用来定制 HTTP 请求的标头。</li><li><code>body</code>：POST 请求的数据体。</li></ul><p>注意，有些标头不能通过<code>headers</code>属性设置，比如<code>Content-Length</code>、<code>Cookie</code>、<code>Host</code>等等。它们是由浏览器自动生成，无法修改。</p><p><strong>（2）提交 JSON 数据</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> user </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">John</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">surname</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Smith</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> response </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fetch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/article/fetch/post/user</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">method</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">POST</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">headers</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">Content-Type</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">application/json;charset=utf-8</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#A6ACCD;">(user) </span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>上面示例中，标头<code>Content-Type</code>要设成<code>&#39;application/json;charset=utf-8&#39;</code>。因为默认发送的是纯文本，<code>Content-Type</code>的默认值是<code>&#39;text/plain;charset=UTF-8&#39;</code>。</p><p><strong>（3）提交表单</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> form </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">form</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> response </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fetch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/users</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">method</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">POST</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">FormData</span><span style="color:#A6ACCD;">(form)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p><strong>（4）文件上传</strong></p><p>如果表单里面有文件选择器，可以用前一个例子的写法，上传的文件包含在整个表单里面，一起提交。</p><p>另一种方法是用脚本添加文件，构造出一个表单，进行上传，请看下面的例子。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> input </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">input[type=&quot;file&quot;]</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">FormData</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">append</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">file</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> input</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">files[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">append</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">user</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">fetch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/avatars</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">method</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">POST</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> data</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>上传二进制文件时，不用修改标头的<code>Content-Type</code>，浏览器会自动设置。</p><p><strong>（5）直接上传二进制数据</strong></p><p><code>fetch()</code>也可以直接上传二进制数据，将 Blob 或 arrayBuffer 数据放在<code>body</code>属性里面。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> blob </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">resolve</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;">   </span></span>
<span class="line"><span style="color:#A6ACCD;">  canvasElem</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toBlob</span><span style="color:#A6ACCD;">(resolve</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">image/png</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> response </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fetch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/article/fetch/post/image</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">method</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">POST</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> blob</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h6 id="四、fetch-配置对象的完整-api" tabindex="-1">四、<code>fetch()</code>配置对象的完整 API <a class="header-anchor" href="#四、fetch-配置对象的完整-api" aria-hidden="true">#</a></h6><p><code>fetch()</code>第二个参数的完整 API 如下。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> response </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fetch</span><span style="color:#A6ACCD;">(url</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">method</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">GET</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">headers</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">Content-Type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text/plain;charset=UTF-8</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">undefined,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">referrer</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">about:client</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">referrerPolicy</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">no-referrer-when-downgrade</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">mode</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cors</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">credentials</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">same-origin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">cache</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">default</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">redirect</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">follow</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">integrity</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">keepalive</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">signal</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">undefined</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p><code>fetch()</code>请求的底层用的是 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Request/Request" target="_blank" rel="noreferrer">Request() 对象</a>的接口，参数完全一样，因此上面的 API 也是<code>Request()</code>的 API。</p><p>这些属性里面，<code>headers</code>、<code>body</code>、<code>method</code>前面已经给过示例了，下面是其他属性的介绍。</p><p><strong>cache</strong></p><p><code>cache</code>属性指定如何处理缓存。可能的取值如下：</p><ul><li><code>default</code>：默认值，先在缓存里面寻找匹配的请求。</li><li><code>no-store</code>：直接请求远程服务器，并且不更新缓存。</li><li><code>reload</code>：直接请求远程服务器，并且更新缓存。</li><li><code>no-cache</code>：将服务器资源跟本地缓存进行比较，有新的版本才使用服务器资源，否则使用缓存。</li><li><code>force-cache</code>：缓存优先，只有不存在缓存的情况下，才请求远程服务器。</li><li><code>only-if-cached</code>：只检查缓存，如果缓存里面不存在，将返回504错误。</li></ul><p><strong>mode</strong></p><p><code>mode</code>属性指定请求的模式。可能的取值如下：</p><ul><li><code>cors</code>：默认值，允许跨域请求。</li><li><code>same-origin</code>：只允许同源请求。</li><li><code>no-cors</code>：请求方法只限于 GET、POST 和 HEAD，并且只能使用有限的几个简单标头，不能添加跨域的复杂标头，相当于提交表单所能发出的请求。</li></ul><p><strong>credentials</strong></p><p><code>credentials</code>属性指定是否发送 Cookie。可能的取值如下：</p><ul><li><code>same-origin</code>：默认值，同源请求时发送 Cookie，跨域请求时不发送。</li><li><code>include</code>：不管同源请求，还是跨域请求，一律发送 Cookie。</li><li><code>omit</code>：一律不发送。</li></ul><p>跨域请求发送 Cookie，需要将<code>credentials</code>属性设为<code>include</code>。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#82AAFF;">fetch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http://another.com</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">credentials</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">include</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p><strong>signal</strong></p><p><code>signal</code>属性指定一个 AbortSignal 实例，用于取消<code>fetch()</code>请求，详见下一节。</p><p><strong>keepalive</strong></p><p><code>keepalive</code>属性用于页面卸载时，告诉浏览器在后台保持连接，继续发送数据。</p><p>一个典型的场景就是，用户离开网页时，脚本向服务器提交一些用户行为的统计信息。这时，如果不用<code>keepalive</code>属性，数据可能无法发送，因为浏览器已经把页面卸载了。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onunload</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">fetch</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/analytics</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    method</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">POST</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    body</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">statistics</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    keepalive</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p><strong>redirect</strong></p><p><code>redirect</code>属性指定 HTTP 跳转的处理方法。可能的取值如下：</p><ul><li><code>follow</code>：默认值，<code>fetch()</code>跟随 HTTP 跳转。</li><li><code>error</code>：如果发生跳转，<code>fetch()</code>就报错。</li><li><code>manual</code>：<code>fetch()</code>不跟随 HTTP 跳转，但是<code>response.url</code>属性会指向新的 URL，<code>response.redirected</code>属性会变为<code>true</code>，由开发者自己决定后续如何处理跳转。</li></ul><p><strong>integrity</strong></p><p><code>integrity</code>属性指定一个哈希值，用于检查 HTTP 回应传回的数据是否等于这个预先设定的哈希值。</p><p>比如，下载文件时，检查文件的 SHA-256 哈希值是否相符，确保没有被篡改。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#82AAFF;">fetch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http://site.com/file</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">integrity</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">sha256-abcdef</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p><strong>referrer</strong></p><p><code>referrer</code>属性用于设定<code>fetch()</code>请求的<code>referer</code>标头。</p><p>这个属性可以为任意字符串，也可以设为空字符串（即不发送<code>referer</code>标头）。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#82AAFF;">fetch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/page</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">referrer</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p><strong>referrerPolicy</strong></p><p><code>referrerPolicy</code>属性用于设定<code>Referer</code>标头的规则。可能的取值如下：</p><ul><li><code>no-referrer-when-downgrade</code>：默认值，总是发送<code>Referer</code>标头，除非从 HTTPS 页面请求 HTTP 资源时不发送。</li><li><code>no-referrer</code>：不发送<code>Referer</code>标头。</li><li><code>origin</code>：<code>Referer</code>标头只包含域名，不包含完整的路径。</li><li><code>origin-when-cross-origin</code>：同源请求<code>Referer</code>标头包含完整的路径，跨域请求只包含域名。</li><li><code>same-origin</code>：跨域请求不发送<code>Referer</code>，同源请求发送。</li><li><code>strict-origin</code>：<code>Referer</code>标头只包含域名，HTTPS 页面请求 HTTP 资源时不发送<code>Referer</code>标头。</li><li><code>strict-origin-when-cross-origin</code>：同源请求时<code>Referer</code>标头包含完整路径，跨域请求时只包含域名，HTTPS 页面请求 HTTP 资源时不发送该标头。</li><li><code>unsafe-url</code>：不管什么情况，总是发送<code>Referer</code>标头。</li></ul><h6 id="五、取消fetch-请求" tabindex="-1">五、取消<code>fetch()</code>请求 <a class="header-anchor" href="#五、取消fetch-请求" aria-hidden="true">#</a></h6><p><code>fetch()</code>请求发送以后，如果中途想要取消，需要使用<code>AbortController</code>对象。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> controller </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">AbortController</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> signal </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> controller</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">signal</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">fetch</span><span style="color:#A6ACCD;">(url</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">signal</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> controller</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">signal</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">signal</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">abort</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">abort!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">controller</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">abort</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 取消</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(signal</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">aborted)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre></div><p>上面示例中，首先新建 AbortController 实例，然后发送<code>fetch()</code>请求，配置对象的<code>signal</code>属性必须指定接收 AbortController 实例发送的信号<code>controller.signal</code>。</p><p><code>controller.abort()</code>方法用于发出取消信号。这时会触发<code>abort</code>事件，这个事件可以监听，也可以通过<code>controller.signal.aborted</code>属性判断取消信号是否已经发出。</p><p>下面是一个1秒后自动取消请求的例子。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> controller </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">AbortController</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> controller</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">abort</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">response</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fetch</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/long-operation</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    signal</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">controller</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">signal</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;">(err) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">err</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">AbortError</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Aborted!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">throw</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">err</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h6 id="六、参考链接" tabindex="-1">六、参考链接 <a class="header-anchor" href="#六、参考链接" aria-hidden="true">#</a></h6><ul><li><a href="https://javascript.info/fetch" target="_blank" rel="noreferrer">Network requests: Fetch</a></li><li><a href="https://github.com/node-fetch/node-fetch" target="_blank" rel="noreferrer">node-fetch</a></li><li><a href="https://developers.google.com/web/updates/2015/03/introduction-to-fetch" target="_blank" rel="noreferrer">Introduction to fetch()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch" target="_blank" rel="noreferrer">Using Fetch</a></li><li><a href="https://developerhowto.com/2019/09/14/javascript-fetch-api/" target="_blank" rel="noreferrer">Javascript Fetch API: The XMLHttpRequest evolution</a></li></ul><h4 id="es7" tabindex="-1">ES7 <a class="header-anchor" href="#es7" aria-hidden="true">#</a></h4><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210830015913.png" alt="ES7小尺寸"><h5 id="数组扩展" tabindex="-1">数组扩展 <a class="header-anchor" href="#数组扩展" aria-hidden="true">#</a></h5><h6 id="array-prototype-includes" tabindex="-1">Array.prototype.includes <a class="header-anchor" href="#array-prototype-includes" aria-hidden="true">#</a></h6><blockquote><p><code>includes()</code> 方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回false。</p></blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes#%E8%AF%AD%E6%B3%95" target="_blank" rel="noreferrer">语法</a></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">arr.includes(valueToFind[, fromIndex])</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes#%E5%8F%82%E6%95%B0" target="_blank" rel="noreferrer">参数</a></p><ul><li><p><code>valueToFind</code></p><p>需要查找的元素值。<strong>Note:</strong> 使用 <code>includes()</code>比较字符串和字符时是区分大小写。</p></li><li><p><code>fromIndex</code> 可选</p><p>从<code>fromIndex</code> 索引处开始查找 <code>valueToFind</code>。如果为负值，则按升序从 <code>array.length + fromIndex</code> 的索引开始搜 （即使从末尾开始往前跳 <code>fromIndex</code> 的绝对值个索引，然后往后搜寻）。默认为 0。</p></li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes#%E8%BF%94%E5%9B%9E%E5%80%BC" target="_blank" rel="noreferrer">返回值</a></p><p>返回一个布尔值 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean" target="_blank" rel="noreferrer"><code>Boolean</code></a> ，如果在数组中找到了（如果传入了 <code>fromIndex</code> ，表示在 <code>fromIndex</code> 指定的索引范围中找到了）则返回 <code>true</code> 。</p><p><strong>基本使用：</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     const array1 = [1, 2, 3];</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(array1.includes(2));</span></span>
<span class="line"><span style="color:#A6ACCD;">     // expected output: true</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">     const pets = [&#39;cat&#39;, &#39;dog&#39;, &#39;bat&#39;];</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(pets.includes(&#39;cat&#39;));</span></span>
<span class="line"><span style="color:#A6ACCD;">     // expected output: true</span></span>
<span class="line"><span style="color:#A6ACCD;">	//从索引为1开始查找</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(pets.includes(&#39;at&#39;,1));</span></span>
<span class="line"><span style="color:#A6ACCD;">     // expected output: false</span></span>
<span class="line"><span style="color:#A6ACCD;">     //从索引为array.length + fromIndex= 1开始往后查找</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(pets.includes(&#39;at&#39;,-2));</span></span>
<span class="line"><span style="color:#A6ACCD;">     // expected output: false</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><strong>Array.prototype.includes vs Array.prototype.indexOf()</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">const arr = [&#39;es6&#39;,[&#39;es7&#39;,&#39;es8&#39;],es9,NaN] </span></span>
<span class="line"><span style="color:#A6ACCD;">//返回值不一样</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(arr.includes([&#39;es7&#39;,&#39;es8&#39;]))   //fasle</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(arr.indexOf([&#39;es7&#39;,&#39;es8&#39;]))    //-1</span></span>
<span class="line"><span style="color:#A6ACCD;">//includes可以判断NAN，indexOf则认为不相等</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(arr.includes(NAN))   //true</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(arr.indexOf(NaN))    //-1</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h5 id="数值扩展" tabindex="-1">数值扩展 <a class="header-anchor" href="#数值扩展" aria-hidden="true">#</a></h5><h6 id="幂运算符" tabindex="-1">幂运算符：** <a class="header-anchor" href="#幂运算符" aria-hidden="true">#</a></h6><blockquote><p>等同于Math.pow()</p></blockquote><p>基本使用：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">console.log(Math.pow(2,3))  //8</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(2 ** 3)         //8</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(Math.pow(2,4))  //16</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(2 ** 4)         //16</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h4 id="es8" tabindex="-1">ES8 <a class="header-anchor" href="#es8" aria-hidden="true">#</a></h4><h5 id="async-await" tabindex="-1">async/await <a class="header-anchor" href="#async-await" aria-hidden="true">#</a></h5><h5 id="对象扩展" tabindex="-1">对象扩展 <a class="header-anchor" href="#对象扩展" aria-hidden="true">#</a></h5><h6 id="object-values" tabindex="-1">Object.values <a class="header-anchor" href="#object-values" aria-hidden="true">#</a></h6><blockquote><p><code>Object.values()</code>方法返回一个给定对象自身的所有可枚举属性值的数组，值的顺序与使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in" target="_blank" rel="noreferrer"><code>for...in</code></a>循环的顺序相同 ( 区别在于 for-in 循环枚举原型链中的属性 )。</p></blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/values#%E8%AF%AD%E6%B3%95" target="_blank" rel="noreferrer">语法</a></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">Object.values(obj)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/values#%E5%8F%82%E6%95%B0" target="_blank" rel="noreferrer">参数</a></p><ul><li><p><code>obj</code></p><p>被返回可枚举属性值的对象。</p></li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/values#%E8%BF%94%E5%9B%9E%E5%80%BC" target="_blank" rel="noreferrer">返回值</a></p><p>一个包含对象自身的所有可枚举属性值的数组。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/values#%E6%8F%8F%E8%BF%B0" target="_blank" rel="noreferrer">描述</a></p><p><code>Object.values()</code>返回一个数组，其元素是在对象上找到的可枚举属性值。属性的顺序与通过手动循环对象的属性值所给出的顺序相同。</p><p>基本使用：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     var obj = { foo: &#39;bar&#39;, baz: 42 };</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(Object.values(obj)); // [&#39;bar&#39;, 42]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">     var obj = { 0: &#39;a&#39;, 1: &#39;b&#39;, 2: &#39;c&#39; };</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(Object.values(obj)); // [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">     var an_obj = { 100: &#39;a&#39;, 2: &#39;b&#39;, 7: &#39;c&#39; };</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(Object.values(an_obj)); // [&#39;b&#39;, &#39;c&#39;, &#39;a&#39;]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">     var my_obj = Object.create({}, { getFoo: { value: function() { return this.foo; } } });</span></span>
<span class="line"><span style="color:#A6ACCD;">     my_obj.foo = &#39;bar&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(Object.values(my_obj)); // [&#39;bar&#39;]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(Object.values(&#39;foo&#39;)); // [&#39;f&#39;, &#39;o&#39;, &#39;o&#39;]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h6 id="object-entries" tabindex="-1">Object.entries <a class="header-anchor" href="#object-entries" aria-hidden="true">#</a></h6><blockquote><p><code>Object.entries()</code>方法返回一个给定对象自身可枚举属性的键值对数组，其排列与使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in" target="_blank" rel="noreferrer"><code>for...in</code></a> 循环遍历该对象时返回的顺序一致（区别在于 for-in 循环还会枚举原型链中的属性）。</p></blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/entries#%E8%AF%AD%E6%B3%95" target="_blank" rel="noreferrer">语法</a></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">Object.entries(obj)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/entries#%E5%8F%82%E6%95%B0" target="_blank" rel="noreferrer">参数</a></p><ul><li><code>obj</code></li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/entries#%E8%BF%94%E5%9B%9E%E5%80%BC" target="_blank" rel="noreferrer">返回值</a></p><p>​ 可以返回其可枚举属性的键值对的对象。</p><p>基本使用；</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">const object1 = {</span></span>
<span class="line"><span style="color:#A6ACCD;">  a: &#39;somestring&#39;,</span></span>
<span class="line"><span style="color:#A6ACCD;">  b: 42</span></span>
<span class="line"><span style="color:#A6ACCD;">};</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">for (const [key, value] of Object.entries(object1)) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  console.log(\`\${key}: \${value}\`);</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>输出结果：</p><p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210822223023.png" alt="image-20210822223023028"></p><h6 id="对象属性描述符" tabindex="-1">对象属性描述符 <a class="header-anchor" href="#对象属性描述符" aria-hidden="true">#</a></h6><p><strong>描述符类型</strong></p><blockquote><p>对象属性描述符的类型分为两种：数据属性和访问器属性</p></blockquote><p><strong>数据属性</strong></p><p>数据属性(data property)包含一个数据值的位置，在这个位置可以读取和写入值。数据属性有4个特性</p><p>【1】<a href="https://www.cnblogs.com/xiaohuochai/p/5743821.html#configurable" target="_blank" rel="noreferrer">Configurable(可配置性)</a></p><p>可配置性决定是否可以使用delete删除属性，以及是否可以修改属性描述符的特性，默认值为true</p><p>【2】<a href="https://www.cnblogs.com/xiaohuochai/p/5743821.html#enumerable" target="_blank" rel="noreferrer">Enumerable(可枚举性)</a></p><p>可枚举性决定属性是否出现在对象的属性枚举中，比如是否可以通过for-in循环返回该属性，默认值为true</p><p>【3】<a href="https://www.cnblogs.com/xiaohuochai/p/5743821.html#writable" target="_blank" rel="noreferrer">Writable(可写性)</a></p><p>可写性决定是否可以修改属性的值，默认值为true</p><p>【4】Value(属性值)</p><p>属性值包含这个属性的数据值，读取属性值的时候，从这个位置读；写入属性值的时候，把新值保存在这个位置。默认值为undefined</p><p><strong>访问器属性</strong></p><p>对象属性是名字、值和一组属性描述符构成的。而属性值可以用一个或两个方法替代，这两个方法就是getter和setter。而这种属性类型叫访问器属性(accessor property)</p><p>【1】<a href="https://www.cnblogs.com/xiaohuochai/p/5743821.html#configurable" target="_blank" rel="noreferrer">Configurable(可配置性)</a></p><p>可配置性决定是否可以使用delete删除属性，以及是否可以修改属性描述符的特性，默认值为true</p><p>【2】<a href="https://www.cnblogs.com/xiaohuochai/p/5743821.html#enumerable" target="_blank" rel="noreferrer">Enumerable(可枚举性)</a></p><p>可枚举性决定属性是否出现在对象的属性枚举中，比如是否可以通过for-in循环返回该属性，默认值为true</p><p>【3】<a href="https://www.cnblogs.com/xiaohuochai/p/5743821.html#get" target="_blank" rel="noreferrer">getter</a></p><p>在读取属性时调用的函数。默认值为undefined</p><p>【4】<a href="https://www.cnblogs.com/xiaohuochai/p/5743821.html#get" target="_blank" rel="noreferrer">setter</a></p><p>在写入属性时调用的函数。默认值为undefined</p><p>和数据属性不同，访问器属性不具有可写性(Writable)。如果属性同时具有getter和setter方法，那么它是一个读/写属性。如果它只有getter方法，那么它是一个只读属性。如果它只有setter方法，那么它是一个只写属性。读取只写属性总是返回undefined</p><p><strong>描述符方法</strong></p><p>前面介绍了属性描述符，要想设置它们，就需要用到描述符方法。描述符方法总共有以下5个：</p><p>【1】Object.getOwnPropertyDescriptor()</p><p>Object.getOwnPropertyDescriptor(o,name)方法用于查询一个属性的描述符，并以对象的形式返回</p><p>查询obj.a属性时，可配置性、可枚举性、可写性都是默认的true，而value是a的属性值1</p><p>查询obj.b属性时，因为obj.b属性不存在，该方法返回undefined</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     var obj = {a:1};</span></span>
<span class="line"><span style="color:#A6ACCD;">     //Object {value: 1, writable: true, enumerable: true, configurable: true}</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(Object.getOwnPropertyDescriptor(obj,&#39;a&#39;));</span></span>
<span class="line"><span style="color:#A6ACCD;">     //undefined</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(Object.getOwnPropertyDescriptor(obj,&#39;b&#39;));</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>【2】Object.getOwnPropertyDescriptors()</p><p>​ <code>**Object.getOwnPropertyDescriptors()**</code> 方法用来获取一个对象的所有自身属性的描述符。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     var num = new String(&#39;12&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(Object.getOwnPropertyDescriptors(num));</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>输出：</p><p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210822234534.png" alt="image-20210822234534606"></p><p>【3】Object.defineProperty()</p><p>Object.defineProperty(o,name,desc)方法用于创建或配置对象的一个属性的描述符，返回配置后的对象</p><p>使用该方法创建或配置对象属性的描述符时，如果不针对该属性进行描述符的配置，则该项描述符默认为false</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     var obj = {};</span></span>
<span class="line"><span style="color:#A6ACCD;">     //{a:1}</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(Object.defineProperty(obj,&#39;a&#39;,{</span></span>
<span class="line"><span style="color:#A6ACCD;">             value:1,</span></span>
<span class="line"><span style="color:#A6ACCD;">             writable: true</span></span>
<span class="line"><span style="color:#A6ACCD;">         }));</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">     //由于没有配置enumerable和configurable，所以它们的值为false</span></span>
<span class="line"><span style="color:#A6ACCD;">     //{value: 1, writable: true, enumerable: false, configurable: false}</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(Object.getOwnPropertyDescriptor(obj,&#39;a&#39;));</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>【4】Object.defineProperties()</p><p>Object.defineProperty(o,descriptors)方法用于创建或配置对象的多个属性的描述符，返回配置后的对象</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     var obj = {</span></span>
<span class="line"><span style="color:#A6ACCD;">         a:1</span></span>
<span class="line"><span style="color:#A6ACCD;">     };</span></span>
<span class="line"><span style="color:#A6ACCD;">     //{a: 1, b: 2}</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(Object.defineProperties(obj,{</span></span>
<span class="line"><span style="color:#A6ACCD;">             a:{writable:false},</span></span>
<span class="line"><span style="color:#A6ACCD;">             b:{value:2}</span></span>
<span class="line"><span style="color:#A6ACCD;">         }));</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">     //{value: 1, writable: false, enumerable: true, configurable: true}</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(Object.getOwnPropertyDescriptor(obj,&#39;a&#39;));</span></span>
<span class="line"><span style="color:#A6ACCD;">     //{value: 2, writable: false, enumerable: false, configurable: false}</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(Object.getOwnPropertyDescriptor(obj,&#39;b&#39;));</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>【5】Object.create()</p><p>Object.create(proto,descriptors)方法使用指定的原型和属性来创建一个对象</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     var o = Object.create(Object.prototype,{</span></span>
<span class="line"><span style="color:#A6ACCD;">         a:{writable: false,value:1,enumerable:true}</span></span>
<span class="line"><span style="color:#A6ACCD;">     });</span></span>
<span class="line"><span style="color:#A6ACCD;">     //{value: 1, writable: false, enumerable: true, configurable: true}</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(Object.getOwnPropertyDescriptor(obj,&#39;a&#39;));</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><strong>描述符详述</strong></p><p>前面分别介绍了数据属性和访问器属性的描述符，但没有详细说明其含义及使用，接下来逐一进行说明</p><p><strong>可写性(writable)</strong></p><p>可写性决定是否可以修改属性的值，默认值为true</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     var o = {a:1};</span></span>
<span class="line"><span style="color:#A6ACCD;">     o.a = 2;</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(o.a);//2</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>设置writable:false后，赋值语句会静默失效</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     var o = {a:1};</span></span>
<span class="line"><span style="color:#A6ACCD;">     Object.defineProperty(o,&#39;a&#39;,{</span></span>
<span class="line"><span style="color:#A6ACCD;">         writable:false</span></span>
<span class="line"><span style="color:#A6ACCD;">     });</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(o.a);//1</span></span>
<span class="line"><span style="color:#A6ACCD;">     //由于设置了writable为false，所以o.a=2这个语句会静默失效</span></span>
<span class="line"><span style="color:#A6ACCD;">     o.a = 2;</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(o.a);//1</span></span>
<span class="line"><span style="color:#A6ACCD;">     Object.defineProperty(o,&#39;a&#39;,{</span></span>
<span class="line"><span style="color:#A6ACCD;">         writable:true</span></span>
<span class="line"><span style="color:#A6ACCD;">     });</span></span>
<span class="line"><span style="color:#A6ACCD;">     //由于writable设置为true，所以o.a可以被修改为2</span></span>
<span class="line"><span style="color:#A6ACCD;">     o.a = 2;</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(o.a);//2</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>在严格模式下通过赋值语句为writable为false的属性赋值，会提示类型错误TypeError</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     &#39;use strict&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">     var o = {a:1};</span></span>
<span class="line"><span style="color:#A6ACCD;">     Object.defineProperty(o,&#39;a&#39;,{</span></span>
<span class="line"><span style="color:#A6ACCD;">         writable:false</span></span>
<span class="line"><span style="color:#A6ACCD;">     });</span></span>
<span class="line"><span style="color:#A6ACCD;">     //Uncaught TypeError: Cannot assign to read only property &#39;a&#39; of object &#39;#&lt;Object&gt;&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">     o.a = 2;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>[注意]设置writable:false后，通过Object.defineProperty()方法改变属性value的值不会受影响，因为这也意味着在重置writable的属性值为false</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     var o = {a:1};</span></span>
<span class="line"><span style="color:#A6ACCD;">     Object.defineProperty(o,&#39;a&#39;,{</span></span>
<span class="line"><span style="color:#A6ACCD;">         writable:false</span></span>
<span class="line"><span style="color:#A6ACCD;">     });</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(o.a);//1</span></span>
<span class="line"><span style="color:#A6ACCD;">     Object.defineProperty(o,&#39;a&#39;,{</span></span>
<span class="line"><span style="color:#A6ACCD;">         value:2</span></span>
<span class="line"><span style="color:#A6ACCD;">     });</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(o.a);//2</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><strong>可配置性(Configurable)</strong></p><p>可配置性决定是否可以使用delete删除属性，以及是否可以修改属性描述符的特性，默认值为true</p><p>【1】设置Configurable:false后，无法使用delete删除属性</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     var o = {a:1};</span></span>
<span class="line"><span style="color:#A6ACCD;">     Object.defineProperty(o,&#39;a&#39;,{</span></span>
<span class="line"><span style="color:#A6ACCD;">         configurable:false</span></span>
<span class="line"><span style="color:#A6ACCD;">     });</span></span>
<span class="line"><span style="color:#A6ACCD;">     delete o.a;//false</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(o.a);//1</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>在严格模式下删除为configurable为false的属性，会提示类型错误TypeError</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     &#39;use strict&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">     var o = {a:1};</span></span>
<span class="line"><span style="color:#A6ACCD;">     Object.defineProperty(o,&#39;a&#39;,{</span></span>
<span class="line"><span style="color:#A6ACCD;">         configurable:false</span></span>
<span class="line"><span style="color:#A6ACCD;">     });</span></span>
<span class="line"><span style="color:#A6ACCD;">     //Uncaught TypeError: Cannot delete property &#39;a&#39; of #&lt;Object&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">     delete o.a;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>[注意]使用var命令声明变量时，变量的configurable为false</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     var a = 1;</span></span>
<span class="line"><span style="color:#A6ACCD;">     //{value: 1, writable: true, enumerable: true, configurable: false}</span></span>
<span class="line"><span style="color:#A6ACCD;">     Object.getOwnPropertyDescriptor(this,&#39;a&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>【2】一般地，设置Configurable:false后，将无法再使用defineProperty()方法来修改属性描述符</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     var o = {a:1};</span></span>
<span class="line"><span style="color:#A6ACCD;">     Object.defineProperty(o,&#39;a&#39;,{</span></span>
<span class="line"><span style="color:#A6ACCD;">         configurable:false</span></span>
<span class="line"><span style="color:#A6ACCD;">     });</span></span>
<span class="line"><span style="color:#A6ACCD;">     //Uncaught TypeError: Cannot redefine property: a</span></span>
<span class="line"><span style="color:#A6ACCD;">     Object.defineProperty(o,&#39;a&#39;,{</span></span>
<span class="line"><span style="color:#A6ACCD;">         configurable:true</span></span>
<span class="line"><span style="color:#A6ACCD;">     });</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>有一个例外，设置Configurable:false后，只允许writable的状态从true变为false</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     var o = {a:1};</span></span>
<span class="line"><span style="color:#A6ACCD;">     Object.defineProperty(o,&#39;a&#39;,{</span></span>
<span class="line"><span style="color:#A6ACCD;">         configurable:false,</span></span>
<span class="line"><span style="color:#A6ACCD;">         writable:true</span></span>
<span class="line"><span style="color:#A6ACCD;">     });</span></span>
<span class="line"><span style="color:#A6ACCD;">     o.a = 2;</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(o.a);//2</span></span>
<span class="line"><span style="color:#A6ACCD;">     Object.defineProperty(o,&#39;a&#39;,{</span></span>
<span class="line"><span style="color:#A6ACCD;">         writable:false</span></span>
<span class="line"><span style="color:#A6ACCD;">     });</span></span>
<span class="line"><span style="color:#A6ACCD;">     //由于writable:false生效，对象a的o属性无法修改值，所以o.a=3的赋值语句静默失败</span></span>
<span class="line"><span style="color:#A6ACCD;">     o.a = 3;</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(o.a);//2</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><strong>可枚举性(Enumerable)</strong></p><p>可枚举性决定属性是否出现在对象的属性枚举中，具体来说，for-in循环、Object.keys方法、JSON.stringify方法是否会取到该属性</p><p>用户定义的普通属性默认是可枚举的，而原生继承的属性默认是不可枚举的</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     //由于原生继承的属性默认不可枚举，所以只取得自定义的属性a:1</span></span>
<span class="line"><span style="color:#A6ACCD;">     var o = {a:1};</span></span>
<span class="line"><span style="color:#A6ACCD;">     for(var i in o){</span></span>
<span class="line"><span style="color:#A6ACCD;">         console.log(o[i]);//1</span></span>
<span class="line"><span style="color:#A6ACCD;">     }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     //由于enumerable被设置为false，在for-in循环中a属性无法被枚举出来</span></span>
<span class="line"><span style="color:#A6ACCD;">     var o = {a:1};</span></span>
<span class="line"><span style="color:#A6ACCD;">     Object.defineProperty(o,&#39;a&#39;,{enumerable:false});</span></span>
<span class="line"><span style="color:#A6ACCD;">     for(var i in o){</span></span>
<span class="line"><span style="color:#A6ACCD;">         console.log(o[i]);//undefined</span></span>
<span class="line"><span style="color:#A6ACCD;">     }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>propertyIsEnumerable()</p><p>propertyIsEnumerable()方法用于判断对象的属性是否可枚举</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     var o = {a:1};</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(o.propertyIsEnumerable(&#39;a&#39;));//true</span></span>
<span class="line"><span style="color:#A6ACCD;">     Object.defineProperty(o,&#39;a&#39;,{enumerable:false});</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(o.propertyIsEnumerable(&#39;a&#39;));//false</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><strong>get和set</strong></p><p>get是一个隐藏函数，在获取属性值时调用。set也是一个隐藏函数，在设置属性值时调用，它们的默认值都是undefined。Object.definedProperty()中的get和set对应于对象字面量中get和set方法</p><p>[注意]getter和setter取代了数据属性中的value和writable属性</p><p>【1】给只设置get方法，没有设置set方法的对象赋值会静默失败，在严格模式下会报错</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     var o = {</span></span>
<span class="line"><span style="color:#A6ACCD;">         get a(){</span></span>
<span class="line"><span style="color:#A6ACCD;">             return 2;</span></span>
<span class="line"><span style="color:#A6ACCD;">         }</span></span>
<span class="line"><span style="color:#A6ACCD;">     }    </span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(o.a);//2</span></span>
<span class="line"><span style="color:#A6ACCD;">     //由于没有设置set方法，所以o.a=3的赋值语句会静默失败</span></span>
<span class="line"><span style="color:#A6ACCD;">     o.a = 3;</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(o.a);//2</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>在严格模式下，给没有设置set方法的访问器属性赋值会报错</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     &#39;use strict&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">     var o = {</span></span>
<span class="line"><span style="color:#A6ACCD;">         get a(){</span></span>
<span class="line"><span style="color:#A6ACCD;">             return 2;</span></span>
<span class="line"><span style="color:#A6ACCD;">         }</span></span>
<span class="line"><span style="color:#A6ACCD;">     }    </span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(o.a);//2</span></span>
<span class="line"><span style="color:#A6ACCD;">     //由于没有设置set方法，所以o.a=3的赋值语句会报错</span></span>
<span class="line"><span style="color:#A6ACCD;">     //Uncaught TypeError: Cannot set property a of #&lt;Object&gt; which has only a getter</span></span>
<span class="line"><span style="color:#A6ACCD;">     o.a = 3;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     &#39;use strict&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">     Object.defineProperty(o,&#39;a&#39;,{</span></span>
<span class="line"><span style="color:#A6ACCD;">         get: function(){</span></span>
<span class="line"><span style="color:#A6ACCD;">             return 2;</span></span>
<span class="line"><span style="color:#A6ACCD;">         }</span></span>
<span class="line"><span style="color:#A6ACCD;">     })</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(o.a);//2</span></span>
<span class="line"><span style="color:#A6ACCD;">     //由于没有设置set方法，所以o.a=3的赋值语句会报错</span></span>
<span class="line"><span style="color:#A6ACCD;">     //Uncaught TypeError: Cannot set property a of #&lt;Object&gt; which has only a getter</span></span>
<span class="line"><span style="color:#A6ACCD;">     o.a = 3;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>【2】只设置set方法，而不设置get方法，则对象属性值为undefined</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     var o = {</span></span>
<span class="line"><span style="color:#A6ACCD;">         set a(val){</span></span>
<span class="line"><span style="color:#A6ACCD;">             return 2;</span></span>
<span class="line"><span style="color:#A6ACCD;">         }</span></span>
<span class="line"><span style="color:#A6ACCD;">     }    </span></span>
<span class="line"><span style="color:#A6ACCD;">     o.a = 1;</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(o.a);//undefined</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     Object.defineProperty(o,&#39;a&#39;,{</span></span>
<span class="line"><span style="color:#A6ACCD;">         set: function(){</span></span>
<span class="line"><span style="color:#A6ACCD;">             return 2;</span></span>
<span class="line"><span style="color:#A6ACCD;">         }</span></span>
<span class="line"><span style="color:#A6ACCD;">     })</span></span>
<span class="line"><span style="color:#A6ACCD;">     o.a = 1;</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(o.a);//undefined</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>【3】一般地，set和get方法是成对出现的</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     var o ={</span></span>
<span class="line"><span style="color:#A6ACCD;">         get a(){</span></span>
<span class="line"><span style="color:#A6ACCD;">             return this._a;</span></span>
<span class="line"><span style="color:#A6ACCD;">         },</span></span>
<span class="line"><span style="color:#A6ACCD;">         set a(val){</span></span>
<span class="line"><span style="color:#A6ACCD;">             this._a = val*2;</span></span>
<span class="line"><span style="color:#A6ACCD;">         }</span></span>
<span class="line"><span style="color:#A6ACCD;">     }</span></span>
<span class="line"><span style="color:#A6ACCD;">     o.a = 1;</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(o.a);//2</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     Object.defineProperty(o,&#39;a&#39;,{</span></span>
<span class="line"><span style="color:#A6ACCD;">         get: function(){</span></span>
<span class="line"><span style="color:#A6ACCD;">             return this._a;</span></span>
<span class="line"><span style="color:#A6ACCD;">         },</span></span>
<span class="line"><span style="color:#A6ACCD;">         set :function(val){</span></span>
<span class="line"><span style="color:#A6ACCD;">             this._a = val*2;</span></span>
<span class="line"><span style="color:#A6ACCD;">         }</span></span>
<span class="line"><span style="color:#A6ACCD;">     })</span></span>
<span class="line"><span style="color:#A6ACCD;">     o.a = 1;</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(o.a);//2</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>对象状态</p><p>属性描述符只能用来控制对象中一个属性的状态。而如果要控制对象的状态，就要用到下面的6种方法</p><p><strong>Object.preventExtensions()(禁止扩展)</strong></p><p>Object.preventExtensions()方法使一个对象无法再添加新的属性，并返回当前对象</p><p><strong>Object.isExtensible()(测试扩展)</strong></p><p>Object.isExtensible()方法用来检测该对象是否可以扩展</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     var o = {a:1};</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(Object.isExtensible(o));//true</span></span>
<span class="line"><span style="color:#A6ACCD;">     o.b = 2;</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(o);//{a: 1, b: 2}</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(Object.preventExtensions(o));//{a: 1, b: 2}</span></span>
<span class="line"><span style="color:#A6ACCD;">     //由于对象o禁止扩展，所以该赋值语句静默失败</span></span>
<span class="line"><span style="color:#A6ACCD;">     o.c = 3;</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(Object.isExtensible(o));//false</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(o);//{a: 1, b: 2}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>在严格模式下，给禁止扩展的对象添加属性会报TypeError错误</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     &#39;use strict&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">     var o = {a:1};</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(Object.preventExtensions(o));//{a:1}</span></span>
<span class="line"><span style="color:#A6ACCD;">     //Uncaught TypeError: Can&#39;t add property c, object is not extensible</span></span>
<span class="line"><span style="color:#A6ACCD;">     o.c = 3;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Object.preventExtensions()方法并不改变对象中属性的描述符状态</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     var o = {a:1};</span></span>
<span class="line"><span style="color:#A6ACCD;">     //{value: 1, writable: true, enumerable: true, configurable: true}</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(Object.getOwnPropertyDescriptor(o,&#39;a&#39;));</span></span>
<span class="line"><span style="color:#A6ACCD;">     Object.preventExtensions(o);</span></span>
<span class="line"><span style="color:#A6ACCD;">     //{value: 1, writable: true, enumerable: true, configurable: true}</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(Object.getOwnPropertyDescriptor(o,&#39;a&#39;));</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><strong>Object.seal()(对象封印)</strong></p><p>对象封印又叫对象密封，使一个对象不可扩展并且所有属性不可配置，并返回当前对象</p><p><strong>Object.isSealed()(测试封印)</strong></p><p>Object.isSealed()方法用来检测该方法是否被封印</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     var o = {a:1,b:2};</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(Object.isSealed(o));//false</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(Object.seal(o));//{a:1,b:2}</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(Object.isSealed(o));//true</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(delete o.b);//false</span></span>
<span class="line"><span style="color:#A6ACCD;">     o.c = 3;</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(o);//{a:1,b:2}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>在严格模式下，删除旧属性或添加新属性都会报错</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     &#39;use strict&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">     var o = {a:1,b:2};</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(Object.seal(o));//{a:1,b:2}</span></span>
<span class="line"><span style="color:#A6ACCD;">     //Uncaught TypeError: Cannot delete property &#39;b&#39; of #&lt;Object&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">     delete o.b;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>这个方法实际上会在现有对象上调用Object.preventExtensions()方法，并把所有现有属性的configurable描述符置为false</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     var o = {a:1,b:2};</span></span>
<span class="line"><span style="color:#A6ACCD;">     //{value: 1, writable: true, enumerable: true, configurable: true}</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(Object.getOwnPropertyDescriptor(o,&#39;a&#39;));</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(Object.seal(o));//{a:1,b:2}</span></span>
<span class="line"><span style="color:#A6ACCD;">     //{value: 1, writable: true, enumerable: true, configurable: false}</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(Object.getOwnPropertyDescriptor(o,&#39;a&#39;));</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><strong>Object.freeze()(对象冻结)</strong></p><p>Object.freeze()方法使一个对象不可扩展，不可配置，也不可改写，变成一个仅可以枚举的只读常量，并返回当前对象</p><p><strong>Object.isFrozen()(检测冻结)</strong></p><p>Object.isFrozen()方法用来检测一个对象是否被冻结</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     var o = {a:1,b:2};</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(Object.isFrozen(o));//false</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(Object.freeze(o));//{a:1,b:2}</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(Object.isFrozen(o));//true</span></span>
<span class="line"><span style="color:#A6ACCD;">     o.a = 3;</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(o);//{a:1,b:2}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>在严格模式下，删除旧属性、添加新属性、更改现有属性都会报错</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     &#39;use strict&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">     var o = {a:1,b:2};</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(Object.freeze(o));//{a:1,b:2}</span></span>
<span class="line"><span style="color:#A6ACCD;">     //Uncaught TypeError: Cannot assign to read only property &#39;a&#39; of object &#39;#&lt;Object&gt;&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">     o.a = 3;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>这个方法实际上会在现有对象上调用Object.seal()方法，并把所有现有属性的writable描述符置为false</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     var o = {a:1};</span></span>
<span class="line"><span style="color:#A6ACCD;">     //{value: 1, writable: true, enumerable: true, configurable: true}</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(Object.getOwnPropertyDescriptor(o,&#39;a&#39;));</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(Object.freeze(o));//{a:1}</span></span>
<span class="line"><span style="color:#A6ACCD;">     //{value: 1, writable: false, enumerable: true, configurable: false}</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(Object.getOwnPropertyDescriptor(o,&#39;a&#39;));</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h5 id="字符串扩展" tabindex="-1">字符串扩展 <a class="header-anchor" href="#字符串扩展" aria-hidden="true">#</a></h5><h6 id="string-prototype-padstart" tabindex="-1">String.prototype.padStart() <a class="header-anchor" href="#string-prototype-padstart" aria-hidden="true">#</a></h6><blockquote><p><strong><code>padStart()</code></strong> 方法用另一个字符串填充当前字符串(如果需要的话，会重复多次)，以便产生的字符串达到给定的长度。从当前字符串的左侧开始填充。</p></blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/padStart#%E8%AF%AD%E6%B3%95" target="_blank" rel="noreferrer">语法</a></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">str.padStart(targetLength [, padString])</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/padStart#%E5%8F%82%E6%95%B0" target="_blank" rel="noreferrer">参数</a></p><ul><li><p><code>targetLength</code></p><p>当前字符串需要填充到的目标长度。如果这个数值小于当前字符串的长度，则返回当前字符串本身。</p></li><li><p><code>padString</code> 可选</p><p>填充字符串。如果字符串太长，使填充后的字符串长度超过了目标长度，则只保留最左侧的部分，其他部分会被截断。此参数的默认值为 &quot; &quot;（U+0020）。</p></li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/padStart#%E8%BF%94%E5%9B%9E%E5%80%BC" target="_blank" rel="noreferrer">返回值</a></p><p>在原字符串开头填充指定的填充字符串直到目标长度所形成的新字符串。</p><p><strong>基本使用：</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     &#39;abc&#39;.padStart(10);         // &quot;       abc&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">     &#39;abc&#39;.padStart(10, &quot;foo&quot;);  // &quot;foofoofabc&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">     &#39;abc&#39;.padStart(6,&quot;123465&quot;); // &quot;123abc&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">     &#39;abc&#39;.padStart(8, &quot;0&quot;);     // &quot;00000abc&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">     &#39;abc&#39;.padStart(1);          // &quot;abc&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><strong>应用：</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">	// yyyy-mm-dd  2020-04-01</span></span>
<span class="line"><span style="color:#A6ACCD;">      const now = new Date()</span></span>
<span class="line"><span style="color:#A6ACCD;">      const year = now.getFullYear()</span></span>
<span class="line"><span style="color:#A6ACCD;">      console.log((now.getMonth() + 1));</span></span>
<span class="line"><span style="color:#A6ACCD;">      const month = new String(now.getMonth() + 1).padStart(2, &#39;0&#39;)   //0-11</span></span>
<span class="line"><span style="color:#A6ACCD;">      const day = new String(now.getDate()).padStart(2, &#39;0&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">      console.log(year + &#39;-&#39; + month + &#39;-&#39; + day)		</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h6 id="string-prototype-padend" tabindex="-1">String.prototype.padEnd() <a class="header-anchor" href="#string-prototype-padend" aria-hidden="true">#</a></h6><blockquote><p><strong><code>padEnd()</code></strong> 方法会用一个字符串填充当前字符串（如果需要的话则重复填充），返回填充后达到指定长度的字符串。从当前字符串的末尾（右侧）开始填充。</p></blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd#%E8%AF%AD%E6%B3%95" target="_blank" rel="noreferrer">语法</a></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">str.padEnd(targetLength [, padString])</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd#%E5%8F%82%E6%95%B0" target="_blank" rel="noreferrer">参数</a></p><ul><li><p><code>targetLength</code></p><p>当前字符串需要填充到的目标长度。如果这个数值小于当前字符串的长度，则返回当前字符串本身。</p></li><li><p><code>padString</code> 可选</p><p>填充字符串。如果字符串太长，使填充后的字符串长度超过了目标长度，则只保留最左侧的部分，其他部分会被截断。此参数的缺省值为 &quot; &quot;（U+0020）。</p></li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd#%E8%BF%94%E5%9B%9E%E5%80%BC" target="_blank" rel="noreferrer">返回值</a></p><p>在原字符串末尾填充指定的填充字符串直到目标长度所形成的新字符串。</p><p><strong>基本使用：</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     &#39;abc&#39;.padEnd(10);          // &quot;abc       &quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">     &#39;abc&#39;.padEnd(10, &quot;foo&quot;);   // &quot;abcfoofoof&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">     &#39;abc&#39;.padEnd(6, &quot;123456&quot;); // &quot;abc123&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">     &#39;abc&#39;.padEnd(1);           // &quot;abc&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><strong>应用：</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">	const tel = &#39;13138745417&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">	const newTel = tel.slice(-4).padStart(tel.length, &#39;*&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">	console.log(newTel)       // *******5417</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h6 id="字符串伪逗号" tabindex="-1">字符串伪逗号 <a class="header-anchor" href="#字符串伪逗号" aria-hidden="true">#</a></h6><blockquote><p>允许函数参数列表使用伪逗号，也就是我们一个对象中最后的属性其实是不能加逗号了的，但是这个新特性就允许加多一个逗号，平时开发注意即可</p></blockquote><h4 id="es9" tabindex="-1">ES9 <a class="header-anchor" href="#es9" aria-hidden="true">#</a></h4><h5 id="异步迭代" tabindex="-1">异步迭代 <a class="header-anchor" href="#异步迭代" aria-hidden="true">#</a></h5><blockquote><p>之前我们学的迭代器都是同步的，那么假设有异步的需要迭代呢？</p></blockquote><h6 id="symbol-asynciterator" tabindex="-1">Symbol.asyncIterator <a class="header-anchor" href="#symbol-asynciterator" aria-hidden="true">#</a></h6><blockquote><p>当我们给对象新设置这么一个属性，这个就是异步迭代器</p></blockquote><h6 id="for-await-of" tabindex="-1">for-await-of <a class="header-anchor" href="#for-await-of" aria-hidden="true">#</a></h6><blockquote><p>如果我们使用for...of遍历的话，那么会去使用同步的迭代器，</p><p>使用for-await-of遍历就会使用上面的异步迭代器Symbol.asyncIterator ，并且会等待每个返回的Promise状态变为resolved才继续迭代下一个，具体使用如下</p></blockquote><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">function getPromise(time) {</span></span>
<span class="line"><span style="color:#A6ACCD;">    return new Promise((resolve, reject) =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">        setTimeout(() =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">            resolve({</span></span>
<span class="line"><span style="color:#A6ACCD;">                value: time,</span></span>
<span class="line"><span style="color:#A6ACCD;">                done: false</span></span>
<span class="line"><span style="color:#A6ACCD;">            })</span></span>
<span class="line"><span style="color:#A6ACCD;">        }, time)</span></span>
<span class="line"><span style="color:#A6ACCD;">    })</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">const arr = [getPromise(1000), getPromise(2000), getPromise(3000)]</span></span>
<span class="line"><span style="color:#A6ACCD;">arr[Symbol.asyncIterator] = function () {</span></span>
<span class="line"><span style="color:#A6ACCD;">    let nextIndex = 0</span></span>
<span class="line"><span style="color:#A6ACCD;">    return {</span></span>
<span class="line"><span style="color:#A6ACCD;">        next() {</span></span>
<span class="line"><span style="color:#A6ACCD;">            return nextIndex &lt; arr.length ? arr[nextIndex++] :</span></span>
<span class="line"><span style="color:#A6ACCD;">                Promise.resolve({</span></span>
<span class="line"><span style="color:#A6ACCD;">                    value: undefined,</span></span>
<span class="line"><span style="color:#A6ACCD;">                    done: true</span></span>
<span class="line"><span style="color:#A6ACCD;">                })</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">async function test() {</span></span>
<span class="line"><span style="color:#A6ACCD;">    for await (let item of arr) {</span></span>
<span class="line"><span style="color:#A6ACCD;">        console.log(item)</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">test()</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h5 id="正则表达式扩展" tabindex="-1">正则表达式扩展 <a class="header-anchor" href="#正则表达式扩展" aria-hidden="true">#</a></h5><h6 id="dotall" tabindex="-1">dotAll <a class="header-anchor" href="#dotall" aria-hidden="true">#</a></h6><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">const reg1 = /./</span></span>
<span class="line"><span style="color:#A6ACCD;">const reg2 = /./s              //开启dotAll模式</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(reg1.test(&#39;\\n&#39;))   //false</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(reg2.test(&#39;\\n&#39;))   //true</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h5 id="对象扩展-1" tabindex="-1">对象扩展 <a class="header-anchor" href="#对象扩展-1" aria-hidden="true">#</a></h5><h6 id="rest参数" tabindex="-1">Rest参数 <a class="header-anchor" href="#rest参数" aria-hidden="true">#</a></h6><blockquote><p>用来合并数组是属于深拷贝，如果解析参数的话只能放置后边</p></blockquote><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">const {name, age, ...rest1} = {name: &#39;web&#39;, age: 18, sex: &#39;男&#39;,height: 1.7}</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(rest1)    // {sex: &#39;男&#39;, height: 1.7}</span></span>
<span class="line"><span style="color:#A6ACCD;">const [a,b,...rest2] = [1,2,3,4]</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(rest2)    // [3,4]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">const arr = [...[1,2],...[3,4]]</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(arr)      // [ 1, 2, 3, 4 ]</span></span>
<span class="line"><span style="color:#A6ACCD;">const obj = {...{name: &#39;web&#39;,age: 18}, ...{sex: &#39;男&#39;}}</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(obj)      // { name: &#39;web&#39;, age: 18, sex: &#39;男&#39; }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h5 id="promise扩展" tabindex="-1">Promise扩展 <a class="header-anchor" href="#promise扩展" aria-hidden="true">#</a></h5><h6 id="promise-prototype-finally" tabindex="-1">Promise.prototype.finally() <a class="header-anchor" href="#promise-prototype-finally" aria-hidden="true">#</a></h6><blockquote><p><code>finally()</code> 方法返回一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noreferrer"><code>Promise</code></a>。在promise结束时，无论结果是fulfilled或者是rejected，都会执行指定的回调函数。这为在<code>Promise</code>是否成功完成后都需要执行的代码提供了一种方式。</p><p>这避免了同样的语句需要在<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/then" target="_blank" rel="noreferrer"><code>then()</code></a>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch" target="_blank" rel="noreferrer"><code>catch()</code></a>中各写一次的情况。</p></blockquote><p>由于无法知道<code>promise</code>的最终状态，所以<code>finally</code>的回调函数中不接收任何参数，它仅用于无论最终结果如何都要执行的情况</p><h4 id="es10" tabindex="-1">ES10 <a class="header-anchor" href="#es10" aria-hidden="true">#</a></h4><h5 id="对象扩展-2" tabindex="-1">对象扩展 <a class="header-anchor" href="#对象扩展-2" aria-hidden="true">#</a></h5><h6 id="object-fromentries" tabindex="-1">Object.fromEntries() <a class="header-anchor" href="#object-fromentries" aria-hidden="true">#</a></h6><blockquote><p><code>Object.fromEntries()</code> 方法把键值对列表转换为一个对象。</p></blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries#%E8%AF%AD%E6%B3%95" target="_blank" rel="noreferrer">语法</a></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">Object.fromEntries(iterable);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries#%E5%8F%82%E6%95%B0" target="_blank" rel="noreferrer">参数</a></p><ul><li><p><code>iterable</code></p><p>类似 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noreferrer"><code>Array</code></a> 、 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map" target="_blank" rel="noreferrer"><code>Map</code></a> 或者其它实现了<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol" target="_blank" rel="noreferrer">可迭代协议</a>的可迭代对象。</p></li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries#%E8%BF%94%E5%9B%9E%E5%80%BC" target="_blank" rel="noreferrer">返回值</a></p><p>一个由该迭代对象条目提供对应属性的新对象。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries#%E6%8F%8F%E8%BF%B0" target="_blank" rel="noreferrer">描述</a></p><p><code>Object.fromEntries()</code> 方法接收一个键值对的列表参数，并返回一个带有这些键值对的新对象。这个迭代参数应该是一个能够实现<code>@@iterator</code>方法的的对象，返回一个迭代器对象。它生成一个具有两个元素的类数组的对象，第一个元素是将用作属性键的值，第二个元素是与该属性键关联的值。</p><p><code>Object.fromEntries()</code> 执行与 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/entries" target="_blank" rel="noreferrer"><code>Object.entries</code></a> 互逆的操作。</p><p>基本使用：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">     const obj = {</span></span>
<span class="line"><span style="color:#A6ACCD;">       name: &#39;imooc&#39;,</span></span>
<span class="line"><span style="color:#A6ACCD;">       course: &#39;es&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">     }</span></span>
<span class="line"><span style="color:#A6ACCD;">     const entries = Object.entries(obj)</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(entries);                          //[[&#39;name&#39;, &#39;imooc&#39;], [&#39;course&#39;, &#39;es&#39;]]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">     const fromEntries = Object.fromEntries(entries)</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(fromEntries);                      //{ name: &#39;imooc&#39;, course: &#39;es&#39; }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">     const map = new Map()</span></span>
<span class="line"><span style="color:#A6ACCD;">     map.set(&#39;name&#39;, &#39;imooc&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">     map.set(&#39;course&#39;, &#39;es&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(map);                              //Map(2) { &#39;name&#39; =&gt; &#39;imooc&#39;, &#39;course&#39; =&gt; &#39;es&#39; }</span></span>
<span class="line"><span style="color:#A6ACCD;">     const mapFromEntries = Object.fromEntries(map)</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(mapFromEntries);                   //{ name: &#39;imooc&#39;, course: &#39;es&#39; }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">     //应用一</span></span>
<span class="line"><span style="color:#A6ACCD;">     const course = {</span></span>
<span class="line"><span style="color:#A6ACCD;">       math: 80,</span></span>
<span class="line"><span style="color:#A6ACCD;">       english: 85,</span></span>
<span class="line"><span style="color:#A6ACCD;">       chinese: 90</span></span>
<span class="line"><span style="color:#A6ACCD;">     }</span></span>
<span class="line"><span style="color:#A6ACCD;">     const res = Object.entries(course).filter(([key, val]) =&gt; val &gt; 80)   </span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(res);                              //[ [ &#39;english&#39;, 85 ], [ &#39;chinese&#39;, 90 ] ]</span></span>
<span class="line"><span style="color:#A6ACCD;">     console.log(Object.fromEntries(res));          //{ english: 85, chinese: 90 }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h5 id="字符串扩展-1" tabindex="-1">字符串扩展 <a class="header-anchor" href="#字符串扩展-1" aria-hidden="true">#</a></h5><h6 id="string-prototype-trimright" tabindex="-1">String.prototype.trimRight() <a class="header-anchor" href="#string-prototype-trimright" aria-hidden="true">#</a></h6><blockquote><p><code>trimEnd() </code>方法从一个字符串的末端移除空白字符。trimRight() 是这个方法的别名。</p></blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/trimEnd#syntax" target="_blank" rel="noreferrer">语法</a></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">str.trimEnd();</span></span>
<span class="line"><span style="color:#A6ACCD;">str.trimRight();</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/trimEnd#%E8%BF%94%E5%9B%9E%E5%80%BC" target="_blank" rel="noreferrer">返回值</a></p><p>一个新字符串，表示从调用字串的末（右）端除去空白。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/trimEnd#description" target="_blank" rel="noreferrer">描述</a></p><p><code>trimEnd()</code> / <code>trimRight()</code>方法移除原字符串右端的连续空白符并返回，<code>trimEnd()</code> / <code>trimRight()</code>方法并不会直接修改原字符串本身。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/trimEnd#%E5%88%AB%E5%90%8D" target="_blank" rel="noreferrer">别名</a></p><p>为了与 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd" target="_blank" rel="noreferrer"><code>String.prototype.padEnd</code></a> 等函数保持一致，标准方法名称为<code>trimEnd</code>。 但是，出于Web兼容性原因，<code>trimRight</code>仍然是<code>trimEnd</code>的别名。 在某些引擎中，这意味着：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">String.prototype.trimRight.name === &quot;trimEnd&quot;;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Copy to Clipboard</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/trimEnd#examples" target="_blank" rel="noreferrer">示例</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/trimEnd#%E4%BD%BF%E7%94%A8trimend" target="_blank" rel="noreferrer">使用<code>trimEnd()</code></a></p><p>下面的例子输出了小写的字符串&quot; foo&quot;:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">var str = &quot;   foo  &quot;;</span></span>
<span class="line"><span style="color:#A6ACCD;">alert(str.length); // 8</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">str = str.trimRight();  // 或写成str = str.trimEnd();</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(str.length); // 6</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(str);       // &#39;   foo&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h6 id="string-prototype-trimstart" tabindex="-1">String.prototype.trimStart() <a class="header-anchor" href="#string-prototype-trimstart" aria-hidden="true">#</a></h6><blockquote><p><strong><code>trimStart()</code></strong> 方法从字符串的开头删除空格。<code>trimLeft()</code> 是此方法的别名。</p></blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/trimStart#%E8%AF%AD%E6%B3%95" target="_blank" rel="noreferrer">语法</a></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">str.trimStart();</span></span>
<span class="line"><span style="color:#A6ACCD;">str.trimLeft();</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/trimStart#%E8%BF%94%E5%9B%9E%E5%80%BC" target="_blank" rel="noreferrer">返回值</a></p><p>一个新字符串，表示从其开头（左端）除去空格的调用字符串。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/trimStart#%E6%8F%8F%E8%BF%B0" target="_blank" rel="noreferrer">描述</a></p><p><code>trimStart()</code> / <code>trimLeft()</code> 方法移除原字符串左端的连续空白符并返回一个新字符串，并不会直接修改原字符串本身。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/trimStart#%E5%88%AB%E5%90%8D" target="_blank" rel="noreferrer">别名</a></p><p>为了与 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/padStart" target="_blank" rel="noreferrer"><code>String.prototype.padStart</code></a> 等函数保持一致，标准方法名称为<code>trimStart</code>。 但是，出于 Web 兼容性原因，<code>trimLeft</code> 仍然是 <code>trimStart</code> 的别名。在某些引擎中，这意味着：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">String.prototype.trimLeft.name === &quot;trimStart&quot;;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Copy to Clipboard</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/trimStart#%E7%A4%BA%E4%BE%8B" target="_blank" rel="noreferrer">示例</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/trimStart#%E4%BD%BF%E7%94%A8_trimstart" target="_blank" rel="noreferrer">使用 <code>trimStart()</code></a></p><p>下面的例子输出了小写的字符串 <code>&quot;foo &quot;</code>：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">var str = &quot;   foo  &quot;;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(str.length); // 8</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">str = str.trimStart()    // 等同于 str = str.trimLeft();</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(str.length); // 5</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(str);        // &quot;foo  &quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h6 id="array-prototype-flat" tabindex="-1">Array.prototype.flat() <a class="header-anchor" href="#array-prototype-flat" aria-hidden="true">#</a></h6><blockquote><p><code>flat()</code> 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。</p></blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flat#%E8%AF%AD%E6%B3%95" target="_blank" rel="noreferrer">语法</a></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">var newArray = arr.flat([depth])</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flat#%E5%8F%82%E6%95%B0" target="_blank" rel="noreferrer">参数</a></p><ul><li><p><code>depth</code> 可选</p><p>指定要提取嵌套数组的结构深度，默认值为 1。</p></li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flat#%E8%BF%94%E5%9B%9E%E5%80%BC" target="_blank" rel="noreferrer">返回值</a></p><p>一个包含将数组与子数组中所有元素的新数组。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flat#%E7%A4%BA%E4%BE%8B" target="_blank" rel="noreferrer">示例</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flat#%E6%89%81%E5%B9%B3%E5%8C%96%E5%B5%8C%E5%A5%97%E6%95%B0%E7%BB%84" target="_blank" rel="noreferrer">扁平化嵌套数组</a></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">var arr1 = [1, 2, [3, 4]];</span></span>
<span class="line"><span style="color:#A6ACCD;">arr1.flat();</span></span>
<span class="line"><span style="color:#A6ACCD;">// [1, 2, 3, 4]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">var arr2 = [1, 2, [3, 4, [5, 6]]];</span></span>
<span class="line"><span style="color:#A6ACCD;">arr2.flat();</span></span>
<span class="line"><span style="color:#A6ACCD;">// [1, 2, 3, 4, [5, 6]]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">var arr3 = [1, 2, [3, 4, [5, 6]]];</span></span>
<span class="line"><span style="color:#A6ACCD;">arr3.flat(2);</span></span>
<span class="line"><span style="color:#A6ACCD;">// [1, 2, 3, 4, 5, 6]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">//使用 Infinity，可展开任意深度的嵌套数组</span></span>
<span class="line"><span style="color:#A6ACCD;">var arr4 = [1, 2, [3, 4, [5, 6, [7, 8, [9, 10]]]]];</span></span>
<span class="line"><span style="color:#A6ACCD;">arr4.flat(Infinity);</span></span>
<span class="line"><span style="color:#A6ACCD;">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flat#%E6%89%81%E5%B9%B3%E5%8C%96%E4%B8%8E%E6%95%B0%E7%BB%84%E7%A9%BA%E9%A1%B9" target="_blank" rel="noreferrer">扁平化与数组空项</a></p><p><code>flat()</code> 方法会移除数组中的空项:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">var arr4 = [1, 2, , 4, 5];</span></span>
<span class="line"><span style="color:#A6ACCD;">arr4.flat();</span></span>
<span class="line"><span style="color:#A6ACCD;">// [1, 2, 4, 5]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flat#%E6%9B%BF%E4%BB%A3%E6%96%B9%E6%A1%88" target="_blank" rel="noreferrer">替代方案</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flat#%E4%BD%BF%E7%94%A8_reduce_%E4%B8%8E_concat" target="_blank" rel="noreferrer">使用 <code>reduce</code> 与 <code>concat</code></a></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">var arr = [1, 2, [3, 4]];</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// 展开一层数组</span></span>
<span class="line"><span style="color:#A6ACCD;">arr.flat();</span></span>
<span class="line"><span style="color:#A6ACCD;">// 等效于</span></span>
<span class="line"><span style="color:#A6ACCD;">arr.reduce((acc, val) =&gt; acc.concat(val), []);</span></span>
<span class="line"><span style="color:#A6ACCD;">// [1, 2, 3, 4]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// 使用扩展运算符 ...</span></span>
<span class="line"><span style="color:#A6ACCD;">const flattened = arr =&gt; [].concat(...arr);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h6 id="array-prototype-flatmap" tabindex="-1">Array.prototype.flatMap() <a class="header-anchor" href="#array-prototype-flatmap" aria-hidden="true">#</a></h6><blockquote><p><code>flatMap()</code> 方法首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。它与 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="noreferrer">map</a> 连着深度值为1的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat" target="_blank" rel="noreferrer">flat</a> 几乎相同，但 <code>flatMap</code> 通常在合并成一种方法的效率稍微高一些。</p></blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap#%E5%8F%82%E6%95%B0" target="_blank" rel="noreferrer">参数</a></p><ul><li><p><code>callback</code></p><p>可以生成一个新数组中的元素的函数，可以传入三个参数：<code>currentValue</code>当前正在数组中处理的元素<code>index</code>可选可选的。数组中正在处理的当前元素的索引。<code>array</code>可选可选的。被调用的 <code>map</code> 数组</p></li><li><p><code>thisArg</code>可选</p><p>可选的。执行 <code>callback</code> 函数时 使用的<code>this</code> 值。</p></li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap#%E8%BF%94%E5%9B%9E%E5%80%BC" target="_blank" rel="noreferrer">返回值</a></p><p>一个新的数组，其中每个元素都是回调函数的结果，并且结构深度 <code>depth</code> 值为1。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap#%E6%8F%8F%E8%BF%B0" target="_blank" rel="noreferrer">描述</a></p><p>有关回调函数的详细描述，请参见 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="noreferrer"><code>Array.prototype.map()</code></a> 。 <code>flatMap</code> 方法与 <code>map</code> 方法和深度depth为1的 <code>flat</code> 几乎相同.</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap#%E7%A4%BA%E4%BE%8B" target="_blank" rel="noreferrer">示例</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap#map_%E4%B8%8E_flatmap" target="_blank" rel="noreferrer"><code>map()</code> 与 <code>flatMap()</code></a></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">var arr1 = [1, 2, 3, 4];</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">arr1.map(x =&gt; [x * 2]);</span></span>
<span class="line"><span style="color:#A6ACCD;">// [[2], [4], [6], [8]]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">arr1.flatMap(x =&gt; [x * 2]);</span></span>
<span class="line"><span style="color:#A6ACCD;">// [2, 4, 6, 8]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// only one level is flattened</span></span>
<span class="line"><span style="color:#A6ACCD;">arr1.flatMap(x =&gt; [[x * 2]]);</span></span>
<span class="line"><span style="color:#A6ACCD;">// [[2], [4], [6], [8]]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>虽然上面的代码使用 map 和 flatMap 好像都可以，但这只能展示如何使用 flatMap。</p><p>所以，为了更好的展示 flatMap 的作用，下面我们将包含几句话的数组拆分成单个词组成的新数组。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">let arr1 = [&quot;it&#39;s Sunny in&quot;, &quot;&quot;, &quot;California&quot;];</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">arr1.map(x =&gt; x.split(&quot; &quot;));</span></span>
<span class="line"><span style="color:#A6ACCD;">// [[&quot;it&#39;s&quot;,&quot;Sunny&quot;,&quot;in&quot;],[&quot;&quot;],[&quot;California&quot;]]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">arr1.flatMap(x =&gt; x.split(&quot; &quot;));</span></span>
<span class="line"><span style="color:#A6ACCD;">// [&quot;it&#39;s&quot;,&quot;Sunny&quot;,&quot;in&quot;, &quot;&quot;, &quot;California&quot;]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>注意，输出列表长度可以不同于输入列表长度。</p><h5 id="修订function-prototype-tostring" tabindex="-1">修订Function.prototype.toString() <a class="header-anchor" href="#修订function-prototype-tostring" aria-hidden="true">#</a></h5><blockquote><p>返回源代码中的实际文本片段，旧的标准不会返回函数的注释和空格这些，但是ES10标准会原封不动的返回</p></blockquote><h5 id="可选的catch-binding" tabindex="-1">可选的Catch Binding <a class="header-anchor" href="#可选的catch-binding" aria-hidden="true">#</a></h5><blockquote><p>可省略catch绑定的参数</p></blockquote><p>这是传统的写法，但代码实际运行过程中，我们有时候并不需要把错误输出出来，那么我们就可以不给catch传参数了</p><p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210829003349.png" alt="image-20210829003349014"></p><p>简洁的新写法：</p><p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210829003638.png" alt=""></p><h4 id="es11" tabindex="-1">ES11 <a class="header-anchor" href="#es11" aria-hidden="true">#</a></h4><h5 id="字符串扩展-2" tabindex="-1">字符串扩展 <a class="header-anchor" href="#字符串扩展-2" aria-hidden="true">#</a></h5><h6 id="string-prototype-matchall" tabindex="-1">String.prototype.matchAll() <a class="header-anchor" href="#string-prototype-matchall" aria-hidden="true">#</a></h6><blockquote><p><strong><code>matchAll()</code></strong> 方法返回一个包含所有匹配正则表达式的结果及分组捕获组的迭代器。</p></blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll#%E8%AF%AD%E6%B3%95" target="_blank" rel="noreferrer">语法</a></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">str.matchAll(regexp)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll#%E5%8F%82%E6%95%B0" target="_blank" rel="noreferrer">参数</a></p><ul><li><p><code>regexp</code></p><p>正则表达式对象。如果所传参数不是一个正则表达式对象，则会隐式地使用 <code>new RegExp(obj)</code> 将其转换为一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/RegExp" target="_blank" rel="noreferrer"><code>RegExp</code></a> 。</p><p><code>RegExp</code>必须是设置了全局模式<code>g</code>的形式，否则会抛出异常<code>TypeError</code>。</p></li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll#%E8%BF%94%E5%9B%9E%E5%80%BC" target="_blank" rel="noreferrer">返回值</a></p><p>一个迭代器（不可重用，结果耗尽需要再次调用方法，获取一个新的迭代器）。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll#%E4%BE%8B%E5%AD%90" target="_blank" rel="noreferrer">例子</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll#regexp.exec_%E5%92%8C_matchall" target="_blank" rel="noreferrer">Regexp.exec() 和 matchAll()</a></p><p>在 <code>matchAll</code> 出现之前，通过在循环中调用 <code>regexp.exec()</code> 来获取所有匹配项信息（regexp 需使用 <code>/g</code> 标志）：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">const regexp = RegExp(&#39;foo[a-z]*&#39;,&#39;g&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;">const str = &#39;table football, foosball&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">let match;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">while ((match = regexp.exec(str)) !== null) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  console.log(\`Found \${match[0]} start=\${match.index} end=\${regexp.lastIndex}.\`);</span></span>
<span class="line"><span style="color:#A6ACCD;">  // expected output: &quot;Found football start=6 end=14.&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  // expected output: &quot;Found foosball start=16 end=24.&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>如果使用 <code>matchAll</code> ，就可以不必使用 while 循环加 exec 方式（且正则表达式需使用 <code>/g</code> 标志）。使用 <code>matchAll</code> 会得到一个迭代器的返回值，配合 <code>for...of</code>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax" target="_blank" rel="noreferrer">array spread</a>, 或者 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from" target="_blank" rel="noreferrer"><code>Array.from()</code></a> 可以更方便实现功能：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">const regexp = RegExp(&#39;foo[a-z]*&#39;,&#39;g&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;">const str = &#39;table football, foosball&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">const matches = str.matchAll(regexp);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">for (const match of matches) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  console.log(\`Found \${match[0]} start=\${match.index} end=\${match.index + match[0].length}.\`);</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">// expected output: &quot;Found football start=6 end=14.&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">// expected output: &quot;Found foosball start=16 end=24.&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// matches iterator is exhausted after the for..of iteration</span></span>
<span class="line"><span style="color:#A6ACCD;">// Call matchAll again to create a new iterator</span></span>
<span class="line"><span style="color:#A6ACCD;">Array.from(str.matchAll(regexp), m =&gt; m[0]);</span></span>
<span class="line"><span style="color:#A6ACCD;">// Array [ &quot;football&quot;, &quot;foosball&quot; ]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>如果没有 <code>/g</code> 标志，<code>matchAll</code> 会抛出异常。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">const regexp = RegExp(&#39;[a-c]&#39;,&#39;&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;">const str = &#39;abc&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">Array.from(str.matchAll(regexp), m =&gt; m[0]);</span></span>
<span class="line"><span style="color:#A6ACCD;">// TypeError: String.prototype.matchAll called with a non-global RegExp argument</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><code>matchAll</code> 内部做了一个 regexp 的复制，所以不像 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec" target="_blank" rel="noreferrer">regexp.exec</a>, <code>lastIndex</code> 在字符串扫描时不会改变。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">const regexp = RegExp(&#39;[a-c]&#39;,&#39;g&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;">regexp.lastIndex = 1;</span></span>
<span class="line"><span style="color:#A6ACCD;">const str = &#39;abc&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">Array.from(str.matchAll(regexp), m =&gt; \`\${regexp.lastIndex} \${m[0]}\`);</span></span>
<span class="line"><span style="color:#A6ACCD;">// Array [ &quot;1 b&quot;, &quot;1 c&quot; ]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll#%E6%8D%95%E8%8E%B7%E7%BB%84%E7%9A%84%E6%9B%B4%E4%BD%B3%E9%80%94%E5%BE%84" target="_blank" rel="noreferrer">捕获组的更佳途径</a></p><p><code>matchAll</code> 的另外一个亮点是更好地获取捕获组。因为当使用 <code>match()</code> 和 <code>/g</code> 标志方式获取匹配信息时，捕获组会被忽略：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">var regexp = /t(e)(st(\\d?))/g;</span></span>
<span class="line"><span style="color:#A6ACCD;">var str = &#39;test1test2&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">str.match(regexp);</span></span>
<span class="line"><span style="color:#A6ACCD;">// Array [&#39;test1&#39;, &#39;test2&#39;]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>使用 <code>matchAll</code> 可以通过如下方式获取分组捕获:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">let array = [...str.matchAll(regexp)];</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">array[0];</span></span>
<span class="line"><span style="color:#A6ACCD;">// [&#39;test1&#39;, &#39;e&#39;, &#39;st1&#39;, &#39;1&#39;, index: 0, input: &#39;test1test2&#39;, length: 4]</span></span>
<span class="line"><span style="color:#A6ACCD;">array[1];</span></span>
<span class="line"><span style="color:#A6ACCD;">// [&#39;test2&#39;, &#39;e&#39;, &#39;st2&#39;, &#39;2&#39;, index: 5, input: &#39;test1test2&#39;, length: 4]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h5 id="dynamic-import-动态导入" tabindex="-1">Dynamic import()动态导入 <a class="header-anchor" href="#dynamic-import-动态导入" aria-hidden="true">#</a></h5><blockquote><p>按需import提案几年前就已提出，如今终于能进入ES正式规范。这里个人理解成“按需”更为贴切。现代前端打包资源越来越大，打包成几M的JS资源已成常态，</p><p>而往往前端应用初始化时根本不需要全量加载逻辑资源，为了首屏渲染速度更快，很多时候都是按需加载，比如懒加载图片等。而这些按需执行逻辑资源都体现在某一个事件回调中去加载。</p></blockquote><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">// 点击按钮才去加载ajax模块</span></span>
<span class="line"><span style="color:#A6ACCD;">const oBtn = document.querySelector(&#39;#btn&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">oBtn.addEventListener(&#39;click&#39;, () =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">    import(&#39;./ajax&#39;).then(mod =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">        mod.get(&#39;static/a.json&#39;, res =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">            console.log(res)</span></span>
<span class="line"><span style="color:#A6ACCD;">        })</span></span>
<span class="line"><span style="color:#A6ACCD;">    })</span></span>
<span class="line"><span style="color:#A6ACCD;">})</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>当然，<code>webpack</code>目前已很好的支持了该特性。</p><p>Vue 中组件按需加载：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">const routes = [</span></span>
<span class="line"><span style="color:#A6ACCD;">  {</span></span>
<span class="line"><span style="color:#A6ACCD;">    path: &#39;/&#39;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    name: &#39;User&#39;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    component: User</span></span>
<span class="line"><span style="color:#A6ACCD;">  }, {</span></span>
<span class="line"><span style="color:#A6ACCD;">    path: &#39;/upload&#39;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    name: &#39;Upload&#39;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    component: () =&gt; import(&#39;../views/Upload.vue&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>当我们build打包项目后，会把不同路由的页面分成一个个JS文件，按需请求加载</p><p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210830011340.png" alt="image-20210830011340066"></p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/img20210830005506.png" alt="image-20210830005505572" style="zoom:67%;"><h5 id="bigint" tabindex="-1">BigInt <a class="header-anchor" href="#bigint" aria-hidden="true">#</a></h5><blockquote><p><code>BigInt</code>数据类型的目的是比<code>Number</code>数据类型支持的范围更大的整数值。在对大整数执行数学运算时，以任意精度表示整数的能力尤为重要。使用<code>BigInt</code>，整数溢出将不再是问题。</p><p>此外，可以安全地使用更加准确时间戳，大整数ID等，而无需使用变通方法。 <code>BigInt</code>目前是第3阶段提案， 一旦添加到规范中，它就是JS 第二个数字数据类型，也将是 JS 第8种基本数据类型：</p><ul><li>Boolean</li><li>Null</li><li>Undefined</li><li>Number</li><li>BigInt</li><li>String</li><li>Symbol</li><li>Object</li></ul><p>在节中，咱们将详细介绍<code>BigInt</code>，看看它如何解决使用<code>Number</code>类型的限制。</p></blockquote><p><strong>问题</strong></p><p>对于学过其他语言的程序员来说，JS中缺少显式整数类型常常令人困惑。许多编程语言支持多种数字类型，如浮点型、双精度型、整数型和双精度型，但JS却不是这样。在JS中，按照<a href="https://link.segmentfault.com/?url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FIEEE_754-2008_revision" target="_blank" rel="noreferrer">IEEE 754-2008</a>标准的定义，所有数字都以<a href="https://link.segmentfault.com/?url=http%3A%2F%2Fen.wikipedia.org%2Fwiki%2FDouble_precision_floating-point_format" target="_blank" rel="noreferrer">双精度64位浮点</a>格式表示。</p><p>在此标准下，无法精确表示的非常大的整数将自动四舍五入。确切地说，JS 中的<code>Number</code>类型只能安全地表示<code>-9007199254740991 (-(2^53-1))</code> 和<code>9007199254740991(2^53-1)</code>之间的整数，任何超出此范围的整数值都可能失去精度。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">9999999999999999</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// → 10000000000000000</span></span>
<span class="line"></span></code></pre></div><p>该整数大于JS Number 类型所能表示的最大整数，因此，它被四舍五入的。意外四舍五入会损害程序的可靠性和安全性。这是另一个例子：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 注意最后一位的数字</span></span>
<span class="line"><span style="color:#F78C6C;">9007199254740992</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">9007199254740993</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// → true</span></span>
<span class="line"></span></code></pre></div><p>JS 提供<code>Number.MAX_SAFE_INTEGER</code>常量来表示 最大安全整数，<code>Number.MIN_SAFE_INTEGER</code>常量表示最小安全整数：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> minInt </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Number</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">MIN_SAFE_INTEGER</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(minInt)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">         </span><span style="color:#676E95;font-style:italic;">// → -9007199254740991</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(minInt </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">     </span><span style="color:#676E95;font-style:italic;">// → -9007199254740996</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// notice how this outputs the same value as above</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(minInt </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">     </span><span style="color:#676E95;font-style:italic;">// → -9007199254740996</span></span>
<span class="line"></span></code></pre></div><p><strong>解决方案</strong></p><p>为了解决这些限制，一些JS开发人员使用字符串类型表示大整数。 例如，<a href="https://link.segmentfault.com/?url=https%3A%2F%2Fdeveloper.twitter.com%2Fen%2Fdocs%2Fbasics%2Ftwitter-ids" target="_blank" rel="noreferrer">Twitter API</a> 在使用 JSON 进行响应时会向对象添加字符串版本的 ID。 此外，还开发了许多库，例如 <a href="https://link.segmentfault.com/?url=https%3A%2F%2Fgithub.com%2FMikeMcl%2Fbignumber.js%2F" target="_blank" rel="noreferrer">bignumber.js</a>，以便更容易地处理大整数。</p><p>使用BigInt，应用程序不再需要变通方法或库来安全地表示<code>Number.MAX_SAFE_INTEGER</code>和<code>Number.Min_SAFE_INTEGER</code>之外的整数。 现在可以在标准JS中执行对大整数的算术运算，而不会有精度损失的风险。</p><p>要创建<code>BigInt</code>，只需在整数的末尾追加n即可。比较:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">9007199254740995</span><span style="color:#C792EA;">n</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// → 9007199254740995n</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">9007199254740995</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">     </span><span style="color:#676E95;font-style:italic;">// → 9007199254740996</span></span>
<span class="line"></span></code></pre></div><p>或者，可以调用<code>BigInt()</code>构造函数</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#82AAFF;">BigInt</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">9007199254740995</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// → 9007199254740995n</span></span>
<span class="line"></span></code></pre></div><p><code>BigInt</code>文字也可以用二进制、八进制或十六进制表示</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// binary</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0b100000000000000000000000000000000000000000000000000011</span><span style="color:#C792EA;">n</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// → 9007199254740995n</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// hex</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0x20000000000003</span><span style="color:#C792EA;">n</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// → 9007199254740995n</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// octal</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0o400000000000000003</span><span style="color:#C792EA;">n</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// → 9007199254740995n</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// note that legacy octal syntax is not supported</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0400000000000000003</span><span style="color:#C792EA;">n</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// → SyntaxError</span></span>
<span class="line"></span></code></pre></div><p>请记住，不能使用严格相等运算符将<code>BigInt</code>与常规数字进行比较，因为它们的类型不同：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">10</span><span style="color:#C792EA;">n</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// → false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#C792EA;">n</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// → bigint</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">     </span><span style="color:#676E95;font-style:italic;">// → number</span></span>
<span class="line"></span></code></pre></div><p>相反，可以使用等号运算符，它在处理操作数之前执行隐式类型转换</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">10</span><span style="color:#C792EA;">n</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// → true</span></span>
<span class="line"></span></code></pre></div><p>除一元加号(<code>+</code>)运算符外，所有算术运算符都可用于<code>BigInt</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#F78C6C;">10</span><span style="color:#C792EA;">n</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20</span><span style="color:#C792EA;">n</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// → 30n</span></span>
<span class="line"><span style="color:#F78C6C;">10</span><span style="color:#C792EA;">n</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20</span><span style="color:#C792EA;">n</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// → -10n</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">10</span><span style="color:#C792EA;">n</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">         </span><span style="color:#676E95;font-style:italic;">// → TypeError: Cannot convert a BigInt value to a number</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">10</span><span style="color:#C792EA;">n</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">         </span><span style="color:#676E95;font-style:italic;">// → -10n</span></span>
<span class="line"><span style="color:#F78C6C;">10</span><span style="color:#C792EA;">n</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20</span><span style="color:#C792EA;">n</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// → 200n</span></span>
<span class="line"><span style="color:#F78C6C;">20</span><span style="color:#C792EA;">n</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#C792EA;">n</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// → 2n</span></span>
<span class="line"><span style="color:#F78C6C;">23</span><span style="color:#C792EA;">n</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#C792EA;">n</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// → 3n</span></span>
<span class="line"><span style="color:#F78C6C;">10</span><span style="color:#C792EA;">n</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">**</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#C792EA;">n</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// → 1000n</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#C792EA;">n</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">          </span><span style="color:#676E95;font-style:italic;">// → 11n</span></span>
<span class="line"><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">          </span><span style="color:#676E95;font-style:italic;">// → 9n</span></span>
<span class="line"></span></code></pre></div><p>不支持一元加号（<code>+</code>）运算符的原因是某些程序可能依赖于<code>+</code>始终生成<code>Number</code>的不变量，或者抛出异常。 更改<code>+</code>的行为也会破坏<code>asm.js</code>代码。</p><p>当然，与<code>BigInt</code>操作数一起使用时，算术运算符应该返回<code>BigInt</code>值。因此，除法(<code>/</code>)运算符的结果会自动向下舍入到最接近的整数。例如:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#F78C6C;">25</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">      </span><span style="color:#676E95;font-style:italic;">// → 2.5</span></span>
<span class="line"><span style="color:#F78C6C;">25</span><span style="color:#C792EA;">n</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#C792EA;">n</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// → 2n</span></span>
<span class="line"></span></code></pre></div><p><strong>隐式类型转换</strong></p><p>因为隐式类型转换可能丢失信息，所以不允许在<code>bigint</code>和 <code>Number</code> 之间进行混合操作。当混合使用大整数和浮点数时，结果值可能无法由<code>BigInt</code>或<code>Number</code>精确表示。思考下面的例子：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">9007199254740992</span><span style="color:#C792EA;">n</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#C792EA;">n</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.5</span></span>
<span class="line"></span></code></pre></div><p>这个表达式的结果超出了<code>BigInt</code>和<code>Number</code>的范围。小数部分的<code>Number</code>不能精确地转换为<code>BigInt</code>。大于<code>2^53</code>的<code>BigInt</code>不能准确地转换为数字。</p><p>由于这个限制，不可能对混合使用<code>Number</code>和<code>BigInt</code>操作数执行算术操作。还不能将<code>BigInt</code>传递给Web api和内置的 JS 函数，这些函数需要一个 <code>Number</code> 类型的数字。尝试这样做会报<code>TypeError</code>错误</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#C792EA;">n</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// → TypeError</span></span>
<span class="line"><span style="color:#A6ACCD;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">max</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2</span><span style="color:#C792EA;">n</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#C792EA;">n</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">6</span><span style="color:#C792EA;">n</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// → TypeError</span></span>
<span class="line"></span></code></pre></div><p><strong>请注意</strong>，关系运算符不遵循此规则，如下例所示：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#F78C6C;">10</span><span style="color:#C792EA;">n</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// → true</span></span>
<span class="line"></span></code></pre></div><p>如果希望使用<code>BigInt</code>和<code>Number</code>执行算术计算，首先需要确定应该在哪个类型中执行该操作。为此，只需通过调用<code>Number()</code>或<code>BigInt()</code>来转换操作数：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#82AAFF;">BigInt</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#C792EA;">n</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// → 20n</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// or</span></span>
<span class="line"><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Number</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">10</span><span style="color:#C792EA;">n</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// → 20</span></span>
<span class="line"></span></code></pre></div><p>当 <code>Boolean</code> 类型与<code>BigInt</code> 类型相遇时，<code>BigInt</code>的处理方式与<code>Number</code>类似，换句话说，只要不是<code>0n</code>，<code>BigInt</code>就被视为<code>truthy</code>的值：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#F78C6C;">5</span><span style="color:#C792EA;">n</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 这里代码块将被执行</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#F78C6C;">0</span><span style="color:#C792EA;">n</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 这里代码块不会执行</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>排序<code>BigInts</code>和<code>Numbers</code>数组时，不会发生隐式类型转换：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">3</span><span style="color:#C792EA;">n</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#C792EA;">n</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#C792EA;">n</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sort</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// → [-1n, 0, 1n, 2, 3n, 4]</span></span>
<span class="line"></span></code></pre></div><p>位操作符如<code>|、&amp;、&lt;&lt;、&gt;&gt;</code>和<code>^</code>对<code>Bigint</code>的操作方式与<code>Number</code>类似。下面是一些例子</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#F78C6C;">90</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">115</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">      </span><span style="color:#676E95;font-style:italic;">// → 123</span></span>
<span class="line"><span style="color:#F78C6C;">90</span><span style="color:#C792EA;">n</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">115</span><span style="color:#C792EA;">n</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// → 123n</span></span>
<span class="line"><span style="color:#F78C6C;">90</span><span style="color:#C792EA;">n</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">115</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">     </span><span style="color:#676E95;font-style:italic;">// → TypeError</span></span>
<span class="line"></span></code></pre></div><p><strong>BigInt构造函数</strong></p><p>与其他基本类型一样，可以使用构造函数创建<code>BigInt</code>。传递给<code>BigInt()</code>的参数将自动转换为<code>BigInt</code>:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#82AAFF;">BigInt</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">10</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// → 10n</span></span>
<span class="line"><span style="color:#82AAFF;">BigInt</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">      </span><span style="color:#676E95;font-style:italic;">// → 10n</span></span>
<span class="line"><span style="color:#82AAFF;">BigInt</span><span style="color:#A6ACCD;">(</span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// → 1n</span></span>
<span class="line"></span></code></pre></div><p>无法转换的数据类型和值会引发异常:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#82AAFF;">BigInt</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">10.2</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">     </span><span style="color:#676E95;font-style:italic;">// → RangeError</span></span>
<span class="line"><span style="color:#82AAFF;">BigInt</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">     </span><span style="color:#676E95;font-style:italic;">// → TypeError</span></span>
<span class="line"><span style="color:#82AAFF;">BigInt</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">abc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// → SyntaxError</span></span>
<span class="line"></span></code></pre></div><p>可以直接对使用构造函数创建的<code>BigInt</code>执行算术操作</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#82AAFF;">BigInt</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#C792EA;">n</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// → 100n</span></span>
<span class="line"></span></code></pre></div><p>使用严格相等运算符的操作数时，使用构造函数创建的<code>Bigint</code>与常规<code>Bigint</code>的处理方式类似</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#82AAFF;">BigInt</span><span style="color:#A6ACCD;">(</span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#C792EA;">n</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// → true</span></span>
<span class="line"></span></code></pre></div><p><strong>库函数</strong></p><p>在撰写本文时，<code>Chrome +67</code> 和<code>Opera +54</code>完全支持<code>BigInt</code>数据类型。不幸的是，<code>Edge</code>和<code>Safari</code>还没有实现它。<code>Firefox</code>默认不支持BigInt，但是可以在<code>about:config</code>中将<code>javascript.options.bigint</code> 设置为<code>true</code>来开启它，最新支持的情况可在“<a href="https://link.segmentfault.com/?url=https%3A%2F%2Fcaniuse.com%2F%23search%3Dbigint" target="_blank" rel="noreferrer">Can I use</a>”上查看。</p><p>不幸的是，转换<code>BigInt</code>是一个极其复杂的过程，这会导致严重的运行时性能损失。直接polyfill <code>BigInt</code>也是不可能的，因为该提议改变了几个现有操作符的行为。目前，更好的选择是使用<a href="https://link.segmentfault.com/?url=https%3A%2F%2Fgithub.com%2FGoogleChromeLabs%2Fjsbi" target="_blank" rel="noreferrer">JSBI</a>库，它是<code>BigInt</code>提案的纯JS实现。</p><p>这个库提供了一个与原生<code>BigInt</code>行为完全相同的API。下面是如何使用JSBI：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> JSBI </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./jsbi.mjs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> b1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> JSBI</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">BigInt</span><span style="color:#A6ACCD;">(Number</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">MAX_SAFE_INTEGER)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> b2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> JSBI</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">BigInt</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">10</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> JSBI</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(b1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> b2)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">String</span><span style="color:#A6ACCD;">(result))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// → &#39;9007199254741001&#39;</span></span>
<span class="line"></span></code></pre></div><p>使用<code>JSBI</code>的一个优点是，一旦浏览器支持，就不需要重写代码。 相反，可以使用<code>babel</code>插件自动将JSBI代码编译为原生 <code>BigInt</code>代码。</p><p><strong>总结</strong></p><p><code>BigInt</code>是一种新的数据类型，用于当整数值大于<code>Number</code>数据类型支持的范围时。这种数据类型允许我们安全地对大整数执行算术操作，表示高分辨率的时间戳，使用大整数id，等等，而不需要使用库。</p><p>重要的是要记住，不能使用<code>Number</code>和<code>BigInt</code>操作数的混合执行算术运算，需要通过显式转换其中的一种类型。 此外，出于兼容性原因，不允许在<code>BigInt</code>上使用一元加号（<code>+</code>）运算符。</p><h5 id="promise-allsettled" tabindex="-1">Promise.allSettled() <a class="header-anchor" href="#promise-allsettled" aria-hidden="true">#</a></h5><blockquote><p>该<code>Promise.allSettled() </code>方法返回一个在所有给定的promise都已经<code>fulfilled</code>或<code>rejected</code>后的promise，并带有一个对象数组，每个对象表示对应的promise结果。</p><p>当您有多个彼此不依赖的异步任务成功完成时，或者您总是想知道每个<code>promise</code>的结果时，通常使用它。</p><p><code>这个方法解决了多个请求其中如果有失败的也可以单独处理，因为返回参数是每个对应的Promise，而不会报错触发catch,</code></p><p><code>如果是all()方法请求中有一个失败则直接触发catch，不会触发then</code></p><p>相比之下，<code>Promise.all()</code> 更适合彼此相互依赖或者在其中任何一个<code>reject</code>时立即结束。</p></blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled#%E5%8F%A5%E6%B3%95" target="_blank" rel="noreferrer">语法</a></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">Promise.allSettled(iterable);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled#%E5%8F%82%E6%95%B0" target="_blank" rel="noreferrer">参数</a></p><ul><li><p><code>iterable</code></p><p>一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols" target="_blank" rel="noreferrer">可迭代的</a>对象，例如<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noreferrer"><code>Array</code></a>，其中每个成员都是<code>Promise</code>。</p></li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled#%E8%BF%94%E5%9B%9E%E5%80%BC" target="_blank" rel="noreferrer">返回值</a></p><p>一旦所指定的 promises 集合中每一个 promise 已经完成，无论是成功的达成或被拒绝，<strong>未决议的</strong> <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noreferrer"><code>Promise</code></a>将被<strong>异步</strong>完成。那时，所返回的 promise 的处理器将传入一个数组作为输入，该数组包含原始 promises 集中每个 promise 的结果。</p><p>对于每个结果对象，都有一个 <code>status</code> 字符串。如果它的值为 <code>fulfilled</code>，则结果对象上存在一个 <code>value</code> 。如果值为 <code>rejected</code>，则存在一个 <code>reason</code> 。value（或 reason ）反映了每个 promise 决议（或拒绝）的值。</p><p><strong>基本使用：</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">const promise1 = Promise.resolve(3);</span></span>
<span class="line"><span style="color:#A6ACCD;">const promise2 = new Promise((resolve, reject) =&gt; setTimeout(reject, 100, &#39;foo&#39;));</span></span>
<span class="line"><span style="color:#A6ACCD;">const promises = [promise1, promise2];</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">Promise.allSettled(promises).</span></span>
<span class="line"><span style="color:#A6ACCD;">  then((results) =&gt; results.forEach((result) =&gt; console.log(result.status)));</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// expected output:</span></span>
<span class="line"><span style="color:#A6ACCD;">// &quot;fulfilled&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">// &quot;rejected&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h5 id="globalthis" tabindex="-1">globalThis <a class="header-anchor" href="#globalthis" aria-hidden="true">#</a></h5><blockquote><p><code>提供了一个标准的方式去获取不同环境下的全局对象</code></p><p>JavaScript 语言越来越被广泛地用于各种环境中。除了 Web 浏览器（这是 JavaScript 的最常见的宿主环境类型）之外，你还可以在服务器，智能手机甚至机器人硬件中运行 JavaScript 程序。</p><p>每个环境都有其自己的对象模型，并提供了不同的语法来访问全局对象。例如，在Web浏览器中，可以通过 <code>window</code>，<code>self</code> 或 <code>frames</code> 访问全局对象。但是在 Node.js 中，这些属性不存在，而你必须使用 <code>global</code>。在 Web Worker 中，只有 <code>self</code> 可用。</p><p>这些引用全局对象的不同方式使编写能够在多个环境中工作的可移植 JavaScript 代码变得非常困难。幸运的是，有一个<a href="https://link.zhihu.com/?target=https%3A//github.com/tc39/proposal-global" target="_blank" rel="noreferrer">正在开发中的提案</a>打算通过引入一个名为 <code>globalThis</code> 的标准属性来解决这个问题，该属性将在所有环境中可用。</p><p>在本节中，我们将首先研究流行的 JavaScript 环境中的全局对象，然后看看 <code>globalThis</code> 是如何提供一种统一的机制来访问它。</p></blockquote><p><strong>window</strong></p><p><code>window</code> 属性用于在浏览器环境中引用当前文档的全局对象。在代码的顶层，使用 <code>var</code> 关键字声明的变量将成为 <code>window</code> 的属性，并且可能够在代码中的任何位置访问：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">a)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">          </span><span style="color:#676E95;font-style:italic;">// → [10, 20]</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">a)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// → true</span></span>
<span class="line"></span></code></pre></div><p>通常在使用 <code>window</code> 的属性时，由于隐含引用的缘故不必直接引用 <code>window</code>。但是当有一个与全局变量同名的局部变量时，使用 <code>window</code> 是唯一的选择：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">   </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">           </span><span style="color:#676E95;font-style:italic;">// → 20</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">// → 10</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>如你所见，无论代码在什么作用域内运行，<code>window</code> 对于引用全局对象都非常有用。注意，\`\`window<code>实际上引用了 </code>window.window<code>。因此，</code>window.window === window\`。</p><p>除了标准的 JavaScript 属性和方法之外，<code>window</code> 对象还包含其他一些属性和方法，这些属性和方法使我们能够控制 Web 浏览器窗口以及文档本身。</p><p><strong>self</strong></p><p>Web Workers API没有 <code>window</code> 对象，因为它没有浏览上下文。相反，它提供了 <code>WorkerGlobalScope</code> 接口，其中包含通常由 <code>WorkerGlobalScope</code> 承载的数据。</p><p>为了访问 Web Workers 中的全局对象，我们需要使用 <code>self</code>，它是 <code>Window</code> 对象的 <code>window</code> 属性的同义词。与 <code>window</code> 类似，<code>self</code> 是对全局对象的引用，可用于显式引用：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// a web worker</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(self)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// =&gt; DedicatedWorkerGlobalScope {...}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">a)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">          </span><span style="color:#676E95;font-style:italic;">// → 10</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">a)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// → true</span></span>
<span class="line"></span></code></pre></div><p>在浏览器环境中，此代码将记录 <code>Window</code> 而不是 <code>DedicatedWorkerGlobalScope</code>。由于 <code>self</code> 的值会根据使用环境的不同而变化，所以有时最好使用 <code>Window</code>。 <code>self</code> 在 web worker 上下文中引用 <code>WorkerGlobalScope.self</code>，而在浏览器上下文中引用 <code>window.self</code>。</p><p>重要的是不要将 <code>self</code> 属性与声明局部变量（用于维护对上下文的引用）的常见 JavaScript 模式混淆。例如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">myProperty</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">myMethod</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">// =&gt; true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// store the value of this in a variable for use in nested functions</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">helperFunction</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span><span style="color:#676E95;font-style:italic;">// =&gt; true (self refers to the outer this value)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span><span style="color:#676E95;font-style:italic;">// =&gt; false (this refers to the global object. In strict mode, it has a value of undefined)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// invoke myMethod on the object obj.</span></span>
<span class="line"><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">myMethod</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p><strong>global</strong></p><p>在 Node.js 中，你可以使用 <code>global</code> 关键字访问全局对象：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// node environment</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(global)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// =&gt; Object [global] {...}</span></span>
<span class="line"></span></code></pre></div><p><code>window</code>、 <code>self</code> 或 <code>frames</code> 在 Node 环境中不起作用。请记住，Node.js 中的顶级作用域不是全局作用域。在浏览器中，<code>var abc = 123</code> 将创建一个全局变量。但是在 Node.js 中变量是模块本身的局部变量。</p><p><strong>this</strong></p><p>在浏览器中，可以在程序的顶层使用 <code>this</code> 关键字来引用全局对象：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">foo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">123</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">foo </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">foo)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// =&gt; true</span></span>
<span class="line"></span></code></pre></div><p><code>this</code> 在非严格模式下在函数或箭头函数内也引用全局对象。但是在严格模式下运行的函数就不是这种情况了，其中 <code>this</code> 的值为 <code>undefined</code>：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">// =&gt; Window {...}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">// =&gt; Window {...}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">use strict</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">// =&gt; undefined</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>在 Node 模块中，顶层的 <code>this</code> 不引用全局对象。相反，它与 <code>module.exports</code> 具有相同的值。在函数内部（Node 环境），<code>this</code> 的值取决于函数的调用方式。在 JavaScript 模块中，顶层的 <code>this</code> 是 <code>undefined</code>。</p><p><strong>介绍 <code>globalThis</code></strong></p><p><code>globalThis</code> 旨在通过定义标准的全局属性来整合越来越分散的访问全局对象的方式。 <code>globalThis</code> 提案目前处于第 4 阶段，这意味着它已准备好纳入 ES2020 标准。所有流行的浏览器，包括 Chrome 71 +，Firefox 65+和Safari 12.1+，都已支持该功能。你也可以在 Node.js 12+ 中使用它。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// browser environment</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(globalThis)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// =&gt; Window {...}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// node.js environment</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(globalThis)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// =&gt; Object [global] {...}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// web worker environment</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(globalThis)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// =&gt; DedicatedWorkerGlobalScope {...}</span></span>
<span class="line"></span></code></pre></div><p>通过使用 <code>globalThis</code>，你的代码能够在窗口和非窗口上下文中工作，而无需编写其他检查或测试代码。在大多数环境中， <code>globalThis</code> 直接引用该环境的全局对象。但是在浏览器中，内部需要使用代理来考虑 iframe 和跨窗口安全性。实际上，它并不会改变你编写代码的方式。</p><p>通常，当你不确定要在哪种环境中使用代码时，或者当你想使代码在不同环境中可执行时，可以用 <code>globalThis</code> 属性。不过你必须用 polyfill 在不支持该功能的旧版浏览器上实现该功能。</p><p>另一方面，如果需要你确定要在什么环境中使用代码，请使用前面列举引用环境全局对象的现有方法之一，避免为 <code>globalThis</code> 添加 polyfill 的麻烦。</p><p><strong>创建一个 <code>globalThis</code> polyfill</strong></p><p>在引入 <code>globalThis</code> 之前，一种常用的跨环境访问全局对象的方法是使用以下模式：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getGlobalObject</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Function</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">return this</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getGlobalObject</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">allSettled </span><span style="color:#89DDFF;">!==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">function</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// the Promise.allSettled() method is not available in this environment</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>这段代码的问题在于，在强制执行<a href="https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP" target="_blank" rel="noreferrer">内容安全策略（CSP）</a>的网站中不能用 <code>Function</code> 构造函数和 <code>eval</code>。由于CSP的缘故，Chrome 的扩展程序系统也不允许此类代码运行。</p><p>引用全局对象的另一种模式如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getGlobalObject</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">globalThis</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">undefined</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">globalThis</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">undefined</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">window</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">undefined</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">global</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">undefined</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">global</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">throw</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Error</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">cannot find the global object</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getGlobalObject</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">allSettled </span><span style="color:#89DDFF;">!==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">function</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// the Promise.allSettled() method is not available in this environment</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>这种模式通常在 web 上使用。但也有<a href="https://link.zhihu.com/?target=https%3A//mathiasbynens.be/notes/globalthis%23naive-polyfill" target="_blank" rel="noreferrer">几个缺陷</a>，使其在某些情况下不可靠。幸运的是 Chrome DevTools 团队的Mathias Bynens <a href="https://link.zhihu.com/?target=https%3A//mathiasbynens.be/notes/globalthis%23robust-polyfill" target="_blank" rel="noreferrer">提出了一种创意模式</a>，它没有这些缺点：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">globalThis</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">object</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#F07178;">(</span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">__magic__</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">    configurable</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// This makes it possible to \`delete\` the getter later.</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">__magic__</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">globalThis</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">__magic__</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// lolwat</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">delete</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__magic__</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Your code can use \`globalThis\` now.</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(globalThis)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>与其他方法相比，polyfill 是更可靠的解决方案，但仍然不够完美。正如 Mathias 提到的那样，修改<code>Object</code>、 <code>Object.defineProperty</code> 或 <code>Object.prototype.__defineGetter__</code> 可能会破坏 polyfill。</p><p><strong>总结</strong></p><p>能够用在多种环境中的可移植 JavaScript 代码很难编写。每个主机环境都有一个略有不同的对象模型。因此，要访问全局对象，你需要在不同的 JavaScript 环境中使用不同的语法。</p><p>通过引入 <code>globalThis</code> 属性，访问全局对象将变得更加简单，并且不再需要去检测代码所运行的环境。</p><p>乍一看 <code>globalThis</code> 似乎很容易实现。但是实际上，正确地进行操作是非常复杂的。现有的解决方法都不完美，如果不小心就可能会引入错误。</p><h5 id="可选链" tabindex="-1">可选链 ?. <a class="header-anchor" href="#可选链" aria-hidden="true">#</a></h5><blockquote><p>可选链操作符( ?. )允许读取位于连接对象链深处的属性的值，而不必明确验证链中的每个引用是否有效。?. 操作符的功能类似于 . 链式操作符，不同之处在于，在引用为空(nullish ) (null 或者 undefined) 的情况下不会引起错误，该表达式短路返回值是 undefined。与函数调用一起使用时，如果给定的函数不存在，则返回 undefined。</p></blockquote><p>上述是官方描述，举个例子对象嵌套了好多层，需要获得对象深层的值得时候，这就意味着你需要写很长的属性访问，如下：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">const person = {</span></span>
<span class="line"><span style="color:#A6ACCD;">    details: {</span></span>
<span class="line"><span style="color:#A6ACCD;">        name: {</span></span>
<span class="line"><span style="color:#A6ACCD;">            newName: &quot;aa&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">            oldName: &quot;aa&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">        age: &quot;18&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    },</span></span>
<span class="line"><span style="color:#A6ACCD;">    jobs: [</span></span>
<span class="line"><span style="color:#A6ACCD;">        &quot;H5&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">        &quot;Java&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    ]</span></span>
<span class="line"><span style="color:#A6ACCD;">} </span></span>
<span class="line"><span style="color:#A6ACCD;">const personNewName = person.details.name.newName;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>上面的代码如果我的person.details.name等任何一层数据有问题或者不存在的时候，js就会报错，我们一般会这么改进:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;"> const personNewName =  person &amp;&amp; person.details &amp;&amp; person.details.name person.details.name.newName|| &#39;&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>可以看到为了访问某个人的 newName，代码变得非常不优雅，会有多个&amp;&amp;代码量也很大。可选链 就是为了解决这个问题而诞生的。</p><p><strong>用法</strong> 有了可选链操作符（?.），在访问 person.details.name.newName 之前，不再需要明确地校验 <a href="http://person.details.name" target="_blank" rel="noreferrer">person.details.name</a> 的状态，再并用短路计算获取最终结果：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">const personFirstName = person?.details?.name?.firstName;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>其实就是在属性访问符 . 的前面加了个问号。我们看上面语句中第一个 ?. ，从 JS 层面，它表示如果 person 的值为 null 或者 undefined，就不会报错而返回 undefined，否则才继续访问后面的 details 属性。而如果后面的属性访问链中有任何一个属性为 null 或者 undefined，那么最终的值就为 undefined。 这等价于以下表达式，但实际上没有创建临时变量：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">let temp = person.details;</span></span>
<span class="line"><span style="color:#A6ACCD;">let nestedProp = ((temp === null || temp === undefined) ? undefined : temp.name);</span></span>
<span class="line"><span style="color:#A6ACCD;">let temp1 = person.details.name;</span></span>
<span class="line"><span style="color:#A6ACCD;">let nestedProp = ((temp1 === null || temp1 === undefined) ? undefined : temp1.firstName);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><strong>可选链与函数调用</strong></p><p>函数调用时如果被调用的方法不存在，使用可选链可以使表达式自动返回undefined而不是抛出一个异常。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">let result = someInterface.customMethod?.();</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>注意: 如果存在一个属性名且不是函数, 使用 ?. 仍然会产生一个 TypeError 异常 (x.y is not a function). 注意: 如果 someInterface 自身是 null 或者 undefined ，异常 TypeError 仍会被抛出 someInterface is null 如果你希望允许 someInterface 也为 null 或者 undefined ，那么你需要像这样写 someInterface?.customMethod?.()</p><p><strong>可选链和表达式</strong> 当使用方括号与属性名的形式来访问属性时，你也可以使用可选链操作符：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">let nestedProp = obj?.[&#39;prop&#39; + &#39;Name&#39;];</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><strong>可选链不能用于赋值</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">let object = {};</span></span>
<span class="line"><span style="color:#A6ACCD;">object?.property = 1; // Uncaught SyntaxError: Invalid left-hand side in assignment</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><strong>可选链访问数组元素</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">let arrayItem = arr?.[42];</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h5 id="nullish-coalescing-opearator空值合并运算符" tabindex="-1">Nullish coalescing Opearator空值合并运算符 ?? <a class="header-anchor" href="#nullish-coalescing-opearator空值合并运算符" aria-hidden="true">#</a></h5><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator" target="_blank" rel="noreferrer">空值合并操作符（??）</a>英文名称为“<strong>nullish coalescing operator</strong>”，是一个逻辑操作符，<strong>当左侧的操作数为 <code>null</code> 或者 <code>undefined</code> 时</strong>，返回其右侧操作数，否则返回左侧操作数。</p></blockquote><p>与逻辑或操作符（||）不同，逻辑或操作符会在左侧操作数为<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Falsy" target="_blank" rel="noreferrer">虚值</a>时返回右侧操作数。也就是说，如果使用 || 来为某些变量设置默认值，可能会遇到意料之外的行为。比如为<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Falsy" target="_blank" rel="noreferrer">虚值</a>（例如，<code>&#39;&#39; 或 0</code>）时。</p><p><strong>在 JavaScript 中只有 8 个 falsy 值（虚值）。</strong></p><blockquote><p>falsy 值 (虚值) 是在 Boolean 上下文中认定为 false 的值。</p></blockquote><ol><li><code>false</code></li><li><code>0</code></li><li><code>-0</code></li><li><code>0n</code></li><li><code>NaN</code></li><li><code>null</code></li><li><code>undefined</code></li><li><code>空字符串: 双引号 &quot;&quot;, 单引号 &#39;&#39;, 或 模板字面量 \`\` </code></li></ol>`,967),p=[o];function t(c,r,i,y,C,A){return n(),a("div",null,p)}const F=s(e,[["render",t]]);export{d as __pageData,F as default};
