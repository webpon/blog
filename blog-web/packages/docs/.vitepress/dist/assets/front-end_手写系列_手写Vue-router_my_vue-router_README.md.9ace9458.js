import{_ as e,c as a,o as t,a as r}from"./app.40dc24c8.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"一、核心原理","slug":"一、核心原理","link":"#一、核心原理","children":[{"level":3,"title":"1.什么是前端路由？","slug":"_1-什么是前端路由","link":"#_1-什么是前端路由","children":[]},{"level":3,"title":"2.如何实现前端路由？","slug":"_2-如何实现前端路由","link":"#_2-如何实现前端路由","children":[]}]},{"level":2,"title":"二、使用","slug":"二、使用","link":"#二、使用","children":[]}],"relativePath":"front-end/手写系列/手写Vue-router/my_vue-router/README.md"}'),i={name:"front-end/手写系列/手写Vue-router/my_vue-router/README.md"},h=r('<h2 id="一、核心原理" tabindex="-1">一、核心原理 <a class="header-anchor" href="#一、核心原理" aria-hidden="true">#</a></h2><h3 id="_1-什么是前端路由" tabindex="-1">1.什么是前端路由？ <a class="header-anchor" href="#_1-什么是前端路由" aria-hidden="true">#</a></h3><p>在 Web 前端单页应用 SPA(Single Page Application)中，路由描述的是 URL 与 UI 之间的映射关系，这种映射是单向的，即 URL 变化引起 UI 更新（无需刷新页面）。</p><h3 id="_2-如何实现前端路由" tabindex="-1">2.如何实现前端路由？ <a class="header-anchor" href="#_2-如何实现前端路由" aria-hidden="true">#</a></h3><p>要实现前端路由，需要解决两个核心：</p><ol><li>如何改变 URL 却不引起页面刷新？</li><li>如何检测 URL 变化了？</li></ol><p>下面分别使用 hash 和 history 两种实现方式回答上面的两个核心问题。</p><h5 id="hash-实现" tabindex="-1">hash 实现 <a class="header-anchor" href="#hash-实现" aria-hidden="true">#</a></h5><p>hash 是 URL 中 hash (#) 及后面的那部分，常用作锚点在页面内进行导航，<strong>改变 URL 中的 hash 部分不会引起页面刷新</strong></p><p>通过 hashchange 事件监听 URL 的变化，改变 URL 的方式只有这几种：</p><ol><li>通过浏览器前进后退改变 URL</li><li>通过<code>&lt;a&gt;</code>标签改变 URL</li><li>通过window.location改变URL</li></ol><h5 id="history-实现" tabindex="-1">history 实现 <a class="header-anchor" href="#history-实现" aria-hidden="true">#</a></h5><p>history 提供了 pushState 和 replaceState 两个方法，<strong>这两个方法改变 URL 的 path 部分不会引起页面刷新</strong></p><p>history 提供类似 hashchange 事件的 popstate 事件，但 popstate 事件有些不同：</p><ol><li>通过浏览器前进后退改变 URL 时会触发 popstate 事件</li><li>通过pushState/replaceState或<code>&lt;a&gt;</code>标签改变 URL 不会触发 popstate 事件。</li><li>好在我们可以拦截 pushState/replaceState的调用和<code>&lt;a&gt;</code>标签的点击事件来检测 URL 变化</li><li>通过js 调用history的back，go，forward方法课触发该事件</li></ol><p>所以监听 URL 变化可以实现，只是没有 hashchange 那么方便。</p><blockquote><p>需要了解更多实现原理请点下面</p><ol><li><a href="https://juejin.cn/post/6844904062698127367#heading-3" target="_blank" rel="noreferrer">vue-router实现原理及两种模式分析</a></li></ol><p>该库实现还是比较简陋的，需要了解更多请访问：<a href="https://github.com/DDFE/DDFE-blog/issues/9" target="_blank" rel="noreferrer">vue-router源码分析-整体流程</a></p></blockquote><h2 id="二、使用" tabindex="-1">二、使用 <a class="header-anchor" href="#二、使用" aria-hidden="true">#</a></h2><p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/imgimage-20221121002049704.png" alt="image-20221121002049704"></p><p><img src="https://webpon-img.oss-cn-guangzhou.aliyuncs.com/imgimage-20221121002112342.png" alt="image-20221121002112342"></p>',20),o=[h];function l(s,n,c,p,d,u){return t(),a("div",null,o)}const m=e(i,[["render",l]]);export{_ as __pageData,m as default};
